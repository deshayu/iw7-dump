// IW7 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

_id_B602( var_0 )
{
    self endon( "melee_finished" );
    self waittill( "terminate_ai_threads" );
    scripts\asm\asm_bb::_id_2916();
}

_id_B599( var_0, var_1 )
{
    if ( !isdefined( var_1 ) )
        var_1 = self._id_010C;

    if ( isdefined( self._id_B55B ) )
        _id_B580();

    scripts\asm\asm_bb::_id_297F( var_1 );
    self._id_B55B._id_1158F = var_0;
    var_1._id_B55B._id_1158F = var_0;
    return anim.success;
}

_id_B580()
{
    self _meth_8484();

    if ( isdefined( self._id_B55B ) )
    {
        if ( isdefined( self._id_B55B._id_0334 ) )
            self._id_B55B._id_0334._id_B55B = undefined;

        self._id_B55B = undefined;
    }
}

_id_3914( var_0 )
{
    if ( isdefined( self._id_B55B ) )
        return 0;

    if ( !isdefined( self._id_B5E4 ) || !self._id_B5E4 )
        return 0;

    if ( !isdefined( var_0._id_B55B ) )
        return 0;

    var_1 = var_0._id_B55B._id_C92C;

    if ( !isdefined( var_1 ) || !isdefined( var_1._id_B55B ) )
        return 0;

    if ( isdefined( var_1._id_B55B._id_29A8 ) )
        return 0;

    var_2 = distance( var_0.origin, self.origin );
    var_3 = distance( var_0.origin, var_1.origin );

    if ( var_2 + 48 > var_3 )
        return 0;

    return 1;
}

_id_9E96( var_0 )
{
    var_1 = self._id_010C;

    if ( isdefined( var_0 ) )
        var_1 = var_0;

    if ( isdefined( self._id_5966 ) )
        return 0;

    if ( isdefined( self._id_3135._id_38E1 ) )
        return 0;

    if ( !isdefined( var_1 ) )
        return 0;

    if ( isdefined( var_1._id_5966 ) )
        return 0;

    if ( isdefined( self._id_1412 ) && !_id_38CD() )
        return 0;

    if ( _id_9DD1( var_1 ) )
    {
        if ( !_id_3914( var_1 ) )
            return 0;
    }

    return 1;
}

_id_10039( var_0, var_1 )
{
    if ( !isdefined( var_1 ) )
        var_1 = self._id_010C;

    if ( !_id_9E96( var_1 ) )
        return anim.failure;

    if ( ![[ self._id_71AF ]]( var_1, 1 ) )
        return anim.failure;

    if ( !_id_9E98( var_1 ) )
        return anim.failure;

    return anim.success;
}

_id_9896( var_0 )
{
    self._id_3135._id_9928[var_0] = spawnstruct();
    self._id_3135._id_9928[var_0]._id_11901 = gettime();
    self._id_3135._id_9928[var_0]._id_312F = 0;

    if ( isplayer( self._id_B55B._id_0334 ) )
    {
        self._id_3135._id_9928[var_0]._id_0163 = self._id_0163;
        self._id_0163 = 0;
    }

    scripts\asm\asm_bb::_id_2965( self._id_B55B._id_0334 );

    if ( isdefined( self._id_71BF ) )
        self [[ self._id_71BF ]]();

    if ( !isdefined( self._id_B5DA ) && isplayer( self._id_B55B._id_0334 ) && !self._id_B55B._id_0334 isonground() )
        self._id_B55B._id_2720 = 1;

    self _meth_841F();

    if ( isai( self._id_B55B._id_0334 ) )
        self._id_B55B._id_0334 _meth_841F();
}

_id_5903( var_0 )
{
    if ( !isdefined( self._id_B55B ) )
        return anim.failure;

    if ( isdefined( self._id_B55B._id_2720 ) )
        return anim.failure;

    if ( scripts\asm\asm::_id_232A( "melee_attack", "end" ) )
        return anim.success;

    if ( scripts\asm\asm::_id_232A( "melee_attack", "begin", 0 ) )
    {
        self._id_3135._id_9928[var_0]._id_312F = 1;
        self._id_3135._id_9928[var_0]._id_11901 = gettime() + 10000;
    }

    if ( !self._id_3135._id_9928[var_0]._id_312F )
    {
        if ( !isdefined( self._id_B55B._id_0334 ) || !isalive( self._id_B55B._id_0334 ) )
            return anim.failure;
    }

    if ( gettime() > self._id_3135._id_9928[var_0]._id_11901 + 2000 )
    {
        self._id_B55B._id_2720 = 1;
        return anim.failure;
    }

    if ( isdefined( self._id_B55B._id_0334 ) && !isplayer( self._id_B55B._id_0334 ) && self._id_B55B._id_0334 scripts\asm\asm_bb::_id_2938() )
        return anim.failure;

    return anim.running;
}

_id_41C6( var_0 )
{
    scripts\asm\asm_bb::_id_2914();

    if ( isdefined( self._id_B55B ) && !isdefined( self._id_B55B._id_312F ) )
    {
        if ( isdefined( self._id_B55B._id_0334 ) )
            self._id_B55B._id_0334._id_B55B = undefined;

        self._id_B55B = undefined;
    }

    if ( isdefined( self._id_3135._id_9928[var_0]._id_0163 ) )
        self._id_0163 = self._id_3135._id_9928[var_0]._id_0163;

    self._id_3135._id_9928[var_0] = undefined;
}

_id_B5C3( var_0 )
{
    if ( isdefined( self._id_010C ) && isdefined( self._id_010C._id_B55B ) )
    {
        if ( isdefined( self._id_010C._id_B55B._id_C92C ) )
            self._id_010C._id_B55B._id_C92C _id_B580();
        else
            self._id_010C _id_B580();
    }

    return anim.success;
}

_id_B653( var_0 )
{
    _id_B599( var_0 );

    if ( isdefined( self._id_71C2 ) )
        self [[ self._id_71C2 ]]( var_0 );

    thread _id_B602( self._id_010C );
}

_id_B655( var_0 )
{
    scripts\asm\asm_bb::_id_2914();
    _id_B580();

    if ( isdefined( self._id_71C3 ) )
        self [[ self._id_71C3 ]]( var_0 );
}

_id_B657( var_0 )
{
    if ( !isdefined( self._id_B55B._id_0334 ) || !isalive( self._id_B55B._id_0334 ) )
        return anim.failure;

    if ( scripts\asm\asm::_id_232A( "melee_attack", "end" ) )
        return anim.success;

    scripts\asm\asm_bb::_id_2965( self._id_B55B._id_0334 );
    return anim.running;
}

_id_B5B4( var_0, var_1 )
{
    if ( !isdefined( anim ) )
        return;

    if ( !isdefined( anim._id_B5F5 ) )
        return;

    if ( !isdefined( var_0 ) )
        return;

    if ( !isdefined( var_1 ) )
        var_1 = 1;

    if ( isplayer( self._id_B55B._id_0334 ) && isdefined( anim._id_B5F6[self._id_12BA4] ) )
        anim._id_B5F7[self._id_12BA4] = gettime() + anim._id_B5F6[self._id_12BA4] * var_1;
    else if ( isdefined( anim._id_B5F5[self._id_12BA4] ) )
        anim._id_B5F8[self._id_12BA4] = gettime() + anim._id_B5F5[self._id_12BA4] * var_1;
}

_id_B5E8( var_0 )
{
    self._id_B55B._id_3D2C = 1;

    if ( isdefined( self._id_71C0 ) )
        self [[ self._id_71C0 ]]( var_0 );

    _id_B5B4( self._id_12BA4, 3 );
    self._id_3135._id_9928[var_0] = spawnstruct();
    self._id_3135._id_9928[var_0]._id_3E30 = gettime() + 100;
    self._id_3135._id_9928[var_0]._id_11901 = gettime() + 4000;
    self._id_3135._id_9928[var_0]._id_6572 = self._id_010C.origin;

    if ( isplayer( self._id_B55B._id_0334 ) )
    {
        self._id_3135._id_9928[var_0]._id_0163 = self._id_0163;
        self._id_0163 = 0;
    }

    self._id_01D5 = 64;
}

_id_B5EE( var_0 )
{
    if ( isdefined( self._id_B55B ) )
        _id_B5B4( self._id_12BA4, 0 );

    if ( isdefined( self._id_B55B ) && ( isdefined( self._id_B55B._id_2720 ) || !isdefined( self._id_B55B._id_29A8 ) ) )
        _id_B580();

    self _meth_8484();
    self._id_01D5 = 0;

    if ( isdefined( self._id_3135._id_9928[var_0]._id_0163 ) )
        self._id_0163 = self._id_3135._id_9928[var_0]._id_0163;

    scripts\asm\asm_bb::_id_2913();

    if ( isdefined( self._id_71C1 ) )
        self [[ self._id_71C1 ]]( var_0 );

    self._id_3135._id_9928[var_0] = undefined;
}

_id_7FAB( var_0 )
{
    if ( isplayer( var_0 ) )
        var_1 = self._id_B5F4;
    else
        var_1 = self._id_B5F1;

    if ( !_id_0A06::_id_8BC8() )
        var_1 = var_1 * self._id_B5F2;

    return var_1;
}

_id_B5B5()
{
    if ( !isdefined( self._id_B55B ) )
        return 1;

    var_0 = self._id_B55B._id_0334;

    if ( !isdefined( var_0 ) )
        return 1;

    if ( !isalive( var_0 ) )
        return 1;

    if ( !isplayer( var_0 ) && var_0 scripts\asm\asm_bb::_id_2938() )
        return 1;

    return 0;
}

_id_B5EB()
{
    if ( _id_B5B5() )
        return 1;

    if ( isdefined( self._id_3135._id_38E1 ) )
        return 1;

    if ( isdefined( self._id_B55B._id_2720 ) )
        return 1;

    var_0 = self._id_B55B._id_0334;

    if ( isdefined( var_0._id_C337 ) && var_0._id_C337._id_0019 )
    {
        if ( isai( var_0 ) || !isdefined( self._id_B5DC ) || !self._id_B5DC )
            return 1;
    }

    if ( isdefined( self._id_010C ) && var_0 != self._id_010C )
        return 1;

    if ( scripts\asm\asm::_id_232A( "melee_charge_state", "end" ) )
        return 1;

    return 0;
}

_id_B5E7( var_0 )
{
    self._id_BF90 = gettime() + 1500;
    self._id_A985 = var_0;
}

_id_B5EA( var_0, var_1 )
{
    var_2 = self._id_3135._id_9928[var_0]._id_1157A;

    if ( !isdefined( var_2 ) )
        return 0;

    if ( isdefined( self._id_0233 ) && distance2dsquared( self._id_0233, self.origin ) > 16 )
        return 0;

    return distancesquared( var_2, var_1 ) < 4;
}

_id_B5F0( var_0 )
{
    if ( _id_B5EB() )
    {
        if ( isdefined( self._id_B55B ) )
            self._id_B55B._id_2720 = 1;

        return anim.failure;
    }

    var_1 = self._id_B632;

    if ( !isdefined( var_1 ) )
        var_1 = 4096;

    var_2 = self._id_B55B._id_0334;

    if ( isdefined( self._id_B5DA ) || isdefined( self._id_B621 ) )
        var_3 = distance2dsquared( var_2.origin, self.origin );
    else
        var_3 = distancesquared( var_2.origin, self.origin );

    var_4 = _id_7FAB( var_2 ) + 24;
    var_5 = var_4 * var_4;

    if ( var_3 > var_5 )
    {
        self._id_B55B._id_2720 = 1;
        return anim.failure;
    }

    if ( isplayer( var_2 ) )
        var_6 = getclosestpointonnavmesh( var_2.origin, self );
    else
        var_6 = var_2 _meth_84AC();

    var_7 = var_1;
    var_8 = length( self._id_0381 );

    if ( var_8 > 1 )
        var_7 = squared( sqrt( var_1 ) + var_8 * 0.1 );

    if ( var_3 <= var_7 )
    {
        if ( isplayer( var_2 ) )
        {
            if ( scripts\engine\utility::_id_B616() )
                return anim.running;
        }

        var_9 = 18;

        if ( isdefined( self._id_02C0 ) && self._id_02C0 != "none" && isplayer( var_2 ) )
            var_9 = 32;

        if ( isdefined( self._id_B621 ) || abs( self.origin[2] - var_2.origin[2] ) < var_9 )
        {
            var_10 = self _meth_84AC();

            if ( self [[ self._id_7199 ]]( var_10, var_6 ) )
            {
                self._id_B55B._id_29A8 = 1;
                return anim.success;
            }
        }
    }

    if ( self._id_2748 || gettime() > self._id_3135._id_9928[var_0]._id_3E30 && !isdefined( self._id_0233 ) )
    {
        _id_B5E7( var_2 );
        self._id_B55B._id_2720 = 1;
        return anim.failure;
    }

    if ( !isdefined( self._id_B55B._id_2AC7 ) || !self._id_B55B._id_2AC7 )
    {
        if ( gettime() >= self._id_3135._id_9928[var_0]._id_11901 )
        {
            _id_B5E7( var_2 );
            self._id_B55B._id_2720 = 1;
            return anim.failure;
        }
    }

    if ( !isdefined( self._id_B55B._id_2AC6 ) || !self._id_B55B._id_2AC6 )
    {
        if ( isdefined( self._id_B5DA ) )
            var_11 = distance2dsquared( var_2.origin, self._id_3135._id_9928[var_0]._id_6572 );
        else
            var_11 = distancesquared( var_2.origin, self._id_3135._id_9928[var_0]._id_6572 );

        if ( var_11 > 16384 )
        {
            _id_B5E7( var_2 );
            self._id_B55B._id_2720 = 1;
            return anim.failure;
        }
    }

    var_12 = max( sqrt( var_1 ) - 24, 0 );
    var_13 = vectornormalize( self.origin - var_2.origin );
    var_14 = var_2.origin + var_13 * var_12;
    var_15 = 36;

    if ( isdefined( self._id_B64F ) )
        var_15 = self._id_B64F;

    var_16 = 1;

    if ( !_id_B5EA( var_0, var_14 ) )
    {
        var_17 = getclosestpointonnavmesh( var_14, self );
        var_16 = distance2dsquared( var_14, var_17 ) > var_15;

        if ( !var_16 )
            var_16 = !self [[ self._id_7199 ]]( var_17, var_6 );
    }

    if ( var_16 && isdefined( self._id_B651 ) && self._id_B651 )
    {
        if ( isdefined( var_2._id_0205 ) )
        {
            if ( scripts\engine\utility::_id_9EB4( var_2._id_0205 ) )
            {
                var_18 = anglestoleft( var_2._id_0205.angles );
                var_14 = var_2._id_0205.origin + var_18 * var_12;
            }
            else if ( scripts\engine\utility::_id_9EB7( var_2._id_0205 ) )
            {
                var_19 = anglestoright( var_2._id_0205.angles );
                var_14 = var_2._id_0205.origin + var_19 * var_12;
            }
            else
            {
                var_20 = anglestoforward( var_2._id_0205.angles );
                var_14 = var_2._id_0205.origin - var_20 * var_12;
            }

            if ( !_id_B5EA( var_0, var_14 ) )
            {
                var_17 = getclosestpointonnavmesh( var_14, self );
                var_16 = distance2dsquared( var_14, var_17 ) > var_15;
            }
        }

        if ( var_16 )
        {
            var_14 = var_2.origin - var_13 * var_12;

            if ( !_id_B5EA( var_0, var_14 ) )
            {
                var_17 = getclosestpointonnavmesh( var_14, self );
                var_16 = distance2dsquared( var_14, var_17 ) > var_15;
            }
        }

        if ( var_16 )
        {
            var_14 = var_6;
            var_16 = 0;
        }
    }

    if ( var_16 )
    {
        _id_B5E7( var_2 );
        self._id_B55B._id_2720 = 1;
        return anim.failure;
    }

    self _meth_8481( var_14 );
    self._id_006D = 6;
    self._id_3135._id_9928[var_0]._id_1157A = var_14;
    scripts\asm\asm_bb::_id_2966( var_2, var_14 );
    return anim.running;
}

_id_8198( var_0 )
{
    var_1 = var_0.origin;
    var_2 = var_0.origin - self.origin;
    var_2 = vectornormalize( var_2 );
    var_1 = var_1 - var_2 * self._id_B5D9;
    var_3 = getclosestpointonnavmesh( var_1, self );

    if ( abs( var_1[2] - var_3[2] ) > self._id_B4D9 )
        return undefined;

    var_4 = _func_272( self.origin, var_3, self, 1 );
    var_5 = var_4["fraction"];

    if ( var_5 < self._id_1548 )
        return undefined;

    return var_3;
}

_id_38CD()
{
    if ( isdefined( self._id_65DB ) && isdefined( self._id_65DB["_stealth_enabled"] ) && self._id_65DB["_stealth_enabled"] )
    {
        if ( isdefined( self._id_65DB["_stealth_attack"] ) && !self._id_65DB["_stealth_attack"] )
            return 0;
    }

    return anim.success;
}

_id_9DD1( var_0 )
{
    var_1 = self._id_010C;

    if ( isdefined( var_0 ) )
        var_1 = var_0;

    if ( isdefined( self._id_B55B ) )
        return 1;

    if ( isdefined( var_1._id_B55B ) )
        return 1;

    return 0;
}

_id_9E98( var_0 )
{
    if ( abs( var_0.origin[2] - self.origin[2] ) > self._id_B627 )
        return 0;

    var_1 = _id_7FAB( var_0 );
    var_2 = var_1 * var_1;
    var_3 = distancesquared( self.origin, var_0.origin );
    return var_3 <= var_2;
}

_id_9E9A( var_0, var_1 )
{
    if ( isdefined( self._id_5966 ) )
        return 0;

    if ( !isdefined( var_0 ) )
        return 0;

    if ( isdefined( var_0._id_5966 ) )
        return 0;

    if ( !isalive( self ) )
        return 0;

    if ( !isalive( var_0 ) )
        return 0;

    return 1;
}
