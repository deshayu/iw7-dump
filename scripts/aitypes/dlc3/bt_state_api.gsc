// IW7 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

btstate_getinstancedata( var_0 )
{
    return self._id_3135._id_9928[var_0];
}

btstate_setupstate( var_0, var_1, var_2, var_3 )
{
    var_4 = spawnstruct();
    var_4.name = var_0;
    var_4.fnbegin = var_1;
    var_4.fntick = var_2;
    var_4.fnend = var_3;

    if ( !isdefined( self.bt_states ) )
        self.bt_states = [];

    self.bt_states[var_0] = var_4;
    return var_4;
}

btstate_getcurrentstatename( var_0 )
{
    var_1 = btstate_getinstancedata( var_0 );

    if ( !isdefined( var_1 ) )
        return undefined;

    if ( !isdefined( var_1._id_4C07 ) )
        return undefined;

    return var_1._id_4C07.name;
}

btstate_tickstates( var_0 )
{
    var_1 = btstate_getinstancedata( var_0 );

    if ( !isdefined( var_1._id_4C07 ) )
        return 0;

    if ( isdefined( var_1._id_4C07.fntick ) )
    {
        var_2 = var_1._id_4C07.name;
        var_3 = self [[ var_1._id_4C07.fntick ]]( var_0 );

        if ( isdefined( var_1._id_4C07 ) && var_1._id_4C07.name != var_2 )
            return btstate_tickstates( var_0 );

        return var_3;
    }

    return 1;
}

btstate_endstates( var_0 )
{
    var_1 = btstate_getinstancedata( var_0 );

    if ( isdefined( var_1._id_4C07 ) && isdefined( var_1._id_4C07.fnend ) )
    {
        [[ var_1._id_4C07.fnend ]]( var_0, undefined );
        var_1._id_4C07 = undefined;
    }
}

btstate_destroystates()
{
    self.bt_states = undefined;
}

btstate_endcurrentstate( var_0 )
{
    var_1 = btstate_getinstancedata( var_0 );

    if ( isdefined( var_1._id_4C07 ) && isdefined( var_1._id_4C07.fnend ) )
        self [[ var_1._id_4C07.fnend ]]( var_0, undefined );

    var_1._id_4C07 = undefined;
}

btstate_transitionstate( var_0, var_1 )
{
    var_2 = btstate_getinstancedata( var_0 );
    var_3 = undefined;

    if ( isdefined( var_2._id_4C07 ) )
    {
        var_3 = var_2._id_4C07.name;

        if ( isdefined( var_2._id_4C07.fnend ) )
            [[ var_2._id_4C07.fnend ]]( var_0, var_1 );
    }

    var_4 = self.bt_states[var_1];
    var_2._id_4C07 = var_4;

    if ( isdefined( var_4.fnbegin ) )
        self [[ var_4.fnbegin ]]( var_0, var_3 );
}

chase_target_state_setup( var_0, var_1, var_2, var_3, var_4 )
{
    btstate_setupstate( "chase", ::chase_target_state_begin, ::chase_target_state_tick, ::chase_target_state_end );
    var_5 = btstate_getinstancedata( var_0 );
    var_5._id_015C = var_1;
    var_5._id_0334 = var_2;
    var_5.fncallback = var_3;
    var_5.maxchasetime = var_4;
}

chase_target_state_begin( var_0, var_1 )
{
    var_2 = btstate_getinstancedata( var_0 );
    var_2._id_10DFF = gettime();
    self _meth_8284( var_2._id_0334 );
    self _meth_8287( var_2._id_015C * 0.9 );
}

chase_target_state_done( var_0, var_1 )
{
    var_2 = btstate_getinstancedata( var_0 );
    var_3 = var_2.fncallback;
    btstate_endcurrentstate( var_0 );

    if ( isdefined( var_3 ) )
        [[ var_3 ]]( var_0, var_1 );
}

chase_target_state_tick( var_0 )
{
    var_1 = btstate_getinstancedata( var_0 );

    if ( !isalive( var_1._id_0334 ) )
    {
        chase_target_state_done( var_0, "aborted" );
        return 0;
    }

    if ( isdefined( var_1.maxchasetime ) )
    {
        if ( gettime() > var_1._id_10DFF + var_1.maxchasetime )
        {
            chase_target_state_done( var_0, "timeout" );
            return 0;
        }
    }

    var_2 = distance2dsquared( self.origin, var_1._id_0334.origin );

    if ( var_2 > squared( var_1._id_015C ) )
        return 1;

    if ( abs( self.origin[2] - var_1._id_0334.origin[2] > 32 ) )
        return 1;

    chase_target_state_done( var_0, "arrived" );
    return 1;
}

chase_target_state_end( var_0, var_1 )
{
    var_2 = btstate_getinstancedata( var_0 );
    var_2._id_015C = undefined;
    var_2._id_0334 = undefined;
    var_2.fncallback = undefined;
}

asm_wait_state_setup( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    if ( !isdefined( var_4 ) )
        var_4 = "ASM_Finished";

    btstate_setupstate( var_1, ::asm_wait_state_begin, ::asm_wait_state_tick, ::asm_wait_state_end );
    var_7 = btstate_getinstancedata( var_0 );
    var_7.endevent = var_4;
    var_7.asmstate = var_2;
    var_7.fncallback = var_3;

    if ( isdefined( var_6 ) )
        var_7.timeouttime = gettime() + var_6;
    else
        var_7.timeouttime = gettime() + 2000;

    if ( isdefined( var_5 ) )
        var_7._id_6393 = gettime() + var_5;
}

asm_wait_state_begin( var_0, var_1 )
{
    var_2 = btstate_getinstancedata( var_0 );
    var_2.bisinasmstate = scripts\asm\asm::_id_2354( var_2.asmstate );
}

asm_wait_state_tick( var_0 )
{
    var_1 = btstate_getinstancedata( var_0 );
    var_2 = scripts\asm\asm::_id_2354( var_1.asmstate );

    if ( var_2 && !var_1.bisinasmstate )
        var_1.bisinasmstate = 1;

    var_3 = 0;
    var_4 = undefined;

    if ( !var_2 && var_1.bisinasmstate )
    {
        var_3 = 1;
        var_4 = "aborted";
    }
    else if ( isdefined( var_1.timeouttime ) && !var_2 && !var_1.bisinasmstate )
    {
        if ( gettime() > var_1.timeouttime )
        {
            var_3 = 1;
            var_4 = "timeout";
        }
    }
    else if ( isdefined( var_1._id_6393 ) )
    {
        if ( gettime() > var_1._id_6393 )
        {
            var_3 = 1;
            var_4 = "end_time";
        }
    }

    if ( !var_3 && scripts\asm\asm::_id_232A( var_1.asmstate, var_1.endevent ) )
    {
        var_3 = 1;
        var_4 = "end_event";
    }

    if ( var_3 )
    {
        var_5 = var_1.fncallback;
        btstate_endcurrentstate( var_0 );

        if ( isdefined( var_5 ) )
            [[ var_5 ]]( var_0, var_4 );
    }

    return !var_3;
}

asm_wait_state_end( var_0, var_1 )
{
    var_2 = btstate_getinstancedata( var_0 );
    var_2.endevent = undefined;
    var_2.asmstate = undefined;
    var_2.fncallback = undefined;
    var_2.bisinasmstate = undefined;
}
