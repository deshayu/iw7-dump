// IW7 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

sasquatch_init( var_0 )
{
    var_1 = gettime();
    self._id_3135.allowthrowtime = var_1 + 8000;
    self._id_3135.allowrushtime = var_1 + 5000;
    return anim.success;
}

isintrees( var_0 )
{
    return anim.failure;
}

updateeveryframe( var_0 )
{
    if ( !isalive( self ) )
        return anim.failure;

    if ( isdefined( self._id_EF47 ) && self._id_EF47 )
        return anim.failure;

    var_1 = getclosestplayer();
    self._id_3135._id_010C = var_1;
    return anim.success;
}

shouldswingaround( var_0 )
{
    return anim.failure;
}

shouldthrowrock( var_0 )
{
    if ( !isdefined( self._id_3135._id_010C ) )
        return anim.failure;

    if ( gettime() < self._id_3135.allowthrowtime )
        return anim.failure;

    var_1 = distance2dsquared( self._id_3135._id_010C.origin, self.origin );

    if ( var_1 > 360000 )
        return anim.failure;

    if ( var_1 < 16384 )
        return anim.failure;

    if ( !self _meth_805F( self._id_3135._id_010C ) )
        return anim.failure;

    return anim.success;
}

throwattack_check( var_0 )
{
    var_1 = scripts\asm\asm_bb::_id_2930();

    if ( !isdefined( var_1 ) )
        return anim.failure;

    if ( !isalive( var_1 ) )
        return anim.failure;

    if ( distancesquared( self.origin, var_1.origin ) > 518400 )
        return anim.failure;

    return anim.success;
}

throwattack_init( var_0 )
{
    self._id_3135._id_9928[var_0] = spawnstruct();
    self._id_3135._id_9928[var_0]._id_10DFF = gettime();
    self._id_3135._id_9928[var_0]._id_0334 = self._id_3135._id_010C;
    self _meth_8286( self.origin );
    self _meth_8287( 64 );
    scripts\asm\asm_bb::_id_296C( 1, self._id_3135._id_010C );
}

throwattack( var_0 )
{
    var_1 = 5000;

    if ( gettime() - self._id_3135._id_9928[var_0]._id_10DFF > var_1 )
        return anim.failure;

    if ( scripts\asm\asm::_id_232A( "throwevent", "end" ) )
        return anim.success;

    return anim.running;
}

throwattack_cleanup( var_0 )
{
    self._id_3135._id_9928[var_0] = undefined;
    scripts\asm\asm_bb::_id_296C( 0 );
    self._id_3135.allowthrowtime = gettime() + 8000;
}

_id_10039( var_0 )
{
    if ( !isdefined( self._id_3135._id_010C ) )
        return anim.failure;

    var_1 = self._id_3135._id_010C;

    if ( isdefined( self._id_3135.lastmeleefailtarget ) && self._id_3135.lastmeleefailtarget == var_1 && gettime() - self._id_3135.lastmeleefailtime < 3000 )
        return anim.failure;

    var_2 = var_1.origin - self.origin;
    var_3 = length2dsquared( var_2 );

    if ( var_3 > 65536 )
        return anim.failure;

    if ( abs( var_2[2] ) > 72 && var_3 < 10000 )
        return anim.failure;

    return anim.success;
}

melee_setup( var_0 )
{
    self._id_3135._id_B64D = self._id_3135._id_010C;
    return anim.success;
}

_id_B5B5()
{
    var_0 = self._id_3135._id_B64D;

    if ( !isdefined( var_0 ) )
        return 1;

    if ( !isalive( var_0 ) )
        return 1;

    return 0;
}

melee_cleanup()
{
    self._id_3135._id_B64D = undefined;
}

melee_failed( var_0, var_1 )
{
    self._id_3135.lastmeleefailtime = gettime();
    self._id_3135.lastmeleefailtarget = var_1;
    self._id_3135.lastmeleefailreason = var_0;
}

melee_charge_init( var_0 )
{
    self._id_3135._id_9928[var_0] = spawnstruct();
    self._id_3135._id_9928[var_0]._id_10DFF = gettime();
    self._id_3135._id_9928[var_0].prevgoalpos = self.origin;
}

melee_charge( var_0 )
{
    if ( _id_B5B5() )
        return anim.failure;

    var_1 = self._id_3135._id_B64D;
    var_2 = gettime() - self._id_3135._id_9928[var_0]._id_10DFF;
    var_3 = isdefined( self _meth_8150() );

    if ( var_2 > 200 && !var_3 )
    {
        melee_failed( 1, var_1 );
        return anim.failure;
    }

    if ( var_2 > 5000 )
    {
        melee_failed( 3, var_1 );
        return anim.failure;
    }

    var_4 = var_1.origin - self.origin;
    var_5 = length2dsquared( var_4 );
    var_6 = var_5;

    if ( var_3 )
    {
        var_7 = self _meth_841E();
        var_6 = var_7 * var_7;
    }

    if ( var_6 > 200704 )
    {
        melee_failed( 2, var_1 );
        return anim.failure;
    }

    if ( var_5 < 5184 )
    {
        var_8 = self _meth_84AC();
        var_9 = getclosestpointonnavmesh( var_1.origin, self );

        if ( _func_2AC( var_8, var_9, self ) )
        {
            self._id_3135._id_9928[var_0].bsuccess = 1;
            return anim.success;
        }
    }

    var_10 = var_1.origin;
    var_11 = 144;

    if ( distance2dsquared( var_10, self._id_3135._id_9928[var_0].prevgoalpos ) > var_11 )
    {
        self _meth_8286( var_10 );
        self _meth_8287( 24 );
        self._id_3135._id_9928[var_0].prevgoalpos = var_10;
    }

    return anim.running;
}

melee_charge_cleanup( var_0 )
{
    if ( !isdefined( self._id_3135._id_9928[var_0].bsuccess ) )
        melee_cleanup();

    self._id_3135._id_9928[var_0] = undefined;
}

melee_attack_init( var_0 )
{
    self._id_3135._id_9928[var_0] = spawnstruct();
    self._id_3135._id_9928[var_0]._id_10DFF = gettime();
    scripts\asm\asm_bb::_id_2965( self._id_3135._id_B64D );
    self _meth_8286( self.origin );
    self _meth_8287( 64 );
}

melee_attack( var_0 )
{
    if ( _id_B5B5() )
        return anim.failure;

    var_1 = 10000;

    if ( gettime() - self._id_3135._id_9928[var_0]._id_10DFF > var_1 )
        return anim.failure;

    if ( scripts\asm\asm::_id_232A( "meleeattack", "end" ) )
        return anim.success;

    return anim.running;
}

melee_attack_cleanup( var_0 )
{
    self._id_3135._id_9928[var_0] = undefined;
    melee_cleanup();
    scripts\asm\asm_bb::_id_2914();
}

shouldrush( var_0 )
{
    var_1 = self._id_3135._id_010C;

    if ( !isdefined( var_1 ) || !isalive( var_1 ) )
        return anim.failure;

    if ( gettime() < self._id_3135.allowrushtime )
        return anim.failure;

    var_2 = var_1.origin - self.origin;
    var_3 = length2dsquared( var_2 );

    if ( var_3 > 589824 )
        return anim.failure;

    if ( var_3 < 32400 )
        return anim.failure;

    if ( isdefined( self._id_0233 ) )
    {
        var_4 = self _meth_84F9( 84 );

        if ( isdefined( var_4 ) )
            return anim.failure;

        if ( self _meth_841E() > 1179648 )
            return anim.failure;
    }

    if ( !self _meth_805F( var_1 ) )
        return anim.failure;

    return anim.success;
}

rush_charge_init( var_0 )
{
    self._id_3135._id_9928[var_0] = spawnstruct();
    self._id_3135._id_9928[var_0]._id_10DFF = gettime();
    self._id_3135._id_9928[var_0]._id_02C5 = self.origin;
    self._id_3135._id_9928[var_0]._id_3140 = 1;
    self._id_1198._id_BD23 = "sprint";
    self._id_1198.brushorienttoenemy = 1;
    self._id_1198.brushrequested = 1;
    self._id_3135._id_B64D = self._id_3135._id_010C;
}

rush_charge( var_0 )
{
    var_1 = 0;
    var_2 = 1;
    var_3 = 2;

    if ( _id_B5B5() )
        return anim.success;

    var_4 = gettime();
    var_5 = self._id_3135._id_9928[var_0]._id_10DFF;
    var_6 = 8000;

    if ( var_4 > var_5 + var_6 )
    {
        self._id_3135._id_9928[var_0].bfailure = 1;
        return anim.failure;
    }

    if ( distance2dsquared( self.origin, self._id_3135._id_9928[var_0]._id_02C5 ) > 262144 )
        return anim.success;

    var_7 = self._id_3135._id_B64D.origin - self.origin;

    if ( length2dsquared( var_7 ) < 20736 )
    {
        self._id_3135._id_9928[var_0].bsuccess = 1;
        return anim.success;
    }

    if ( var_4 > var_5 + 200 && !isdefined( self._id_0233 ) )
    {
        self._id_3135._id_9928[var_0].bfailure = 1;
        return anim.failure;
    }

    var_8 = self _meth_84F9( 84 );

    if ( isdefined( var_8 ) )
    {
        self._id_3135._id_9928[var_0].bfailure = 1;
        return anim.failure;
    }

    if ( self._id_3135._id_9928[var_0]._id_3140 )
    {
        var_9 = 1000;

        if ( var_4 > self._id_3135._id_9928[var_0]._id_10DFF + var_9 )
        {
            var_10 = vectornormalize( ( var_7[0], var_7[1], 0 ) );
            var_11 = self _meth_813A();
            var_11 = vectornormalize( ( var_11[0], var_11[1], 0 ) );

            if ( vectordot( var_7, var_11 ) < 0.966 )
            {
                var_12 = self.origin + var_11 * 208;
                var_13 = self _meth_84AC();
                var_14 = _func_272( var_13, var_12, self, 1 );

                if ( var_14["fraction"] < 1 )
                    var_12 = var_14["position"];

                self _meth_8286( var_12 );
                self _meth_8287( 24 );
                self._id_3135._id_9928[var_0]._id_3140 = 0;
            }
            else
            {
                self _meth_8286( self._id_3135._id_B64D.origin );
                self _meth_8287( 24 );
            }
        }
        else
        {
            self _meth_8286( self._id_3135._id_B64D.origin );
            self _meth_8287( 24 );
        }
    }
    else if ( self _meth_841E() < 144 )
        return anim.success;

    return anim.running;
}

rush_charge_cleanup( var_0 )
{
    if ( !isdefined( self._id_3135._id_9928[var_0].bsuccess ) )
    {
        melee_cleanup();
        self._id_3135.allowrushtime = gettime() + 1000;
    }

    self._id_1198._id_BD23 = "run";
    self._id_1198.brushrequested = undefined;
    self._id_3135._id_9928[var_0] = undefined;
}

rush_attack_init( var_0 )
{
    self._id_3135._id_9928[var_0] = gettime();
    scripts\asm\asm_bb::_id_2965( self._id_3135._id_B64D );
}

rush_attack( var_0 )
{
    var_1 = gettime();
    var_2 = 5000;

    if ( var_1 > self._id_3135._id_9928[var_0] + var_2 )
        return anim.failure;

    if ( scripts\asm\asm::_id_232A( "rushattack", "end" ) )
    {
        self._id_3135.allowrushtime = var_1 + 5000;
        return anim.success;
    }

    self _meth_8286( self.origin );
    self _meth_8287( 36 );
    return anim.running;
}

rush_attack_cleanup( var_0 )
{
    self._id_3135._id_9928[var_0] = undefined;
    scripts\asm\asm_bb::_id_2914();
    melee_cleanup();
}

shouldtaunt( var_0 )
{
    if ( isdefined( self.killed_player ) )
    {
        self.killed_player = undefined;
        return anim.success;
    }

    return anim.failure;
}

taunt_init( var_0 )
{
    self._id_3135._id_9928[var_0] = gettime();
    self._id_1198.btauntrequested = 1;
    self _meth_8286( self.origin );
    self _meth_8287( 64 );
}

_id_5ABE( var_0 )
{
    var_1 = 6000;

    if ( gettime() - self._id_3135._id_9928[var_0] > var_1 )
        return anim.failure;

    if ( scripts\asm\asm::_id_232A( "tauntevent", "end" ) )
        return anim.success;

    return anim.running;
}

taunt_cleanup( var_0 )
{
    self._id_3135._id_9928[var_0] = undefined;
    self._id_1198.btauntrequested = undefined;
}

wander_init( var_0 )
{
    var_1 = spawnstruct();
    var_1.curtargetpos = self.origin;
    var_1.nextchecktime = gettime();
    self._id_3135._id_9928[var_0] = var_1;
}

getclosestplayer()
{
    var_0 = undefined;
    var_1 = 0;

    foreach ( var_3 in level.players )
    {
        if ( !isalive( var_3 ) )
            continue;

        if ( var_3._id_0184 || isdefined( var_3.owner ) && var_3.owner._id_0184 )
            continue;

        if ( _id_0F74::_id_1002C( var_3 ) )
            continue;

        var_4 = distance2dsquared( self.origin, var_3.origin );

        if ( !isdefined( var_0 ) || var_4 < var_1 )
        {
            var_0 = var_3;
            var_1 = var_4;
        }
    }

    return var_0;
}

wander( var_0 )
{
    if ( isdefined( self._id_3135._id_010C ) && !scripts\engine\utility::_id_9CEE( self._id_3135._id_010C._id_0184 ) )
    {
        var_1 = self._id_3135._id_010C.origin;

        if ( !isdefined( self._id_0233 ) || distance2dsquared( var_1, self._id_3135._id_9928[var_0].curtargetpos ) > 1296 )
        {
            self._id_3135._id_9928[var_0].curtargetpos = var_1;
            var_2 = getclosestpointonnavmesh( var_1, self );
            self _meth_8286( var_2 );
        }
    }
    else if ( gettime() >= self._id_3135._id_9928[var_0].nextchecktime || isdefined( self._id_3135._id_010C ) && scripts\engine\utility::_id_9CEE( self._id_3135._id_010C._id_0184 ) )
    {
        var_3 = getclosestplayer();

        if ( isdefined( var_3 ) )
        {
            self._id_3135._id_9928[var_0].curtargetpos = var_3.origin;
            var_2 = getclosestpointonnavmesh( var_3.origin, self );
            self _meth_8286( var_2 );
            self._id_3135._id_9928[var_0].nextchecktime = self._id_3135._id_9928[var_0].nextchecktime + 2000;
        }
    }

    return anim.running;
}

wander_cleanup( var_0 )
{
    self._id_3135._id_9928[var_0] = undefined;
}
