// IW7 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

_id_591D( var_0 )
{
    var_1 = level._id_C2A8[var_0];

    if ( isdefined( var_1._id_0334 ) )
        var_2[0] = getent( var_1._id_0334, "targetname" );
    else
    {
        var_2[0] = spawn( "script_model", var_1.origin );
        var_2[0].angles = var_1.angles;
    }

    level._id_6E65 = scripts\mp\utility\game::_id_5F6B( "flagCaptureTime", 10, 0, 30 );
    var_3 = scripts\mp\gameobjects::createuseobject( "neutral", var_1, var_2, ( 0, 0, 100 ) );
    var_3 scripts\mp\gameobjects::allowuse( "enemy" );
    var_3 scripts\mp\gameobjects::_id_3897( 1 );
    var_3 scripts\mp\gameobjects::_id_FB08( level._id_6E65 );
    var_3 scripts\mp\gameobjects::_id_FB07( &"MP_SECURING_POSITION" );
    var_4 = var_3 scripts\mp\gameobjects::_id_7F5A();
    var_3._id_01AD = var_4;
    var_3 scripts\mp\gameobjects::setzonestatusicons( level.icondefend + var_4, level.iconneutral + var_4 );
    var_3 scripts\mp\gameobjects::_id_FB0E( "any" );
    var_3._id_C5BB = ::_id_5917;
    var_3._id_C4CB = ::_id_5918;
    var_3._id_C5C8 = ::_id_591A;
    var_3._id_C50D = ::_id_5919;
    var_3._id_C4D9 = ::dompoint_oncontested;
    var_3._id_C5B9 = ::dompoint_onuncontested;
    var_3._id_C18B = 1;
    var_3._id_92B8 = "domFlag";
    var_3._id_3FF7 = level._id_6E65 * 1000;
    var_3._id_6DE3 = 1;
    var_5 = var_2[0].origin + ( 0, 0, 32 );
    var_6 = var_2[0].origin + ( 0, 0, -32 );
    var_7 = scripts\engine\trace::_id_48BC( 1, 1, 1, 1, 0, 1, 1 );
    var_8 = [];
    var_9 = scripts\engine\trace::_id_DCED( var_5, var_6, var_8, var_7 );
    var_10 = checkmapoffsets( var_3._id_01AD );
    var_3._id_289D = var_9["position"] + var_10;
    var_11 = vectortoangles( var_9["normal"] );
    var_12 = checkmapfxangles( var_3._id_01AD, var_11 );
    var_3._id_289C = anglestoforward( var_12 );
    var_13 = spawn( "script_model", var_3._id_289D );
    var_13 setmodel( "dom_flag_scriptable" );
    var_13.angles = generateaxisanglesfromforwardvector( var_3._id_289C, var_13.angles );
    var_3._id_0289 = var_13;
    var_3.vfxnamemod = "";

    if ( var_3.trigger.radius == 160 )
        var_3.vfxnamemod = "_160";
    else if ( var_3.trigger.radius == 90 )
        var_3.vfxnamemod = "_90";

    var_3 _id_987B();
    var_3 scripts\engine\utility::delaythread( 1.0, ::_id_5912 );
    return var_3;
}

checkmapoffsets( var_0 )
{
    var_1 = ( 0, 0, 0 );

    if ( level._id_B335 == "mp_quarry" )
    {
        if ( var_0 == "_c" )
            var_1 = var_1 + ( 0, 0, 7 );
    }

    if ( level._id_B335 == "mp_divide" )
    {
        if ( var_0 == "_a" )
            var_1 = var_1 + ( 0, 0, 4.5 );
    }

    if ( level._id_B335 == "mp_afghan" )
    {
        if ( var_0 == "_a" )
            var_1 = var_1 + ( 0, 0, 5 );

        if ( var_0 == "_c" )
            var_1 = var_1 + ( 0, 0, 1 );
    }

    return var_1;
}

checkmapfxangles( var_0, var_1 )
{
    var_2 = var_1;

    if ( level._id_B335 == "mp_quarry" )
    {
        if ( var_0 == "_c" )
            var_2 = ( 276.5, var_2[1], var_2[2] );
    }

    if ( level._id_B335 == "mp_divide" )
    {
        if ( var_0 == "_a" )
            var_2 = ( 273.5, var_2[1], var_2[2] );
    }

    if ( level._id_B335 == "mp_afghan" )
    {
        if ( var_0 == "_a" )
            var_2 = ( 273.5, 200.5, var_2[2] );

        if ( var_0 == "_c" )
            var_2 = ( 273.5, var_2[1], var_2[2] );
    }

    return var_2;
}

_id_987B()
{
    if ( isdefined( level._id_B3FB ) )
    {
        self._id_AFC1 = [[ level._id_B3F3 ]]();
        var_0 = "A";

        switch ( self._id_01AD )
        {
            case "_a":
                var_0 = "A";
                break;
            case "_b":
                var_0 = "B";
                break;
            case "_c":
                var_0 = "C";
                break;
            default:
                break;
        }

        self._id_AFB6 = "FLAG_" + var_0;
    }

    if ( scripts\mp\analyticslog::_id_1E62() )
    {
        self._id_1E63 = scripts\mp\analyticslog::_id_81EE();
        self._id_1E64 = "dom_flag" + self._id_01AD;
    }
}

_id_5912( var_0 )
{
    self notify( "flag_neutral" );
    scripts\mp\gameobjects::_id_F7D4( "neutral" );
    scripts\mp\gameobjects::setzonestatusicons( level.iconneutral + self._id_01AD );
    updateflagstate( "idle", var_0 );

    if ( isdefined( level._id_B3FB ) && isdefined( self._id_AFC1 ) && isdefined( self._id_AFB6 ) )
        [[ level._id_B3FB ]]( self._id_AFC1, undefined, self._id_AFB6, self.visuals[0].origin[0], self.visuals[0].origin[1], gettime(), 0 );

    scripts\mp\analyticslog::_id_AFA0( self._id_1E64, self._id_1E63, self.visuals[0].origin, -1, "neutral" );
}

_id_591B( var_0 )
{
    scripts\mp\gameobjects::_id_F7D4( var_0 );
    scripts\mp\gameobjects::setzonestatusicons( level.icondefend + self._id_01AD, level.iconcapture + self._id_01AD );
    self._id_BEF4 = 0;
    updateflagstate( var_0, 0 );

    if ( isdefined( level._id_B3FB ) )
        [[ level._id_B3FB ]]( self._id_AFC1, undefined, self._id_AFB6, self.visuals[0].origin[0], self.visuals[0].origin[1], gettime(), scripts\engine\utility::ter_op( var_0 == "allies", 1, 2 ) );

    scripts\mp\analyticslog::_id_AFA0( self._id_1E64, self._id_1E63, self.visuals[0].origin, -1, "captured_" + var_0 );
}

_id_5917( var_0 )
{
    var_1 = var_0.team;
    var_2 = scripts\mp\gameobjects::_id_803E();
    self._id_3A40 = gettime();
    self._id_BEF4 = 0;

    if ( level._id_6E68 )
    {
        var_3 = scripts\mp\gameobjects::_id_803E();

        if ( var_3 == "neutral" )
            _id_591B( var_1 );
        else
        {
            thread _id_5912( 1 );
            scripts\mp\utility\game::_id_D52E( "mp_dom_flag_lost", var_3 );
            level._id_A94F = gettime();
            thread _id_8365( self._id_11A45[var_1] );
            self._id_BEF4 = 1;
        }
    }
    else
        _id_591B( var_1 );

    if ( !self._id_BEF4 )
    {
        var_4 = 3;

        if ( self._id_01AD == "_a" )
            var_4 = 1;
        else if ( self._id_01AD == "_b" )
            var_4 = 2;

        scripts\mp\utility\game::_id_F79E( 19, var_1, var_0 getentitynumber(), var_4 );

        if ( isdefined( level._id_C561 ) )
            [[ level._id_C561 ]]( "dompoint", self._id_01AD, var_0, var_1, var_2, self );

        self._id_6DE3 = 0;
    }
}

_id_5918( var_0 )
{
    var_1 = scripts\mp\gameobjects::_id_803E();
    self.neutralizing = level._id_6E68 && var_1 != "neutral";

    if ( !scripts\mp\utility\game::istrue( self._id_BEF4 ) )
        self._id_54C5 = 0;

    var_2 = scripts\engine\utility::ter_op( level._id_6E68, level._id_6E65 * 0.5, level._id_6E65 );
    scripts\mp\gameobjects::_id_FB08( var_2 );
    thread scripts\mp\gameobjects::_id_130AE( var_0.team );

    if ( var_2 > 0 )
    {
        self._id_D8BA = level._id_C74B[var_0.team];
        updateflagcapturestate( var_0.team );
        scripts\mp\gameobjects::setzonestatusicons( level.iconlosing + self._id_01AD, level.icontaking + self._id_01AD );
    }
}

_id_591A( var_0, var_1, var_2, var_3 )
{
    var_4 = scripts\mp\gameobjects::_id_803E();

    if ( var_1 > 0.05 && var_2 && !self._id_54C5 )
    {
        if ( var_4 == "neutral" )
        {
            if ( level._id_6E65 > 0.05 )
                scripts\mp\utility\game::_id_10E60( "securing" + self._id_01AD, var_0 );
        }
        else if ( level._id_6E65 > 0.05 )
        {
            scripts\mp\utility\game::_id_10E60( "losing" + self._id_01AD, var_4, 1 );
            scripts\mp\utility\game::_id_10E60( "securing" + self._id_01AD, var_0 );
        }

        self._id_54C5 = 1;
    }
}

_id_5919( var_0, var_1, var_2 )
{
    if ( isplayer( var_1 ) )
    {
        var_1 setclientomnvar( "ui_objective_state", 0 );
        var_1._id_12B1D = undefined;
    }

    var_3 = scripts\mp\gameobjects::_id_803E();

    if ( var_3 == "neutral" )
    {
        scripts\mp\gameobjects::setzonestatusicons( level.iconneutral + self._id_01AD );
        updateflagstate( "idle", 0 );
    }
    else
    {
        scripts\mp\gameobjects::setzonestatusicons( level.icondefend + self._id_01AD, level.iconcapture + self._id_01AD );
        updateflagstate( var_3, 0 );
    }

    if ( !var_2 )
        self._id_BEF4 = 0;
}

dompoint_oncontested()
{
    scripts\mp\gameobjects::setzonestatusicons( level.iconcontested + self._id_01AD );
    updateflagstate( "contested", 0 );
}

dompoint_onuncontested( var_0 )
{
    var_1 = scripts\mp\gameobjects::_id_803E();

    if ( var_0 == "none" || var_1 == "neutral" )
    {
        scripts\mp\gameobjects::setzonestatusicons( level.iconneutral + self._id_01AD );
        self._id_54C5 = 0;
    }
    else
        scripts\mp\gameobjects::setzonestatusicons( level.icondefend + self._id_01AD, level.iconcapture + self._id_01AD );

    var_2 = scripts\engine\utility::ter_op( var_1 == "neutral", "idle", var_1 );
    updateflagstate( var_2, 0 );
}

_id_F6A9( var_0 )
{
    if ( isdefined( level._id_112C0 ) && level._id_112C0 && isdefined( var_0.cranked ) && var_0.cranked )
        var_0 scripts\mp\utility\game::_id_F6A8( "assist" );
}

_id_591C()
{
    game["flagmodels"] = [];
    game["flagmodels"]["neutral"] = "prop_flag_neutral";
    game["flagmodels"]["allies"] = scripts\mp\teams::_id_81AE( "allies" );
    game["flagmodels"]["axis"] = scripts\mp\teams::_id_81AE( "axis" );
}

updateflagstate( var_0, var_1 )
{
    self._id_0289 setscriptablepartstate( "flag", var_0 + self.vfxnamemod );

    if ( !scripts\mp\utility\game::istrue( var_1 ) )
        self._id_0289 setscriptablepartstate( "pulse", "off" );
}

updateflagcapturestate( var_0 )
{
    self._id_0289 setscriptablepartstate( "pulse", var_0 + self.vfxnamemod );
}

_id_C56E()
{
    for (;;)
    {
        level waittill( "connected", var_0 );
        var_0._id_11E8 = [];
        var_0._id_11E9 = [];
        var_0 thread _id_C4F5();
    }
}

_id_C4F5()
{
    self waittill( "disconnect" );

    foreach ( var_1 in self._id_11E8 )
    {
        if ( isdefined( var_1 ) )
            var_1 delete();
    }

    foreach ( var_4 in self._id_11E9 )
    {
        if ( isdefined( var_4 ) )
            var_4 delete();
    }
}

_id_8365( var_0 )
{
    level endon( "game_ended" );
    var_1 = getarraykeys( var_0 );

    for ( var_2 = 0; var_2 < var_1.size; var_2++ )
    {
        var_3 = var_0[var_1[var_2]].player;

        if ( !isdefined( var_3 ) )
            continue;

        if ( isdefined( var_3.owner ) )
            var_3 = var_3.owner;

        if ( !isplayer( var_3 ) )
            continue;

        var_3 thread scripts\mp\awards::givemidmatchaward( "mode_dom_neutralized" );
        var_3 setclientomnvar( "ui_objective_progress", 0.01 );
        var_3 _id_F6A9( var_3 );
        wait 0.05;
    }
}
