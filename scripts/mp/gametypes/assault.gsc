// IW7 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    scripts\mp\globallogic::init();
    scripts\mp\globallogic::setupcallbacks();

    if ( isusingmatchrulesdata() )
    {
        level.initializematchrules = ::initializematchrules;
        [[ level.initializematchrules ]]();
        level thread scripts\mp\utility\game::reinitializematchrulesonmigration();
    }
    else
    {
        scripts\mp\utility\game::registerroundswitchdvar( level.gametype, 1, 0, 9 );
        scripts\mp\utility\game::registertimelimitdvar( level.gametype, 3.0 );
        scripts\mp\utility\game::registerscorelimitdvar( level.gametype, 1 );
        scripts\mp\utility\game::registerroundlimitdvar( level.gametype, 0 );
        scripts\mp\utility\game::registerwinlimitdvar( level.gametype, 3 );
        scripts\mp\utility\game::registernumlivesdvar( level.gametype, 0 );
        scripts\mp\utility\game::registerhalftimedvar( level.gametype, 0 );
        level.matchrules_damagemultiplier = 0;
        level.matchrules_vampirism = 0;
    }

    var_0 = scripts\mp\utility\game::_id_8214( "timelimit" );
    scripts\mp\utility\game::_id_DF17( "addObjectiveTime", var_0 );
    updategametypedvars();
    level.objectivebased = 1;
    level.teambased = 1;
    level.nobuddyspawns = 1;
    level.onprecachegametype = ::onprecachegametype;
    level.onstartgametype = ::onstartgametype;
    level.getspawnpoint = ::getspawnpoint;
    level.onspawnplayer = ::onspawnplayer;
    level._id_C577 = ::_id_C577;
    level.ontimelimit = ::ontimelimit;
    level.onnormaldeath = ::onnormaldeath;
    level._id_C561 = ::_id_C561;
    level._id_1C9A = 0;

    if ( level.matchrules_damagemultiplier || level.matchrules_vampirism )
        level.modifyplayerdamage = scripts\mp\damage::gamemodemodifyplayerdamage;

    game["dialog"]["offense_obj"] = "obj_destroy";
    game["dialog"]["defense_obj"] = "obj_defend";
    game["dialog"]["lead_lost"] = "null";
    game["dialog"]["lead_tied"] = "null";
    game["dialog"]["lead_taken"] = "null";
}

initializematchrules()
{
    scripts\mp\utility\game::setcommonrulesfrommatchdata();
    var_0 = getmatchrulesdata( "assaultData", "roundLength" );
    setdynamicdvar( "scr_assault_timelimit", var_0 );
    scripts\mp\utility\game::registertimelimitdvar( "assault", var_0 );
    var_1 = getmatchrulesdata( "assaultData", "roundSwitch" );
    setdynamicdvar( "scr_assault_roundswitch", var_1 );
    scripts\mp\utility\game::registerroundswitchdvar( "assault", var_1, 0, 9 );
    var_2 = getmatchrulesdata( "commonOption", "scoreLimit" );
    setdynamicdvar( "scr_assault_winlimit", var_2 );
    scripts\mp\utility\game::registerwinlimitdvar( "assault", var_2 );
    setdynamicdvar( "scr_assault_bombtimer", getmatchrulesdata( "assaultData", "bombTimer" ) );
    setdynamicdvar( "scr_assault_planttime", getmatchrulesdata( "assaultData", "plantTime" ) );
    setdynamicdvar( "scr_assault_defusetime", getmatchrulesdata( "assaultData", "defuseTime" ) );
    setdynamicdvar( "scr_assault_multibomb", getmatchrulesdata( "assaultData", "multiBomb" ) );
    setdynamicdvar( "scr_assault_bombResetTimer", getmatchrulesdata( "assaultData", "bombResetTimer" ) );
    setdynamicdvar( "scr_assault_roundlimit", 0 );
    scripts\mp\utility\game::registerroundlimitdvar( "assault", 0 );
    setdynamicdvar( "scr_assault_scorelimit", 1 );
    scripts\mp\utility\game::registerscorelimitdvar( "assault", 1 );
    setdynamicdvar( "scr_assault_halftime", 0 );
    scripts\mp\utility\game::registerhalftimedvar( "assault", 0 );
    setdynamicdvar( "scr_assault_promode", 0 );
}

onprecachegametype()
{
    game["bomb_dropped_sound"] = "mp_war_objective_lost";
    game["bomb_recovered_sound"] = "mp_war_objective_taken";
}

onstartgametype()
{
    if ( !isdefined( game["switchedsides"] ) )
        game["switchedsides"] = 0;

    if ( game["switchedsides"] )
    {
        var_0 = game["attackers"];
        var_1 = game["defenders"];
        game["attackers"] = var_1;
        game["defenders"] = var_0;
    }

    setclientnamemode( "manual_change" );
    level._effect["bomb_explosion"] = loadfx( "vfx/iw7/_requests/mp/vfx_debug_warning.vfx" );
    level._effect["vehicle_explosion"] = loadfx( "vfx/core/expl/small_vehicle_explosion_new.vfx" );
    level._effect["building_explosion"] = loadfx( "vfx/iw7/_requests/mp/vfx_debug_warning.vfx" );
    scripts\mp\utility\game::setobjectivetext( game["attackers"], &"OBJECTIVES_SD_ATTACKER" );
    scripts\mp\utility\game::setobjectivetext( game["defenders"], &"OBJECTIVES_SD_DEFENDER" );

    if ( level._id_10A56 )
    {
        scripts\mp\utility\game::setobjectivescoretext( game["attackers"], &"OBJECTIVES_SD_ATTACKER" );
        scripts\mp\utility\game::setobjectivescoretext( game["defenders"], &"OBJECTIVES_SD_DEFENDER" );
    }
    else
    {
        scripts\mp\utility\game::setobjectivescoretext( game["attackers"], &"OBJECTIVES_SD_ATTACKER_SCORE" );
        scripts\mp\utility\game::setobjectivescoretext( game["defenders"], &"OBJECTIVES_SD_DEFENDER_SCORE" );
    }

    scripts\mp\utility\game::setobjectivehinttext( game["attackers"], &"OBJECTIVES_SD_ATTACKER_HINT" );
    scripts\mp\utility\game::setobjectivehinttext( game["defenders"], &"OBJECTIVES_SD_DEFENDER_HINT" );
    _id_98CE();
    var_2[0] = "sd";
    var_2[1] = "bombzone";
    var_2[2] = "blocker";
    scripts\mp\gameobjects::main( var_2 );
    setspecialloadout();
    thread _id_987D();
}

_id_98CE()
{
    level.spawnmins = ( 0, 0, 0 );
    level.spawnmaxs = ( 0, 0, 0 );
    scripts\mp\spawnlogic::addstartspawnpoints( "mp_assault_spawn_attacker_start" );
    scripts\mp\spawnlogic::addstartspawnpoints( "mp_assault_spawn_defender_start" );
    level.mapcenter = scripts\mp\spawnlogic::findboxcenter( level.spawnmins, level.spawnmaxs );
    setmapcenter( level.mapcenter );
    level._id_23AA = [];
    _id_97DC( "attacker" );
    _id_97DC( "defender" );
}

_id_97DC( var_0 )
{
    level._id_23AA[var_0] = [];
    var_1 = "mp_assault_spawn_" + var_0;
    var_2 = scripts\mp\spawnlogic::getspawnpointarray( var_1 );

    foreach ( var_4 in var_2 )
    {
        var_5 = var_4.script_noteworthy;

        if ( !isdefined( level._id_23AA[var_0][var_5] ) )
            level._id_23AA[var_0][var_5] = [];

        level._id_23AA[var_0][var_5][level._id_23AA[var_0][var_5].size] = var_4;
    }
}

getspawnpoint()
{
    var_0 = self.pers["team"];
    var_1 = "defender";

    if ( var_0 == game["attackers"] )
        var_1 = "attacker";

    if ( level.ingraceperiod )
    {
        var_2 = scripts\mp\spawnlogic::getspawnpointarray( "mp_assault_spawn_" + var_1 + "_start" );
        var_3 = scripts\mp\spawnlogic::getspawnpoint_startspawn( var_2 );
    }
    else
    {
        var_4 = level._id_4B29._id_01AD;
        var_5 = level._id_23AA[var_1][var_4];
        var_3 = scripts\mp\spawnlogic::_id_813C( var_5 );
    }

    return var_3;
}

onspawnplayer()
{
    if ( scripts\mp\utility\game::_id_9E0E( self ) )
    {
        self._id_9EE6 = 0;
        self._id_9DBC = 0;
        self._id_9D6C = 0;
    }

    if ( level.multibomb && self.pers["team"] == game["attackers"] )
        self setclientomnvar( "ui_carrying_bomb", 1 );
    else
        self setclientomnvar( "ui_carrying_bomb", 0 );

    scripts\mp\utility\game::setextrascore0( 0 );

    if ( isdefined( self.pers["plants"] ) )
        scripts\mp\utility\game::setextrascore0( self.pers["plants"] );

    level notify( "spawned_player" );
    _id_FADA();
    var_0 = getdvarint( "scr_allow_highjump" );
    self _meth_8413( var_0 );
    self _meth_8413( var_0 );
    self _meth_8414( var_0 );
}

_id_C577( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{
    self setclientomnvar( "ui_carrying_bomb", 0 );
    thread _id_3DE9();
}

_id_3DE9()
{
    wait 0.05;
    var_0 = 0;

    if ( !level._id_1BE6[game["attackers"]] )
    {
        level._id_10978[game["attackers"]]._id_1C90 = 1;
        var_0 = 1;
    }

    if ( !level._id_1BE6[game["defenders"]] )
    {
        level._id_10978[game["defenders"]]._id_1C90 = 1;
        var_0 = 1;
    }

    if ( var_0 )
        _id_0AF0::_id_12F21();
}

_id_EFFD( var_0, var_1 )
{
    foreach ( var_3 in level.players )
    {
        if ( !isai( var_3 ) )
            var_3 setclientomnvar( "ui_objective_state", 0 );
    }

    level._id_6C6F = var_0;

    if ( var_1 == game["end_reason"]["target_destroyed"] || var_1 == game["end_reason"]["bomb_defused"] )
    {
        if ( !isdefined( level._id_6C67[var_0] ) || level._id_6C67[var_0] != level._id_4B29._id_A63C )
            scripts\mp\finalkillcam::_id_66BC();
    }

    thread scripts\mp\gamelogic::endgame( var_0, var_1 );
}

onnormaldeath( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = scripts\mp\rank::getscoreinfovalue( "kill" );
    var_6 = var_0.team;

    if ( var_0._id_9EE6 )
    {
        thread scripts\mp\matchdata::_id_AFC5( var_2, "planting" );
        var_1 scripts\mp\utility\game::incperstat( "defends", 1 );
        var_1 scripts\mp\persistence::statsetchild( "round", "defends", var_1.pers["defends"] );
    }
    else if ( var_0._id_9D6C )
        thread scripts\mp\matchdata::_id_AFC5( var_2, "carrying" );
    else if ( var_0._id_9DBC )
    {
        thread scripts\mp\matchdata::_id_AFC5( var_2, "defusing" );
        var_1 scripts\mp\utility\game::incperstat( "defends", 1 );
        var_1 scripts\mp\persistence::statsetchild( "round", "defends", var_1.pers["defends"] );
    }
}

ontimelimit()
{
    _id_EFFD( game["defenders"], game["end_reason"]["time_limit_reached"] );

    foreach ( var_1 in level.players )
    {
        if ( isdefined( var_1._id_2C5E ) )
        {
            var_1 scripts\mp\utility\game::_id_141E( var_1._id_2C5E );
            break;
        }
    }
}

updategametypedvars()
{
    scripts\mp\gametypes\common::updategametypedvars();
    level._id_CC52 = scripts\mp\utility\game::_id_5F6B( "planttime", 5, 0, 20 );
    level._id_50AB = scripts\mp\utility\game::_id_5F6B( "defusetime", 5, 0, 20 );
    level._id_2C6C = scripts\mp\utility\game::_id_5F6B( "bombtimer", 45, 1, 300 );
    level.multibomb = scripts\mp\utility\game::_id_5F6D( "multibomb", 0, 0, 1 );
    level._id_2C5F = scripts\mp\utility\game::_id_5F6D( "bombResetTimer", 60, 0, 180 );
}

setspecialloadout()
{
    if ( isusingmatchrulesdata() && scripts\mp\utility\game::_id_7F91( "defaultClasses", game["attackers"], 5, "class", "inUse" ) )
        level._id_F004[game["attackers"]] = scripts\mp\utility\game::_id_7F92( game["attackers"], 5 );
}

_id_9EF5( var_0 )
{
    if ( isdefined( level._id_4B19 ) )
        return self istouching( level._id_4B19.trigger );

    return 0;
}

_id_987D()
{
    level._id_6DEE = 1;
    var_0 = getentarray( "bombzone", "targetname" );
    level._id_C2A8 = var_0;
    level._id_4B2A = 0;
    level._id_4B29 = _id_FAD4( level._id_4B2A );
}

_id_FAD4( var_0 )
{
    var_1 = level._id_C2A8[var_0];
    var_2 = var_1.script_noteworthy;

    if ( !isdefined( var_2 ) )
        var_2 = "bombzone";

    var_3 = undefined;

    switch ( var_2 )
    {
        case "bombzone":
            if ( isdefined( level._id_6DEE ) )
            {
                scripts\mp\gametypes\obj_bombzone::_id_2C77( "sd_bomb" );
                level._id_6DEE = undefined;
            }
            else
                scripts\mp\gametypes\obj_bombzone::_id_18CF();

            var_3 = scripts\mp\gametypes\obj_bombzone::_id_2C78( var_0 );
            scripts\mp\utility\game::_id_AAE7( "offense_obj", game["attackers"] );
            scripts\mp\utility\game::_id_AAE7( "defense_obj", game["defenders"] );
            break;
        case "dompoint":
            var_3 = scripts\mp\gametypes\obj_dom::_id_591D( var_0 );
            break;
        case "payload":
            break;
        case "ctf":
            break;
    }

    return var_3;
}

_id_C561( var_0, var_1, var_2, var_3, var_4 )
{
    switch ( var_0 )
    {
        case "dompoint":
            _id_C4F7( var_1, var_2, var_3, var_4 );
            break;
        case "bombzone":
            _id_C4CE( var_1, var_2, var_3, var_4 );
            break;
    }

    if ( var_3 == game["attackers"] )
    {
        level._id_4B2A++;

        if ( level._id_4B2A < level._id_C2A8.size )
        {
            var_5 = scripts\mp\utility\game::_id_8214( "addObjectiveTime" );
            scripts\mp\utility\game::_id_F7D1( "timelimit", scripts\mp\utility\game::_id_81CA() + var_5 );
            _id_E2B5();
            level._id_4B29 = _id_FAD4( level._id_4B2A );
        }
        else
        {
            setgameendtime( 0 );
            wait 3;
            _id_EFFD( game["attackers"], game["end_reason"]["target_destroyed"] );
        }
    }
}

_id_C4F7( var_0, var_1, var_2, var_3 )
{
    var_4 = var_1.team;

    if ( var_3 == "neutral" )
    {
        var_5 = scripts\mp\utility\game::_id_8027( var_4 );
        thread scripts\mp\utility\game::_id_D90B( var_4, var_5, undefined, undefined, "mp_dom_flag_captured", undefined, var_1 );
        scripts\mp\utility\game::_id_10E60( "secured" + self._id_01AD, var_4, 1 );
        scripts\mp\utility\game::_id_10E60( "enemy_has" + self._id_01AD, var_5, 1 );
    }
}

_id_C4CE( var_0, var_1, var_2, var_3 )
{
    if ( var_2 == game["defenders"] )
    {
        _id_E2B5();
        thread scripts\mp\gametypes\obj_bombzone::_id_E294();
        level._id_4B29 = scripts\mp\gametypes\obj_bombzone::_id_2C78( level._id_4B2A );
    }
}

_id_E2B5()
{
    scripts\mp\gamelogic::_id_E2FF();
    level._id_11909 = gettime() - level._id_1190A;
    level._id_118FA = 0;
}

_id_FADA()
{
    if ( isai( self ) )
        return;

    self notifyonplayercommand( "playerPing", "+breath_sprint" );
    thread _id_136D5();
}

_id_136D5()
{
    self endon( "death" );
    self endon( "disconnect" );
    level endon( "game_ended" );

    for (;;)
    {
        self waittill( "playerPing" );

        if ( scripts\mp\utility\game::isreallyalive( self ) && !scripts\mp\utility\game::isusingremote() )
        {
            if ( self adsbuttonpressed() )
            {
                _id_5A5F();
                wait 0.5;
            }
        }

        wait 0.1;
    }
}

_id_5A5F()
{
    self endon( "disconnect" );
    level endon( "game_ended" );
    var_0 = self geteye();
    var_1 = var_0 + anglestoforward( self getplayerangles() ) * 2000;
    var_2 = bullettrace( var_0, var_1, 1, self );
    var_3 = var_2["entity"];
    var_4 = "WAYPOINT";
    var_5 = ( 1, 1, 1 );

    if ( isdefined( var_3 ) )
    {
        if ( isdefined( var_3.team ) && var_3.team != self.team )
        {
            var_5 = ( 1, 0, 0 );

            if ( isplayer( var_3 ) )
            {
                var_4 = "KILL";
                self notify( "enemy_sighted" );
            }
            else
                var_4 = "DESTROY";
        }
        else if ( isdefined( var_3._id_EDBF ) )
        {
            if ( var_3._id_EDBF == "bombzone" )
            {
                if ( self.team == game["attackers"] )
                {
                    var_4 = "ATTACK";
                    var_5 = ( 1, 1, 0 );
                }
                else
                {
                    var_4 = "DEFEND";
                    var_5 = ( 0, 0, 1 );
                }
            }
            else if ( var_3._id_EDBF == "sd" )
            {
                if ( self.team == game["attackers"] )
                {
                    var_4 = "OBJECTIVE";
                    var_5 = ( 1, 1, 0 );
                }
            }
        }
    }
}
