// IW7 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

elvirainit( var_0, var_1, var_2, var_3 )
{
    self._id_FFEF = 1;
    _id_0C75::_id_13F9A( var_0, var_1, var_2, var_3 );
}

isvalidaction( var_0 )
{
    switch ( var_0 )
    {
        case "cast_return_spell":
        case "cast_reveal_spell":
        case "cast_revive_spell":
        case "cast_spell":
        case "revive_player":
        case "reload":
        case "melee":
            return 1;
    }

    return 0;
}

setaction( var_0 )
{
    self.requested_action = var_0;
}

clearaction()
{
    self.requested_action = undefined;
}

isanimdone( var_0, var_1, var_2, var_3 )
{
    if ( scripts\asm\asm::_id_232B( var_1, "end" ) )
        return 1;

    if ( scripts\asm\asm::_id_232B( var_1, "early_end" ) )
        return 1;

    if ( scripts\asm\asm::_id_232B( var_1, "finish_early" ) )
        return 1;

    if ( scripts\asm\asm::_id_232B( var_1, "code_move" ) )
        return 1;

    return 0;
}

isrevivedone( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( self.reviveplayer ) )
        return 1;

    if ( !scripts\engine\utility::_id_9CEE( self.reviveplayer._id_98F3 ) )
        return 1;

    return 0;
}

dorevive( var_0, var_1 )
{
    self endon( var_0 + "_finished" );
    var_1 endon( "disconnect" );
    var_2 = scripts\mp\agents\elvira\elvira_tunedata::gettunedata();
    wait( var_2.revive_wait_time );

    if ( !isdefined( var_1._id_E4A9 ) )
        return;

    var_1._id_E4A9 notify( "pg_trigger", self );
}

playreviveanim( var_0, var_1, var_2, var_3 )
{
    self endon( var_1 + "_finished" );

    if ( isdefined( self.reviveplayer ) )
    {
        thread _id_0C73::_id_6A6A( var_1, self.reviveplayer );
        thread dorevive( var_1, self.reviveplayer );
    }

    scripts\asm\asm_mp::_id_2364( var_0, var_1, var_2, var_3 );
}

shouldabortaction( var_0, var_1, var_2, var_3 )
{
    if ( scripts\engine\utility::_id_9CEE( self.btraversalteleport ) )
        return 0;

    if ( !isdefined( self.requested_action ) )
        return 1;

    if ( isdefined( var_3 ) )
    {
        if ( self.requested_action != var_3 )
            return 1;
    }

    return 0;
}

shoulddoaction( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( self.requested_action ) )
        return 0;

    if ( isdefined( var_3 ) && var_3 != "" )
    {
        if ( self.requested_action == var_3 )
            return 1;

        return 0;
    }

    if ( self.requested_action == var_2 )
        return 1;

    return 0;
}

playanimwithplaybackrate( var_0, var_1, var_2, var_3 )
{
    self endon( var_1 + "_finished" );
    var_4 = var_3;
    var_5 = scripts\asm\asm_mp::_id_2337( var_0, var_1 );
    scripts\asm\asm_mp::_id_2365( var_0, var_1, var_2, var_5, var_4 );
}

_id_3EE4( var_0, var_1, var_2 )
{
    return _id_0F3C::_id_3EF4( var_0, var_1, var_2 );
}

playmovingpainanim( var_0, var_1, var_2, var_3 )
{
    self endon( var_1 + "_finished" );

    if ( !isdefined( self._id_0233 ) || self _meth_841E() < scripts\mp\agents\elvira\elvira_tunedata::gettunedata().min_moving_pain_dist )
    {
        var_4 = _id_3EE4( var_0, "pain_generic", var_3 );
        self orientmode( "face angle abs", self.angles );
        scripts\asm\asm_mp::_id_2365( var_0, "pain_generic", var_2, var_4, 1 );
        return;
    }

    scripts\asm\asm_mp::_id_2364( var_0, var_1, var_2, var_3 );
}

choosereviveanim( var_0, var_1, var_2 )
{
    if ( !isdefined( self.reviveanimindex ) )
        self.reviveanimindex = _id_0F3C::_id_3EF4( var_0, var_1, var_2 );

    return self.reviveanimindex;
}

faceplayer( var_0, var_1 )
{
    self endon( var_0 + "_finished" );

    for (;;)
    {
        if ( isdefined( var_1 ) )
            self orientmode( "face angle abs", ( 0, vectortoyaw( var_1.origin - self.origin ), 0 ) );
        else
            break;

        scripts\engine\utility::waitframe();
    }
}

playcastspellanim( var_0, var_1, var_2, var_3 )
{
    self endon( var_1 + "_finished" );
    var_4 = var_3;
    var_5 = scripts\asm\asm_mp::_id_2337( var_0, var_1 );
    playfxontag( level._effect["vfx_spell_tornado"], self, "j_wrist_le" );
    self playsound( "elvira_fire_spell_cast" );
    thread scripts\cp\maps\cp_town\cp_town_elvira::elvira_timely_torrent();
    scripts\asm\asm_mp::_id_2365( var_0, var_1, var_2, var_5, var_4 );
}

playrevealspellanim( var_0, var_1, var_2, var_3 )
{
    self endon( var_1 + "_finished" );
    var_4 = var_3;
    var_5 = scripts\asm\asm_mp::_id_2337( var_0, var_1 );
    playfxontag( level._effect["vfx_spell_anom"], self, "j_wrist_le" );
    self playsound( "elvira_portal_spell_cast" );
    scripts\asm\asm_mp::_id_2365( var_0, var_1, var_2, var_5, var_4 );
}

playteleportfx( var_0, var_1 )
{
    self endon( var_0 + "_finished" );
    wait( var_1 );
    playfx( level._effect["elvira_stand_smoke"], self.origin );
}

terminate_traverseexternal( var_0, var_1, var_2 )
{
    self.earlytraversalteleportpos = undefined;
    self.ishidden = undefined;
    self._id_9CEC = undefined;
}

dotraverseteleport( var_0, var_1, var_2, var_3 )
{
    self endon( var_1 + "_finished" );
    thread scripts\asm\asm_mp::_id_2364( var_0, var_1, var_2, var_3 );
    thread playteleportfx( var_1, 0.75 );
    var_4 = undefined;

    if ( isdefined( self.earlytraversalteleportpos ) )
        var_4 = self.earlytraversalteleportpos;
    else
        var_4 = self _meth_8146();

    var_5 = vectornormalize( ( var_4 - self.origin ) * ( 1, 1, 0 ) );
    var_6 = vectortoangles( var_5 );
    self orientmode( "face angle abs", var_6 );
    wait 0.9;
    self hide();
    self.ishidden = 1;
    self setorigin( var_4, 0 );
    playfx( level._effect["elvira_stand_smoke"], var_4 );
    wait 0.25;
    self show();
    self.ishidden = undefined;
    self._id_9CEC = undefined;
    self notify( "traverse_end" );
    thread scripts\asm\asm::_id_237C( "exposed_idle", var_3 );
}
