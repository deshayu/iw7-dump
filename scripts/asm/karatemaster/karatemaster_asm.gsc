// IW7 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

setupmeleeanimdistances( var_0 )
{
    if ( isdefined( level.karatemastermeleedist ) )
        return;

    level.karatemastermeleedist = [];
    setupmeleedistances( var_0, "slow_walk_melee" );
    setupmeleedistances( var_0, "walk_melee" );
    setupmeleedistances( var_0, "run_melee" );
    setupmeleedistances( var_0, "sprint_melee" );
    setupmeleedistances( var_0, "stand_melee" );
}

getfirstattacknotetracktime( var_0 )
{
    var_1 = 99999;
    var_2 = getnotetracktimes( var_0, "r_kick" );

    if ( var_2.size > 0 )
        var_1 = var_2[var_2.size - 1];

    var_2 = getnotetracktimes( var_0, "l_kick" );

    if ( var_2.size > 0 && var_2[0] < var_1 )
        var_1 = var_2[var_2.size - 1];

    var_2 = getnotetracktimes( var_0, "r_punch" );

    if ( var_2.size > 0 && var_2[0] < var_1 )
        var_1 = var_2[0];

    var_2 = getnotetracktimes( var_0, "l_punch" );

    if ( var_2.size > 0 && var_2[0] < var_1 )
        var_1 = var_2[0];

    if ( var_1 > 999 )
        return undefined;

    return var_1;
}

distcompare( var_0, var_1 )
{
    return var_0 < var_1;
}

setupmeleedistances( var_0, var_1 )
{
    var_2 = self getanimentrycount( var_1 );

    for ( var_3 = 0; var_3 < var_2; var_3++ )
    {
        var_4 = self getanimentry( var_1, var_3 );
        var_5 = getfirstattacknotetracktime( var_4 );
        var_6 = getmovedelta( var_4, 0, var_5 );
        var_7 = length( var_6 );
        level.karatemastermeleedist[var_1][var_3] = var_7;
        var_8 = getanimlength( var_4 );
        var_9 = var_5 * var_8;
        level.karatemastermeleetimetoimpact[var_1][var_3] = var_9;
    }

    level.karatemastermeleedist[var_1] = scripts\engine\utility::_id_22C3( level.karatemastermeleedist[var_1], ::distcompare );
}

karatemasterinit( var_0, var_1, var_2, var_3 )
{
    _id_0C75::_id_13F9A( var_0, var_1, var_2, var_3 );
    scripts\asm\asm_bb::_id_2968( "run" );
    self._id_55B0 = 1;
    setupmeleeanimdistances( var_0 );
    self.desiredmovemeleeindex = [];
}

shouldplayentranceanim( var_0, var_1, var_2, var_3 )
{
    return 1;
}

playanimandlookatenemy( var_0, var_1, var_2, var_3 )
{
    thread _id_0C73::_id_6A6A( var_1, scripts\mp\agents\karatemaster\karatemaster_agent::getenemy() );
    var_4 = scripts\asm\asm_mp::_id_2337( var_0, var_1 );
    scripts\asm\asm_mp::_id_2365( var_0, var_1, var_2, var_4, 1 );
}

faceenemyhelper( var_0, var_1, var_2 )
{
    if ( isdefined( var_2 ) )
        self endon( var_2 + "_finished" );

    var_3 = gettime() + var_1;

    while ( gettime() <= var_3 && isdefined( var_0 ) && isalive( var_0 ) )
    {
        var_4 = var_0.origin - self.origin;

        if ( length2dsquared( var_4 ) > 1024 )
        {
            var_5 = vectortoyaw( var_4 );
            self orientmode( "face angle abs", ( 0, var_5, 0 ) );
        }

        wait 0.05;
    }

    self orientmode( "face angle abs", self.angles );
}

isanimdone( var_0, var_1, var_2, var_3 )
{
    if ( scripts\asm\asm::_id_232B( var_1, "end" ) )
        return 1;

    if ( scripts\asm\asm::_id_232B( var_1, "early_end" ) )
        return 1;

    if ( scripts\asm\asm::_id_232B( var_1, "finish_early" ) )
        return 1;

    if ( scripts\asm\asm::_id_232B( var_1, "code_move" ) )
        return 1;

    return 0;
}

playanimwithplaybackrate( var_0, var_1, var_2, var_3 )
{
    self endon( var_1 + "_finished" );
    var_4 = var_3;
    var_5 = scripts\asm\asm_mp::_id_2337( var_0, var_1 );
    scripts\asm\asm_mp::_id_2365( var_0, var_1, var_2, var_5, var_4 );
}

_id_BEA0( var_0, var_1, var_2, var_3 )
{
    var_4 = undefined;
    var_5 = scripts\mp\agents\karatemaster\karatemaster_agent::getenemy();

    if ( isdefined( self._id_1198._id_FECD ) && isdefined( self._id_1198._id_FECD._id_65D3 ) )
        var_4 = self._id_1198._id_FECD._id_65D3.origin;
    else if ( isdefined( self._id_1198._id_FECD ) && isdefined( self._id_1198._id_FECD._id_D699 ) )
        var_4 = self._id_1198._id_FECD._id_D699;
    else if ( isdefined( var_5 ) )
        var_4 = var_5.origin;

    if ( !isdefined( var_4 ) )
        return 0;

    var_6 = self.angles[1] - vectortoyaw( var_4 - self.origin );
    var_7 = distancesquared( self.origin, var_4 );

    if ( var_7 < 65536 )
    {
        var_8 = sqrt( var_7 );

        if ( var_8 > 3 )
            var_6 = var_6 + atan( -3 / var_8 );
    }

    if ( abs( angleclamp180( var_6 ) ) > self._id_129AF )
        return 1;

    return 0;
}

_id_81DE()
{
    var_0 = 0.25;
    var_1 = undefined;
    var_2 = undefined;

    if ( isdefined( self._id_1198._id_FECD ) )
    {
        if ( isdefined( self._id_1198._id_FECD._id_65D3 ) )
            var_1 = self._id_1198._id_FECD._id_65D3;
        else if ( isdefined( self._id_1198._id_FECD._id_D699 ) )
            var_2 = self._id_1198._id_FECD._id_D699;
    }

    var_3 = scripts\mp\agents\karatemaster\karatemaster_agent::getenemy();

    if ( isdefined( var_3 ) )
    {
        if ( !isdefined( var_1 ) && !isdefined( var_2 ) )
            var_1 = var_3;
    }

    if ( isdefined( var_1 ) && !issentient( var_1 ) )
        var_0 = 1.5;

    var_4 = scripts\engine\utility::_id_8094( var_0, var_1, var_2 );
    return var_4;
}

_id_3F0A( var_0, var_1, var_2 )
{
    var_3 = _id_81DE();

    if ( var_3 < 0 )
        var_4 = "right";
    else
        var_4 = "left";

    var_3 = abs( var_3 );
    var_5 = 0;

    if ( var_3 > 157.5 )
        var_5 = 180;
    else if ( var_3 > 112.5 )
        var_5 = 135;
    else if ( var_3 > 67.5 )
        var_5 = 90;
    else
        var_5 = 45;

    var_6 = var_4 + "_" + var_5;
    var_7 = scripts\asm\asm::_id_2358( var_1, var_6 );
    var_8 = self _meth_8101( var_1, var_7 );
    return var_7;
}

_id_D56A( var_0, var_1, var_2, var_3 )
{
    self endon( var_1 + "_finished" );
    var_4 = scripts\asm\asm_mp::_id_2337( var_0, var_1 );
    var_5 = self._id_0233;
    self orientmode( "face angle abs", self.angles );
    self _meth_8281( "anim deltas" );
    scripts\asm\asm_mp::_id_2365( var_0, var_1, var_2, var_4 );

    if ( !isdefined( var_5 ) && isdefined( self._id_0233 ) )
        self _meth_841F();

    scripts\asm\asm_mp::_id_237F( "face current" );
    scripts\asm\asm_mp::_id_237E( "code_move" );
}

_id_3EE4( var_0, var_1, var_2 )
{
    return _id_0F3C::_id_3EF4( var_0, var_1, var_2 );
}

playmovingpainanim( var_0, var_1, var_2, var_3 )
{
    self endon( var_1 + "_finished" );

    if ( !isdefined( self._id_0233 ) )
    {
        var_4 = _id_3EE4( var_0, "pain_generic", var_3 );
        self orientmode( "face angle abs", self.angles );
        scripts\asm\asm_mp::_id_2365( var_0, "pain_generic", var_2, var_4, 1 );
        return;
    }

    scripts\asm\asm_mp::_id_2364( var_0, var_1, var_2, var_3 );
}

shoulddomelee( var_0, var_1, var_2, var_3 )
{
    if ( !scripts\engine\utility::_id_9CEE( self._id_1198.bmeleerequested ) )
        return 0;

    if ( !isdefined( self._id_1198.meleetype ) )
        return 0;

    if ( self._id_1198.meleetype == var_2 )
        return 1;

    return 0;
}

playanim_melee( var_0, var_1, var_2, var_3 )
{
    self endon( var_1 + "_finished" );
    thread _id_0C73::_id_6A6A( var_1, self._id_1198._id_B64D );
    var_4 = scripts\asm\asm_mp::_id_2337( var_0, var_1 );
    self _meth_85C9( 16 );
    scripts\asm\asm_mp::_id_2365( var_0, var_1, var_2, var_4 );
}

terminate_melee( var_0, var_1, var_2 )
{
    self _meth_85C9( 0 );
}

choosestandmeleeanim( var_0, var_1, var_2 )
{
    return choosemovingmeleeanim( var_0, var_1, var_2 );
}

choosemovingmeleeanim( var_0, var_1, var_2 )
{
    var_3 = self getanimentrycount( var_1 );
    var_4 = self getanimentry( var_1, self.desiredmovemeleeindex[var_1] );
    return self.desiredmovemeleeindex[var_1];
}

choosemeleeanim( var_0, var_1, var_2 )
{
    if ( self._id_2303._id_7257._id_7254 == "left" )
        return scripts\asm\asm::_id_2358( var_1, "left" );
    else
        return scripts\asm\asm::_id_2358( var_1, "right" );
}

teleportrequested( var_0, var_1, var_2, var_3 )
{
    return isdefined( self._id_1198.bteleportrequested );
}

playanim_teleportin( var_0, var_1, var_2, var_3 )
{
    var_4 = 1;

    if ( scripts\engine\utility::_id_9CEE( self._id_1198.bfastteleport ) )
        var_4 = 3;

    playanimwithplaybackrate( var_0, var_1, var_2, var_4 );
}

playanim_teleportout( var_0, var_1, var_2, var_3 )
{
    thread _id_0C73::_id_6A6A( var_1, scripts\mp\agents\karatemaster\karatemaster_agent::getenemy() );
    var_4 = 1;

    if ( scripts\engine\utility::_id_9CEE( self._id_1198.bfastteleport ) )
        var_4 = 1.5;

    playanimwithplaybackrate( var_0, var_1, var_2, var_4 );

    if ( scripts\engine\utility::_id_9CEE( self.btraversalteleport ) )
    {
        self._id_9CEC = undefined;
        self.btraversalteleport = undefined;
        self notify( "traverse_end" );
        scripts\asm\asm::_id_237C( "decide_idle", var_3 );
    }
}

terminate_teleport( var_0, var_1, var_2 )
{
    if ( !isanimdone( var_0, var_1, undefined, var_2 ) )
    {
        self show();
        self.ishidden = undefined;
    }
}

teleportnotehandler( var_0, var_1, var_2, var_3 )
{
    switch ( var_0 )
    {
        case "teleport_in":
            thread doteleportin( var_1 );
            break;
        case "teleport_out":
            thread doteleportout( var_1 );
            break;
    }
}

playspawnin( var_0, var_1, var_2, var_3 )
{
    self endon( var_1 + "_finished" );
    self setscriptablepartstate( "teleport", "tele_out" );
    scripts\asm\asm_mp::_id_2364( var_0, var_1, var_2, var_3 );
    wait 0.1;
    self setscriptablepartstate( "teleport", "neutral" );
}

doteleportin( var_0 )
{
    self endon( var_0 + "_finished" );
    self setscriptablepartstate( "teleport", "tele_in" );
    wait 0.1;
    self hide();
    self.ishidden = 1;
    self setscriptablepartstate( "teleport", "neutral" );
}

doteleportout( var_0 )
{
    self endon( var_0 + "_finished" );
    var_1 = scripts\mp\agents\karatemaster\karatemaster_agent::getenemy();
    var_2 = self._id_1198.teleportspot;
    self dontinterpolate();
    self setorigin( var_2 );

    if ( isdefined( var_1 ) )
        self.angles = ( 0, vectortoyaw( var_1.origin - self.origin ), 0 );

    wait 0.1;
    self show();
    self.ishidden = undefined;
    self setscriptablepartstate( "teleport", "tele_out" );
    wait 0.1;
    self setscriptablepartstate( "teleport", "neutral" );
}

meleenotehandler( var_0, var_1, var_2, var_3 )
{
    var_4 = undefined;
    var_5 = undefined;
    var_6 = scripts\mp\agents\karatemaster\karatemaster_tunedata::gettunedata();

    if ( var_0 == "r_kick" )
    {
        var_4 = var_6.ckickmeleedamage;
        var_5 = self gettagorigin( "j_ankle_ri" );
        self scragentsetanimscale( 1, 1 );
    }
    else if ( var_0 == "l_kick" )
    {
        var_4 = var_6.ckickmeleedamage;
        var_5 = self gettagorigin( "j_ankle_le" );
        self scragentsetanimscale( 1, 1 );
    }
    else if ( var_0 == "r_punch" )
    {
        var_4 = var_6.cpunchmeleedamage;
        var_5 = self gettagorigin( "j_wrist_ri" );
        self scragentsetanimscale( 1, 1 );
    }
    else if ( var_0 == "l_punch" )
    {
        var_4 = var_6.cpunchmeleedamage;
        var_5 = self gettagorigin( "j_wrist_le" );
        self scragentsetanimscale( 1, 1 );
    }
    else if ( var_0 == "flex_start" )
    {
        var_7 = scripts\mp\agents\karatemaster\karatemaster_agent::getenemy();

        if ( isdefined( var_7 ) )
        {
            var_8 = self getanimentry( var_1, var_2 );
            var_9 = getfirstattacknotetracktime( var_8 );

            if ( var_9 > var_3 )
            {
                var_10 = getmovedelta( var_8, var_3, var_9 );
                var_11 = length2d( var_10 );
                var_12 = getanimlength( var_8 );
                var_13 = var_9 * var_12 - var_3 * var_12;
                var_14 = var_7 _meth_816B();
                var_15 = var_7.origin + var_14 * var_13;
                var_16 = distance( var_15, self.origin );
                var_17 = 1;

                if ( var_16 > var_11 && var_11 > 0 )
                {
                    var_17 = var_16 / var_11;

                    if ( var_17 > var_6.cmaxmeleeflexscale )
                        var_17 = var_6.cmaxmeleeflexscale;
                }

                self scragentsetanimscale( var_17, 1 );
            }
        }
    }

    if ( isdefined( var_4 ) )
    {
        var_7 = scripts\mp\agents\karatemaster\karatemaster_agent::getenemy();

        if ( isdefined( var_7 ) )
        {
            var_18 = distance2dsquared( var_7.origin, self.origin );
            var_19 = distance2dsquared( var_5, var_7.origin );

            if ( var_19 < var_6.cpunchandkickmeleeradiussq || var_18 < var_6.cpunchandkickmeleeradiussq )
            {
                self notify( "attack_hit", var_7 );
                _id_0C73::_id_5904( var_7, var_4, "MOD_IMPACT" );
            }
            else
                self notify( "attack_miss", var_7 );
        }
    }
}

ontraversalteleport( var_0, var_1, var_2, var_3 )
{
    self._id_1198.teleportspot = self _meth_8146();
    self.btraversalteleport = 1;
    return 1;
}
