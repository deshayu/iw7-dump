// IW7 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

gettunedata()
{
    return level.agenttunedata[self.agent_type];
}

getanimmovedeltadist( var_0 )
{
    var_1 = self getanimentry( var_0, 0 );
    var_2 = getmovedelta( var_1, 0, 1 );
    var_3 = length2d( var_2 );
    return var_3;
}

analyzeanims()
{
    var_0 = gettunedata();

    if ( !isdefined( var_0.min_moving_pain_dist ) )
    {
        var_1 = self getanimentry( "pain_moving", 0 );
        var_2 = getmovedelta( var_1, 0, 1 );
        var_0.min_moving_pain_dist = length( var_2 );
        var_0.arrivalanimdist = [];
        var_0.arrivalanimdist["run_stop"] = getanimmovedeltadist( "run_stop" );
        var_0.arrivalanimdist["sprint_stop"] = getanimmovedeltadist( "sprint_stop" );
        var_0.movingattackdisttoattack = [];
        var_3 = self getanimentrycount( "moving_melee" );

        for ( var_4 = 0; var_4 < var_3; var_4++ )
        {
            var_1 = self getanimentry( "moving_melee", var_4 );
            var_5 = getnotetracktimes( var_1, "start_melee" );
            var_2 = getmovedelta( var_1, 0, var_5[0] );
            var_0.movingattackdisttoattacksq[var_4] = length2dsquared( var_2 );
        }
    }
}

choosespawnanim( var_0, var_1, var_2 )
{
    if ( isdefined( self._id_02AE ) && isdefined( self._id_02AE._id_ECF5 ) )
    {
        var_3 = "";

        switch ( self._id_01F5 )
        {
            case "walk":
            case "slow_walk":
                var_3 = "_walk";
                break;
            case "run":
            case "sprint":
                var_3 = "_run";
                break;
            default:
                break;
        }

        if ( scripts\asm\asm_mp::_id_2347( var_1, self._id_02AE._id_ECF5 + var_3 ) )
            return scripts\asm\asm::_id_2358( var_1, self._id_02AE._id_ECF5 + var_3 );
        else if ( scripts\asm\asm_mp::_id_2347( var_1, self._id_02AE._id_ECF5 ) )
            return scripts\asm\asm::_id_2358( var_1, self._id_02AE._id_ECF5 );
    }

    if ( !isdefined( var_2 ) )
        return _id_0F3C::_id_3EF4( var_0, var_1, var_2 );

    return scripts\asm\asm::_id_2358( var_1, var_2 );
}

setasmaction( var_0 )
{
    if ( isdefined( self.fnactionvalidator ) )
    {

    }

    self.requested_action = var_0;
    self.current_action = undefined;
}

clearasmaction()
{
    self.requested_action = undefined;
    self.current_action = undefined;
}

shoulddoaction( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( self.requested_action ) )
        return 0;

    if ( self.requested_action == var_2 )
    {
        if ( isdefined( self.current_action ) && self.current_action == var_2 )
            return 0;

        self.current_action = var_2;
        return 1;
    }

    return 0;
}

shouldabortaction( var_0, var_1, var_2, var_3 )
{
    if ( scripts\engine\utility::_id_9CEE( self.btraversalteleport ) )
        return 0;

    if ( !isdefined( self.requested_action ) )
        return 1;

    if ( isdefined( var_3 ) )
    {
        if ( self.requested_action != var_3 )
            return 1;
    }

    return 0;
}

playanimandlookatenemy( var_0, var_1, var_2, var_3 )
{
    thread _id_0C73::_id_6A6A( var_1, getenemy() );
    var_4 = scripts\asm\asm_mp::_id_2337( var_0, var_1 );
    scripts\asm\asm_mp::_id_2365( var_0, var_1, var_2, var_4, self._id_C081 );
}

isanimdone( var_0, var_1, var_2, var_3 )
{
    if ( scripts\asm\asm::_id_232B( var_1, "end" ) )
        return 1;

    if ( scripts\asm\asm::_id_232B( var_1, "early_end" ) )
        return 1;

    if ( scripts\asm\asm::_id_232B( var_1, "finish_early" ) )
        return 1;

    if ( scripts\asm\asm::_id_232B( var_1, "code_move" ) )
        return 1;

    return 0;
}

ismyenemyinfrontofme( var_0, var_1 )
{
    var_2 = vectornormalize( ( var_0.origin - self.origin ) * ( 1, 1, 0 ) );
    var_3 = vectornormalize( anglestoforward( self.angles ) * ( 1, 1, 0 ) );
    var_4 = vectordot( var_2, var_3 );

    if ( var_4 > var_1 )
        return 1;

    return 0;
}

shouldmeleeattackhit( var_0, var_1, var_2, var_3, var_4 )
{
    if ( !isdefined( var_3 ) )
        var_3 = 0;

    if ( !isdefined( var_4 ) )
        var_4 = self.origin;

    if ( _id_0F74::_id_9DE0( var_0 ) )
        return 1;

    var_5 = distance2dsquared( var_0.origin, var_4 );

    if ( var_5 > var_1 )
        return 0;

    if ( !ismyenemyinfrontofme( var_0, var_2 ) )
    {
        if ( var_5 < var_3 )
            return 1;

        return 0;
    }

    return 1;
}

domeleedamageoncontact( var_0, var_1, var_2, var_3, var_4 )
{
    self endon( var_0 + "_finished" );
    self endon( "DoMeleeDamageOnContact_stop" );
    var_5 = gettunedata();

    while ( isdefined( var_1 ) && isalive( var_1 ) )
    {
        var_6 = self gettagorigin( "j_head", 1 );

        if ( shouldmeleeattackhit( var_1, var_5.moving_melee_attack_damage_radius_sq, var_5.melee_dot, var_5.force_melee_attack_damage_radius_sq, var_6 ) )
        {
            _id_0C73::_id_1106E();
            _id_0C73::_id_5904( var_1, var_2, "MOD_IMPACT" );
            break;
        }

        scripts\engine\utility::waitframe();
    }
}

alienmeleenotehandler( var_0, var_1, var_2, var_3 )
{
    if ( var_0 == "hit" )
    {
        var_4 = gettunedata();

        if ( shouldmeleeattackhit( self._id_4B26, var_4.moving_melee_attack_damage_radius_sq, var_4.melee_dot ) )
        {
            _id_0C73::_id_1106E();
            _id_0C73::_id_5904( self._id_4B26, self._id_B601, "MOD_IMPACT" );
        }
    }

    if ( var_0 == "start_melee" )
    {
        var_4 = gettunedata();
        thread domeleedamageoncontact( var_1, self._id_4B26, self._id_B601, var_4.moving_melee_attack_damage_radius_sq, var_4.melee_dot );
    }
    else if ( var_0 == "end_melee" )
    {
        self scragentsetanimscale( 1, 1 );
        self notify( "DoMeleeDamageOnContact_stop" );
    }
    else if ( var_0 == "flex_start" )
    {
        var_5 = getenemy();

        if ( isdefined( var_5 ) )
        {
            var_4 = gettunedata();
            var_6 = self getanimentry( var_1, var_2 );
            var_7 = getnotetracktimes( var_6, "hit" );
            var_8 = var_7[0];

            if ( var_8 > var_3 )
            {
                var_9 = getmovedelta( var_6, var_3, var_8 );
                var_10 = length2d( var_9 );
                var_11 = getanimlength( var_6 );
                var_12 = var_8 * var_11 - var_3 * var_11;
                var_13 = var_5 _meth_816B();
                var_14 = var_5.origin + var_13 * var_12;
                var_15 = distance( var_14, self.origin );
                var_16 = 1;

                if ( var_15 > var_10 && var_10 > 0 )
                {
                    var_16 = var_15 / var_10;

                    if ( var_16 < 1 )
                        var_16 = 1;

                    var_16 = var_16 + var_4.melee_xy_scale_boost;

                    if ( var_16 > var_4.melee_max_flex_xy_scale )
                        var_16 = var_4.melee_max_flex_xy_scale;
                }
                else
                    var_16 = 1 + var_4.melee_xy_scale_boost;

                self scragentsetanimscale( var_16, 1 );
            }
        }
    }
}

meleenotehandler( var_0, var_1, var_2, var_3 )
{
    if ( var_0 == "hit" )
    {
        self scragentsetanimscale( 1, 1 );
        var_4 = getenemy();

        if ( isdefined( var_4 ) )
        {
            var_5 = gettunedata();

            if ( shouldmeleeattackhit( var_4, var_5.melee_attack_damage_radius_sq, var_5.melee_dot ) )
            {
                self notify( "attack_hit", var_4 );
                _id_0C73::_id_5904( var_4, self._id_B601, "MOD_IMPACT" );
            }
            else
                self notify( "attack_miss", var_4 );
        }

        if ( !scripts\engine\utility::_id_9CEE( self.bmovingmelee ) )
            self notify( "stop_melee_face_enemy" );
    }
}

terminate_movingmelee( var_0, var_1, var_2 )
{
    self _meth_85C9( 0 );
}

playanimwithplaybackrate( var_0, var_1, var_2, var_3 )
{
    self endon( var_1 + "_finished" );
    var_4 = var_3;
    var_5 = scripts\asm\asm_mp::_id_2337( var_0, var_1 );
    scripts\asm\asm_mp::_id_2365( var_0, var_1, var_2, var_5, var_4 );
}

stopfacingenemy( var_0, var_1 )
{
    self endon( var_0 + "_finished" );
    wait( var_1 );
    _id_0C73::_id_1106E();
}

choosemovingmeleeattack( var_0, var_1, var_2 )
{
    if ( isdefined( self._id_1198.movingmeleeattackindex ) )
        return self._id_1198.movingmeleeattackindex;

    return randomint( self getanimentrycount( var_1 ) );
}

playmovingmeleeattack( var_0, var_1, var_2, var_3 )
{
    self endon( var_1 + "_finished" );
    var_4 = 1;

    if ( isdefined( self._id_C081 ) )
        var_4 = self._id_C081;

    var_5 = scripts\asm\asm_mp::_id_2337( var_0, var_1 );
    var_6 = self getanimentry( var_1, var_5 );
    var_7 = getanimlength( var_6 ) * ( 1 / var_4 );
    var_8 = getnotetracktimes( var_6, "start_melee" );
    var_9 = var_7 * var_8[0];
    var_10 = gettunedata();
    var_11 = randomfloatrange( var_10.min_stop_facing_enemy_time_before_hit, var_10.max_stop_facing_enemy_time_before_hit );
    var_12 = var_9 - var_11;

    if ( var_12 < 0 )
        var_12 = 0.1;

    thread _id_0C73::_id_6A6A( var_1, self._id_4B26 );
    thread stopfacingenemy( var_1, var_12 );

    if ( isdefined( self.preventplayerpushdist ) )
        self _meth_85C9( self.preventplayerpushdist );

    scripts\asm\asm_mp::_id_2365( var_0, var_1, var_2, var_5, var_4 );
}

terminate_meleeattack( var_0, var_1, var_2 )
{
    self _meth_85C9( 0 );
}

playmeleeattack( var_0, var_1, var_2, var_3 )
{
    self endon( var_1 + "_finished" );
    thread _id_0C73::_id_6A6A( var_1, self._id_4B26 );
    var_4 = scripts\asm\asm_mp::_id_2337( var_0, var_1 );

    if ( isdefined( self.preventplayerpushdist ) )
        self _meth_85C9( self.preventplayerpushdist );

    scripts\asm\asm_mp::_id_2365( var_0, var_1, var_2, var_4, self._id_C081 );
}

choosemeleeattack( var_0, var_1, var_2 )
{
    self.meleeattackanimindex = randomintrange( 0, self getanimentrycount( var_1 ) );
    return self.meleeattackanimindex;
}

_id_3EE4( var_0, var_1, var_2 )
{
    return _id_0F3C::_id_3EF4( var_0, var_1, var_2 );
}

playmovingpainanim( var_0, var_1, var_2, var_3 )
{
    self endon( var_1 + "_finished" );

    if ( !isdefined( self._id_0233 ) || self _meth_841E() < gettunedata().min_moving_pain_dist )
    {
        var_4 = _id_3EE4( var_0, "pain_generic", var_3 );
        self orientmode( "face angle abs", self.angles );
        scripts\asm\asm_mp::_id_2365( var_0, "pain_generic", var_2, var_4, self._id_C081 );
        return;
    }

    var_4 = scripts\asm\asm_mp::_id_2337( var_0, var_1 );
    scripts\asm\asm_mp::_id_2365( var_0, "pain_generic", var_2, var_4, self._id_C081 );
}

doteleporthack( var_0, var_1, var_2, var_3 )
{
    var_6 = self _meth_8146();
    self setorigin( var_6, 0 );
    var_6 = getgroundposition( var_6, 15 );
    self._id_9CEC = undefined;
    self notify( "traverse_end" );
    scripts\asm\asm::_id_237C( "decide_idle", var_3 );
}

shouldturn( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( self.desiredyaw ) )
        return 0;

    return 1;
}

handleadditionalyaw( var_0, var_1 )
{
    self endon( var_0 + "_finished" );
    var_2 = self.additionalyaw / var_1;

    for ( var_3 = 0; var_3 < var_1; var_3++ )
    {
        var_4 = self.angles[1];
        var_4 = var_4 + var_2;
        var_5 = ( self.angles[0], var_4, self.angles[2] );
        self orientmode( "face angle abs", var_5 );
        scripts\engine\utility::waitframe();
    }

    self.additionalyaw = undefined;
}

_id_D56A( var_0, var_1, var_2, var_3 )
{
    var_4 = scripts\asm\asm_mp::_id_2337( var_0, var_1 );
    var_5 = self getanimentry( var_1, var_4 );
    var_6 = getanimlength( var_5 );

    if ( isdefined( self.additionalyaw ) )
        thread handleadditionalyaw( var_1, floor( var_6 * 20 ) );

    return scripts\asm\asm_mp::_id_2365( var_0, var_1, var_2, var_4, self._id_C081 );
}

_id_3F0A( var_0, var_1, var_2 )
{
    var_3 = undefined;
    var_4 = abs( self.desiredyaw );

    if ( self.desiredyaw < 0 )
    {
        if ( var_4 < 67.5 )
            var_3 = 9;
        else if ( var_4 < 112.5 )
            var_3 = 6;
        else if ( var_4 < 157.5 )
            var_3 = 3;
        else
            var_3 = "2r";
    }
    else if ( self.desiredyaw < 67.5 )
        var_3 = 7;
    else if ( self.desiredyaw < 112.5 )
        var_3 = 4;
    else if ( self.desiredyaw < 157.5 )
        var_3 = 1;
    else
        var_3 = "2l";

    var_5 = scripts\asm\asm::_id_2358( var_1, var_3 );
    var_6 = self getanimentry( var_1, var_5 );
    var_7 = _func_078( var_6, 0, 1 );
    self.additionalyaw = self.desiredyaw - var_7;
    self.desiredyaw = undefined;
    return var_5;
}

shouldstartarrivalalien( var_0, var_1, var_2, var_3 )
{
    if ( !_id_0C75::_id_FFE7() )
        return 0;

    var_4 = self._id_0233;

    if ( !isdefined( var_4 ) )
        return 0;

    var_5 = gettunedata();

    if ( !isdefined( var_5.arrivalanimdist[var_2] ) )
        return 0;

    var_6 = var_5.arrivalanimdist[var_2];
    var_7 = distance2d( var_4, self.origin );

    if ( var_7 < var_6 * 1.1 && var_7 > var_6 * 0.75 )
        return 1;

    return 0;
}

playalienarrival( var_0, var_1, var_2, var_3 )
{
    self endon( var_1 + "_finished" );
    var_4 = self._id_0233;

    if ( isdefined( var_4 ) )
    {
        var_5 = gettunedata();
        var_6 = var_5.arrivalanimdist[var_1];
        var_7 = distance2d( var_4, self.origin );
        var_8 = var_7 / var_6;
        self scragentsetanimscale( var_8, 1 );
    }

    scripts\asm\asm_mp::_id_2365( var_0, var_1, var_2, 0, self._id_C081 );
}

terminate_arrival( var_0, var_1, var_2 )
{
    self scragentsetanimscale( 1, 1 );
}

playaliendeathanim( var_0, var_1, var_2, var_3 )
{
    self endon( var_1 + "_finished" );
    self _meth_828A( "gravity" );

    if ( !scripts\engine\utility::_id_9CEE( self._id_11B2F ) )
        self _meth_8281( "anim deltas" );

    scripts\asm\asm_mp::_id_2364( var_0, var_1, var_2, var_3 );
}

getenemy()
{
    if ( isdefined( self.myenemy ) )
        return self.myenemy;

    return undefined;
}

lookatenemy()
{
    var_0 = getenemy();

    if ( isdefined( var_0 ) )
    {
        var_1 = var_0.origin - self.origin;
        var_2 = vectortoangles( var_1 );
        self orientmode( "face angle abs", var_2 );
    }
    else
        self orientmode( "face angle abs", self.angles );
}

dojump( var_0, var_1, var_2, var_3 )
{
    self endon( var_1 + "_finished" );

    if ( self.agent_type == "alien_phantom" )
        self.bteleporting = 1;

    if ( isdefined( self.preventplayerpushdist ) )
        self _meth_85C9( self.preventplayerpushdist );

    scripts\asm\alien_goon\alien_jump::_id_A4C3( var_0, var_1, self.origin, self.angles, self._id_1198.jumpdestinationpos, self._id_1198.jumpdestinationangles, self._id_1198.jumpnextpos );
    self.bteleporting = undefined;
    self._id_1198.jumpdestinationpos = undefined;
    self._id_1198.jumpdestinationangles = undefined;
    self._id_1198.jumpnextpos = undefined;
    clearasmaction();
}

dojumpattack( var_0, var_1, var_2, var_3 )
{
    self endon( var_1 + "_finished" );
    var_4 = gettunedata();
    thread domeleedamageoncontact( var_1, self._id_4B26, self._id_B601 * var_4.jump_attack_melee_damage_multiplier, var_4.jump_attack_damage_radius_sq, var_4.jump_attack_damage_dot );

    if ( isdefined( self.preventplayerpushdist ) )
        self _meth_85C9( self.preventplayerpushdist );

    scripts\asm\alien_goon\alien_jump::jumpattack( var_0, var_1, self._id_1198.jumpdestinationpos );
    self._id_1198.jumpdestinationpos = undefined;
    clearasmaction();
}

doalienjumptraversal( var_0, var_1, var_2, var_3 )
{
    self endon( var_1 + "_finished" );
    var_4 = self _meth_8148();
    var_5 = self _meth_8146();
    var_6 = scripts\engine\utility::_id_824D( var_5 );

    if ( abs( var_6 ) > 16 )
    {
        self.desiredyaw = var_6;
        _id_D56A( var_0, "turn", var_2 );
    }

    var_7 = vectornormalize( ( var_5 - self.origin ) * ( 1, 1, 0 ) );
    var_8 = vectortoangles( var_7 );

    if ( self.agent_type == "alien_phantom" )
        self.bteleporting = 1;

    scripts\asm\alien_goon\alien_jump::_id_A4C3( var_0, var_1, self.origin, var_8, var_5, var_8, var_5 + anglestoforward( var_8 ) * 10 );
    self.bteleporting = undefined;
    self notify( "traverse_end" );
    thread scripts\asm\asm::_id_237C( "decide_idle" );
}

checkpainnotify()
{
    if ( self._id_1198.painnotifytime > 0 )
    {
        self._id_1198.painnotifytime = 0;
        return 1;
    }

    return 0;
}

jumpnotehandler( var_0, var_1, var_2, var_3 )
{
    if ( var_0 == "stop_teleport" )
    {
        if ( self _meth_85B8() )
        {
            level.totalphantomsjumping--;

            if ( level.totalphantomsjumping <= 0 )
                level.totalphantomsjumping = 0;

            self _meth_85B7( 0 );
            thread play_teleport_end();
        }
    }
}

play_teleport_end()
{
    scripts\engine\utility::waitframe();
    self setscriptablepartstate( "teleport_fx", "teleport_end" );
}

terminate_jump( var_0, var_1, var_2 )
{
    self _meth_85B7( 0 );
}

isalienjumpfinished( var_0, var_1, var_2, var_3 )
{
    if ( scripts\engine\utility::_id_9CEE( self._id_11B2F ) )
        return 0;

    return shouldabortaction( var_0, var_1, var_2, var_1 );
}
