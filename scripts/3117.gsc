// IW7 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

_id_98E7( var_0 )
{
    self._id_2B0F = 1;
    self._id_1FC6 = 1.0;
    self._id_4BDC = undefined;
    self._id_4BDB = undefined;
    self _meth_828A( "noclip" );
    self _meth_8287( 99999999 );
    self _meth_828B( 1 );
    _id_F722( "hover" );
    thread _id_0C77::_id_13F62();
    return anim.success;
}

_id_8281( var_0 )
{
    if ( _id_7ED5() == "launched" )
    {
        if ( _id_8285( self ) )
            _id_827B( self, self._id_D04C, _id_7ED2() );

        return anim.running;
    }

    return anim.failure;
}

_id_827A( var_0 )
{
    if ( _id_7ED5() == "entangled" )
    {
        if ( isdefined( self._id_D04C ) && !_id_0A5B::_id_D0EF( self._id_D04C ) && self._id_D04C attackbuttonpressed() )
        {
            var_1 = self._id_D04C;
            var_2 = anglestoforward( self._id_D04C getplayerangles() );
            var_3 = var_1.origin + ( 0, 0, 5 );
            var_4 = var_3 + var_2 * _id_79E8();
            var_5 = bullettrace( var_3, var_4, 0, var_1 )["position"];

            if ( distancesquared( self.origin, var_5 ) < 360000 )
                var_6 = var_5;
            else
            {
                var_7 = vectornormalize( var_5 - self.origin );
                var_6 = self.origin + var_7 * 600;
            }

            self setorigin( var_6, 0 );
            self._id_8272 = var_1.origin;
            scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_12DBA( var_1, self );
            return anim.success;
        }
        else
        {
            _id_AAA9( self );
            return anim.running;
        }
    }

    return anim.failure;
}

_id_79E8()
{
    return 175;
}

_id_827F( var_0 )
{
    if ( _id_7ED5() == "hover" )
    {
        _id_41B5();
        scripts\asm\asm_bb::_id_2968( "fly" );

        if ( !isdefined( self._id_8268 ) )
        {
            self._id_8268 = scripts\engine\utility::_id_7E2E( self.origin, level._id_13F29 );
            self._id_8272 = self._id_8268.origin;
            return anim.success;
        }

        if ( distancesquared( self._id_8268.origin, self.origin ) < 4096 )
        {
            self notify( "ghost_reached_hover_node" );
            var_1 = scripts\engine\utility::array_remove( level._id_13F29, self._id_8268 );
            var_2 = _id_7DB1();

            if ( var_2.size > 0 )
                var_3 = scripts\engine\utility::_id_DC6B( var_2 ).origin;
            else
                var_3 = self.origin;

            self._id_8268 = _id_80BB( var_3, var_1 );
            self._id_8272 = self._id_8268.origin;
        }

        return anim.success;
    }

    return anim.failure;
}

_id_827E( var_0 )
{
    if ( _id_7ED5() == "hide" )
    {
        _id_41B7();
        scripts\asm\asm_bb::_id_2968( "fly" );

        if ( !isdefined( self._id_8267 ) )
        {
            self._id_8267 = scripts\engine\utility::_id_7E2E( self.origin, level._id_13F28 );
            self._id_8272 = self._id_8267.origin;
            return anim.success;
        }

        if ( distancesquared( self._id_8267.origin, self.origin ) < 1024 )
        {
            self notify( "ghost_reached_hide_node" );
            self._id_8267 = scripts\engine\utility::_id_817E( self._id_8267._id_0334, "targetname" );
            self._id_8272 = self._id_8267.origin;
        }

        return anim.success;
    }

    return anim.failure;
}

_id_3DF0( var_0 )
{
    scripts\asm\asm_bb::_id_2914();

    if ( !( _id_7ED5() == "attack" ) )
        return anim.failure;

    if ( self._id_0180 )
        return anim.failure;

    if ( !isdefined( self._id_13F2C ) )
        return anim.failure;

    if ( !_id_0A77::isreallyalive( self._id_13F2C ) )
        return anim.failure;

    if ( isdefined( self._id_13F2C._id_0184 ) && self._id_13F2C._id_0184 == 1 )
        return anim.failure;

    if ( self._id_1B03 == "melee" || scripts\anim\notetracks_mp::_id_9F77() )
        return anim.failure;

    if ( distancesquared( self._id_13F2C.origin, self.origin ) > 9216 )
        return anim.failure;

    scripts\asm\asm_bb::_id_2965( self._id_13F2C );
    return anim.failure;
}

_id_3D46( var_0 )
{
    if ( !( _id_7ED5() == "attack" ) )
        return anim.failure;

    if ( self._id_0180 )
    {
        self._id_4B26 = undefined;
        return anim.failure;
    }

    if ( !isdefined( self._id_13F2C ) )
        return anim.failure;

    if ( distancesquared( self._id_13F2C.origin, self.origin ) > 147456 )
        return anim.failure;

    self._id_8272 = self._id_13F2C.origin;
    _id_12871();
    return anim.success;
}

_id_F108( var_0 )
{
    if ( !( _id_7ED5() == "attack" ) )
        return anim.failure;

    if ( isdefined( self._id_5969 ) )
        return anim.failure;

    if ( !isdefined( self._id_13F2C ) )
        return anim.failure;

    self._id_8272 = self._id_13F2C.origin;
    _id_12871( 1024 );
    return anim.failure;
}

_id_8278( var_0 )
{
    var_1 = self;
    var_1 endon( "death" );
    var_1 endon( "ghost_stop_attack" );
    level endon( "game_ended" );
    var_1 _id_8279( var_0 );
    var_2 = _id_7AE1();
    var_3 = _id_7AC9();
    var_4 = randomintrange( _id_7AE1(), _id_7AC9() + 1 );

    for ( var_5 = 0; var_5 < var_4; var_5++ )
        var_1 waittill( "ghost_played_melee_anim" );

    if ( isdefined( var_0 ) )
        var_0._id_C1F5--;

    var_1 scripts\asm\asm_bb::_id_2914();
    var_1 _id_41B7();
    var_1 _id_F722( "hover" );
    var_1 waittill( "ghost_reached_hover_node" );
    var_1 _id_12EA1( 1.0 );
}

_id_7AE1()
{
    return 1;
}

_id_7AC9()
{
    return 1;
}

_id_8279( var_0 )
{
    _id_F723( var_0 );
    _id_F722( "attack" );
    _id_12EA1( 2.5 );
}

_id_F723( var_0 )
{
    self._id_13F2C = var_0;
    self._id_8272 = var_0.origin;
}

_id_7DB1()
{
    var_0 = [];

    foreach ( var_2 in level.players )
    {
        if ( var_2._id_0184 || isdefined( var_2.owner ) && var_2.owner._id_0184 )
            continue;

        if ( _id_0F74::_id_1002C( var_2 ) )
            continue;

        if ( !isalive( var_2 ) )
            continue;

        var_0[var_0.size] = var_2;
    }

    return var_0;
}

_id_12871( var_0 )
{
    if ( !isdefined( var_0 ) )
        var_0 = 1;

    if ( isdefined( self._id_8272 ) && distancesquared( self._id_8272, self.origin ) > var_0 )
        scripts\asm\asm_bb::_id_2968( "fly" );
    else
        scripts\asm\asm_bb::_id_2968( "" );
}

_id_65FE( var_0, var_1 )
{
    var_0 notify( "ghost_stop_attack" );
    var_1.ghost_in_entanglement = var_0;
    var_0._id_D04C = var_1;
    var_0 _id_F75F( var_0, 1 );
    var_0 _id_F722( "entangled" );
    var_0 _id_41B5();
    var_0 _id_41B7();
    var_0 _id_12EA1( 1.0 );
    var_0 scripts\asm\asm_bb::_id_2968( "entangled" );
    var_0 scripts\asm\asm_bb::_id_2914();
    var_0 _id_F79D( "off", var_0 );

    if ( isdefined( level.fbd ) && isdefined( level.fbd.fightstarted ) && level.fbd.fightstarted )
        var_0 setscriptablepartstate( "soul", "captured" );
}

_id_673C( var_0 )
{
    var_0 _id_12EA1( 1.0 );
    var_0 _id_F75F( var_0, 0 );
    var_0 _id_F722( "hover" );
    var_0 scripts\asm\asm_bb::_id_2968( "fly" );
    var_0 _id_F65F( "off", var_0 );
    var_0 _id_F79D( "active", var_0 );
}

_id_AAA9( var_0 )
{
    level thread _id_AAAD( var_0.origin, var_0.angles, var_0._id_00B9, var_0._id_D04C );
    var_0._id_C026 = 1;
    var_0 suicide();
}

_id_AAAD( var_0, var_1, var_2, var_3 )
{
    level endon( "game_ended" );
    var_3 endon( "disconnect" );
    var_3.ghost_in_entanglement = undefined;
    var_4 = spawn( "script_model", var_0 );
    var_4.angles = vectortoangles( var_1 );
    var_4._id_00B9 = get_fake_ghost_color( var_2 );
    var_4 setmodel( get_fake_ghost_model( var_4._id_00B9 ) );
    var_4 setscriptablepartstate( "animation", "on" );

    if ( isdefined( var_3 ) )
        var_5 = anglestoforward( var_3 getplayerangles() );
    else
        var_5 = ( 0, 0, 1 );

    var_5 = var_5 * 9000;
    var_4 physicslaunchserver( var_4.origin, var_5 );
    var_4 _meth_84D1();

    if ( isdefined( level.fbd ) && isdefined( level.fbd.fightstarted ) && level.fbd.fightstarted )
    {
        thread [[ level.fbd.soulprojectilemonitorfunc ]]( var_4, var_3 );
        thread [[ level.fbd.soulprojectiledeathfunc ]]( var_4 );
    }

    var_4 thread _id_CAFB( var_4, var_3 );
}

get_fake_ghost_color( var_0 )
{
    return var_0;
}

get_fake_ghost_model( var_0 )
{
    if ( isdefined( level.get_fake_ghost_model_func ) )
        return [[ level.get_fake_ghost_model_func ]]( var_0 );

    return "fake_zombie_ghost_" + var_0;
}

_id_CAFB( var_0, var_1 )
{
    var_0 endon( "death" );
    var_0 waittill( "collision", var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 );

    if ( isdefined( level.fbd ) && isdefined( level.fbd.fightstarted ) && level.fbd.fightstarted )
    {
        var_10 = var_0 gettagorigin( "j_spine4" );
        playfx( level._effect["flying_soul_hit_fail"], var_10, anglestoforward( var_0.angles ), anglestoup( var_0.angles ) );
    }

    _id_6AEC( var_0, var_1, _id_7ED4() );
}

_id_6AEC( var_0, var_1, var_2 )
{
    if ( isdefined( level.fbd ) && isdefined( level.fbd.fightstarted ) && level.fbd.fightstarted )
    {
        var_0 delete();
        return;
    }

    _id_827D( var_0, var_1, var_2 );
    playfx( level._effect["ghost_explosion_death_" + get_exp_vfx_color( var_0._id_00B9 )], var_0.origin, anglestoforward( var_0.angles ), anglestoup( var_0.angles ) );
    var_0 setscriptablepartstate( "animation", "off" );
    var_0 delete();
}

get_exp_vfx_color( var_0 )
{
    if ( issubstr( var_0, "bomb" ) )
        return strtok( var_0, "_" )[0];

    return var_0;
}

_id_8285( var_0 )
{
    if ( isdefined( var_0._id_D04C ) && var_0._id_D04C secondaryoffhandbuttonpressed() )
        return 1;

    if ( gettime() - var_0._id_10BBB > 5000 )
        return 1;

    return 0;
}

_id_827B( var_0, var_1, var_2 )
{
    _id_D48C( var_0 );
    _id_827D( var_0, var_1, var_2 );
    var_0._id_C026 = 1;
    var_0 suicide();
}

_id_827D( var_0, var_1, var_2 )
{
    var_3 = getclosestactivemovingtargetwithinrange( var_0, var_2 );

    if ( isplayer( var_1 ) )
    {
        if ( isdefined( var_3 ) )
        {
            var_1 thread _id_0A4F::updatedamagefeedback( "hitcritical" );

            if ( [[ level.should_moving_target_explode ]]( var_0, var_3 ) )
            {
                if ( isdefined( level.process_player_gns_combo_func ) )
                    [[ level.process_player_gns_combo_func ]]( var_1, var_3 );

                process_moving_target_hit( var_3, var_1, var_0 );
            }
            else if ( isdefined( level.hit_wrong_moving_target_func ) )
                [[ level.hit_wrong_moving_target_func ]]( var_1, var_3, var_0 );
        }
        else if ( isdefined( level.process_player_gns_combo_func ) )
            [[ level.process_player_gns_combo_func ]]( var_1, var_3 );
    }
}

process_moving_target_hit( var_0, var_1, var_2 )
{
    if ( isdefined( level.process_moving_target_hit_func ) )
        [[ level.process_moving_target_hit_func ]]( var_0, var_1, var_2 );
    else
        remove_moving_target_default( var_0, var_1 );
}

remove_moving_target_default( var_0, var_1 )
{
    _id_E05A( var_0, var_1 );
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_93F2( var_1 );
}

_id_E05A( var_0, var_1 )
{
    var_0 setscriptablepartstate( "skull_vfx", "off" );
    var_0 delete();
    var_1 thread _id_0A6A::_id_12885( "killfirm_ghost", "zmb_comment_vo", "highest", 10, 0, 0, 1, 10 );
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_DB04();
}

getclosestactivemovingtargetwithinrange( var_0, var_1 )
{
    if ( !isdefined( level._id_BD43 ) )
        return undefined;

    var_2 = [];

    foreach ( var_4 in level._id_BD43 )
    {
        foreach ( var_6 in var_4 )
        {
            if ( !isdefined( var_6 ) )
                continue;

            if ( distancesquared( var_0.origin, var_6.origin ) < var_1 )
                var_2[var_2.size] = var_6;
        }
    }

    var_9 = sortbydistance( var_2, var_0.origin );
    return var_9[0];
}

_id_7D97( var_0, var_1 )
{
    var_2 = [];

    foreach ( var_4 in level._id_13F2D )
    {
        if ( var_4 == var_0 )
            continue;

        if ( _id_9DDD( var_4 ) )
            continue;

        if ( distancesquared( var_0.origin, var_4.origin ) < var_1 )
            var_2[var_2.size] = var_4;
    }

    return var_2;
}

_id_7ED2()
{
    return 40000;
}

_id_7ED4()
{
    return 7225;
}

_id_F75F( var_0, var_1 )
{
    var_0._id_9BD4 = var_1;
}

_id_9DDD( var_0 )
{
    return scripts\engine\utility::_id_9CEE( var_0._id_9BD4 );
}

_id_C0B6( var_0 )
{
    return anim.failure;
}

_id_F722( var_0 )
{
    self._id_826C = var_0;
}

_id_7ED5()
{
    return self._id_826C;
}

_id_41B5()
{
    self._id_8267 = undefined;
}

_id_41B7()
{
    self._id_8268 = undefined;
}

_id_12EA1( var_0 )
{
    if ( !isdefined( self._id_4BDC ) )
        return;

    if ( !isdefined( self._id_4BDB ) )
        return;

    self._id_1FC6 = var_0;
    self setanimstate( self._id_4BDC, self._id_4BDB, self._id_1FC6 );
}

_id_F65F( var_0, var_1 )
{
    var_1 setscriptablepartstate( "being_entangled", var_0 );
}

_id_F79D( var_0, var_1 )
{
    var_1 setscriptablepartstate( "mist_trail", var_0 );
}

_id_80BB( var_0, var_1 )
{
    var_2 = 4;
    var_3 = sortbydistance( var_1, var_0 );
    var_4 = scripts\engine\utility::ter_op( var_3.size > var_2, var_2, var_3.size );
    var_5 = randomint( var_4 );
    return var_3[var_5];
}

_id_D48C( var_0 )
{
    var_1 = vectornormalize( var_0._id_0381 );

    if ( var_1 == ( 0, 0, 0 ) )
        var_1 = ( 0, 0, 1 );

    var_2 = vectortoangles( var_1 );
    playfx( level._effect["ghost_explosion_death"], var_0.origin, var_1, anglestoup( var_2 ) );
}
