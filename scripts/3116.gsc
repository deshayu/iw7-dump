// IW7 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

_id_98E6( var_0 )
{
    self._id_BCE4 = 1.0;
    self._id_2B0D = 1;
    self._id_BF86 = gettime() + 10000;
    return anim.success;
}

_id_9FEC( var_0, var_1 )
{
    if ( !isalive( var_0 ) )
        return 0;

    if ( isdefined( var_0._id_B36D ) )
        return 0;

    if ( var_0.team != self.team )
    {
        if ( !scripts\engine\utility::_id_9CEE( var_0._id_9CEF ) )
            return 0;
    }

    if ( isdefined( var_0.agent_type ) )
    {
        switch ( var_0.agent_type )
        {
            case "zombie_grey":
            case "zombie_brute":
                return 0;
        }
    }

    if ( scripts\engine\utility::_id_9CEE( var_0._id_9CEC ) )
        return 0;

    if ( scripts\engine\utility::_id_9CEE( var_0._id_EF64 ) )
        return 0;

    var_2 = var_0.origin - self.origin;
    var_2 = ( var_2[0], var_2[1], 0 );
    var_3 = vectordot( var_2, var_1 );

    if ( var_3 < 0.5 )
        return 0;

    var_4 = distancesquared( var_0.origin, self.origin );

    if ( var_4 > 10000 )
        return 0;

    return 1;
}

_id_531B( var_0 )
{
    var_1 = anglestoforward( self.angles );
    var_2 = scripts\mp\mp_agent::_id_7D95( "all" );
    self._id_2997 = undefined;
    var_3 = [];

    foreach ( var_5 in var_2 )
    {
        if ( var_5 == self )
            continue;

        if ( !_id_9FEC( var_5, var_1 ) )
            continue;

        if ( !scripts\engine\utility::_id_9CEE( var_5._id_9E0C ) )
            continue;

        var_3[var_3.size] = var_5;

        if ( var_3.size >= 3 )
        {
            self._id_2997 = 1;
            return anim.failure;
        }
    }

    foreach ( var_5 in var_3 )
        var_5 _meth_80B0( var_5.health + 1000, self.origin, undefined, undefined, "MOD_IMPACT" );

    return anim.failure;
}

_id_12F69( var_0 )
{
    if ( isdefined( self._id_13F9D ) )
        return anim.failure;

    var_1 = anglestoforward( self.angles );

    if ( isdefined( self._id_13F9E ) && _id_9FEC( self._id_13F9E, var_1 ) )
        return anim.failure;

    self._id_13F9E = undefined;
    var_2 = scripts\mp\mp_agent::_id_7D95( "all" );

    foreach ( var_4 in var_2 )
    {
        if ( var_4 == self )
            continue;

        if ( !_id_9FEC( var_4, var_1 ) )
            continue;

        if ( scripts\engine\utility::_id_9CEE( var_4._id_9E0C ) )
            continue;

        self._id_13F9E = var_4;
        break;
    }

    return anim.failure;
}

_id_12EA6( var_0 )
{
    if ( !isdefined( self._id_527A ) || !isdefined( self._id_8E14 ) )
        return anim.failure;

    if ( self._id_8E14 != self._id_527A )
    {
        self _meth_841F();
        return anim.success;
    }

    return anim.failure;
}

_id_38AF( var_0 )
{
    if ( !isdefined( self._id_13F9D ) )
        return anim.failure;

    if ( !isdefined( self._id_010C ) )
        return anim.failure;

    if ( isdefined( self._id_BFB2 ) )
    {
        if ( gettime() < self._id_BFB2 )
            return anim.failure;
    }

    var_1 = anglestoforward( self.angles );
    var_2 = self._id_010C.origin - self.origin;
    var_2 = ( var_2[0], var_2[1], 0 );
    var_2 = vectornormalize( var_2 );

    if ( vectordot( var_1, var_2 ) < 0 )
        return anim.failure;

    if ( !self _meth_805F( self._id_010C ) )
        return anim.failure;

    return anim.success;
}

_id_38BE( var_0 )
{
    if ( !isdefined( self._id_8E14 ) || self._id_8E14 == "hand" )
        return anim.failure;

    if ( isdefined( self._id_13F9D ) )
        return anim.failure;

    if ( isdefined( self._id_13F9E ) )
        return anim.success;

    return anim.failure;
}

_id_9609( var_0 )
{
    self._id_3324 = 1;
}

_id_D979( var_0 )
{
    if ( !isdefined( self._id_13F9E ) )
        return anim.failure;

    if ( !isdefined( self._id_13FAB ) )
    {
        var_1 = anglestoforward( self.angles );

        if ( isdefined( self._id_13F9E ) && !_id_9FEC( self._id_13F9E, var_1 ) )
            return anim.failure;
    }

    if ( !scripts\engine\utility::_id_9CEE( self._id_3324 ) )
        return anim.failure;

    return anim.running;
}

_id_116EA( var_0 )
{
    self._id_3324 = undefined;
}

_id_9704( var_0 )
{
    self._id_3322 = 1;
}

_id_D983( var_0 )
{
    if ( self._id_8E14 == "hand" )
    {
        if ( isdefined( self._id_13F9D ) )
            self._id_13F9D delete();

        self._id_13F9D = undefined;
        return anim.failure;
    }

    if ( !isdefined( self._id_010C ) )
        return anim.success;

    if ( !scripts\engine\utility::_id_9CEE( self._id_3322 ) )
        return anim.success;

    if ( scripts\engine\utility::_id_9CEE( self._id_29D1 ) )
        return anim.running;

    var_1 = anglestoforward( self.angles );
    var_2 = self._id_010C.origin - self.origin;
    var_2 = ( var_2[0], var_2[1], 0 );
    var_2 = vectornormalize( var_2 );

    if ( vectordot( var_1, var_2 ) < 0 )
        return anim.failure;

    if ( !self _meth_805F( self._id_010C ) )
        return anim.failure;

    return anim.running;
}

_id_116EE( var_0 )
{
    self._id_3322 = undefined;
    self._id_BFB2 = gettime() + randomintrange( 5000, 6000 );
}

_id_390C( var_0 )
{
    if ( !( isdefined( self._id_8E14 ) && self._id_8E14 == "head" ) )
        return anim.failure;

    if ( isdefined( self._id_BF73 ) )
    {
        if ( gettime() < self._id_BF73 )
            return anim.failure;
    }

    if ( !isdefined( self._id_010C ) )
        return anim.failure;

    if ( isdefined( self._id_BF86 ) )
    {
        if ( gettime() < self._id_BF86 )
            return anim.failure;
    }

    if ( isdefined( level.gator_mouth_trig ) && self istouching( level.gator_mouth_trig ) )
        return anim.failure;

    var_1 = 10000;

    if ( isdefined( self._id_A8AF ) && distancesquared( self._id_A8AF, self.origin ) < var_1 )
        return anim.failure;

    var_2 = distancesquared( self._id_010C.origin, self.origin );

    if ( var_2 > 562500 )
        return anim.failure;

    if ( var_2 < 40000 )
        return anim.failure;

    if ( !self _meth_805F( self._id_010C ) )
    {
        self._id_A8B8 = undefined;
        return anim.failure;
    }

    var_3 = gettime();

    if ( !isdefined( self._id_A8B8 ) || !isdefined( self._id_A8B7 ) || self._id_A8B7 != self._id_010C )
    {
        self._id_A8B8 = var_3;
        self._id_A8B7 = self._id_010C;
        return anim.failure;
    }

    if ( var_3 - self._id_A8B8 < 1500 )
        return anim.failure;

    var_4 = scripts\engine\trace::_id_48BC( 1, 1, 1, 0, 1, 0, 0 );
    self._id_BF73 = var_3 + 250;
    var_5 = 0;
    var_6 = [];

    foreach ( var_8 in level.agentarray )
    {
        if ( isalive( var_8 ) )
        {
            var_6[var_5] = var_8;
            var_5++;
        }
    }

    if ( isdefined( self._id_8DDA ) )
        var_6[var_6.size] = self._id_8DDA;

    var_10 = self._id_010C _meth_810C();
    var_11 = physics_spherecast( self gettagorigin( "tag_eye" ), var_10, 10, var_4, var_6, "physicsquery_closest" );

    if ( isdefined( var_11 ) && var_11.size > 0 )
    {
        if ( isdefined( var_11[0]["hittype"] ) && var_11[0]["hittype"] == "hittype_entity" )
        {
            if ( var_11[0]["entity"] == self._id_010C )
                return anim.success;
        }
    }

    self._id_A8B8 = var_3;
    return anim.failure;
}

_id_9652( var_0 )
{
    self._id_2B5A = 1;
    self._id_A872 = undefined;
    self._id_A873 = self._id_010C;
    self.laserfailsafetime = gettime() + 3000;
}

_id_D97F( var_0 )
{
    if ( !isdefined( self._id_A873 ) || !isdefined( self._id_010C ) || self._id_010C != self._id_A873 )
        return anim.failure;

    if ( !scripts\engine\utility::_id_9CEE( self._id_2B5B ) )
    {
        if ( gettime() > self.laserfailsafetime )
            return anim.failure;

        return anim.running;
    }

    if ( !isdefined( self._id_A872 ) )
        self._id_A872 = gettime();

    if ( scripts\engine\utility::_id_9CEE( self._id_2B5A ) )
    {
        if ( gettime() < self._id_A872 + 6000 )
            return anim.running;
    }

    return anim.failure;
}

_id_116ED( var_0 )
{
    self._id_2B5A = 0;
    self._id_A873 = undefined;
    self._id_BF86 = gettime() + randomintrange( 5000, 10000 );
    self._id_A8B8 = undefined;
    self._id_A8B7 = undefined;
    self.laserfailsafetime = undefined;
}

_id_FFED( var_0 )
{
    return anim.failure;
}

_id_95C5( var_0 )
{

}

_id_D971( var_0 )
{
    return anim.failure;
}

_id_116E9( var_0 )
{

}
