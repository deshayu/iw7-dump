// IW7 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

_id_333E( var_0 )
{
    self endon( "disconnect" );
    var_0 endon( "death" );
    var_0 thread _id_3331( self );
    var_0._id_11832 = gettime();
    _id_332E( var_0 );
    thread _id_3340();
    thread _id_333F();
    var_0 thread _id_3339();
    var_0 waittill( "missile_stuck" );
    _id_0A6B::_id_C54E( var_0, "power_c4" );
    thread _id_0A6B::_id_B9CA( self, var_0 );
    var_0 setscriptablepartstate( "plant", "active", 0 );
}

_id_3335()
{
    self endon( "death" );
    self.owner endon( "disconnect" );
    wait 0.1;
    thread _id_3338( self.owner );
}

_id_3338( var_0 )
{
    thread _id_3330( 5 );
    self _meth_82DD( var_0 );
    self setscriptablepartstate( "plant", "neutral", 0 );
    self setscriptablepartstate( "explode", "active", 0 );
}

_id_3332( var_0 )
{
    thread _id_3330( 2 );
    self setscriptablepartstate( "plant", "neutral", 0 );
    self setscriptablepartstate( "destroy", "active", 0 );
}

_id_3330( var_0 )
{
    self notify( "death" );
    level._id_B779[self getentitynumber()] = undefined;
    self._id_69BA = 1;
    var_1 = self.owner;

    if ( isdefined( self.owner ) )
    {
        var_1._id_CC4C = scripts\engine\utility::array_remove( var_1._id_CC4C, self );
        var_1 notify( "c4_update", 0 );
    }

    wait( var_0 );
    self delete();
}

_id_3339()
{
    self endon( "death" );
    self.owner endon( "disconnect" );
    level endon( "game_ended" );
    var_0 = self.owner;
    self waittill( "detonateExplosive", var_1 );

    if ( isdefined( var_1 ) )
        thread _id_3338( var_1 );
    else
        thread _id_3338( var_0 );
}

_id_3333()
{
    self endon( "death" );
    self.owner endon( "disconnect" );
    self waittill( "emp_damage", var_0, var_1 );

    if ( isdefined( self.owner ) && var_0 != self.owner )
        var_0 notify( "destroyed_equipment" );

    thread _id_3332();
}

_id_332F( var_0 )
{
    return ( gettime() - self._id_11832 ) / 1000 > 0.3 && !isdefined( self._id_53D7 );
}

_id_3340()
{
    self endon( "death" );
    self endon( "disconnect" );
    self endon( "c4_unset" );
    level endon( "game_ended" );
    self notify( "watchForDetonation" );
    self endon( "watchForDetonation" );

    for (;;)
    {
        self waittillmatch( "detonate", "c4_zm" );
        thread _id_3336();
    }
}

_id_333F()
{
    self endon( "death" );
    self endon( "disconnect" );
    self endon( "c4_unset" );
    level endon( "game_ended" );
    self notify( "watchForAltDetonation" );
    self endon( "watchForAltDetonation" );
    var_0 = 0;

    for (;;)
    {
        if ( self usebuttonpressed() )
        {
            var_0 = 0;

            while ( self usebuttonpressed() )
            {
                var_0 = var_0 + 0.05;
                wait 0.05;
            }

            if ( var_0 >= 0.5 )
                continue;

            var_0 = 0;

            while ( !self usebuttonpressed() && var_0 < 0.5 )
            {
                var_0 = var_0 + 0.05;
                wait 0.05;
            }

            if ( var_0 >= 0.5 )
                continue;

            if ( !_id_0D12::_id_9DDF( self ) && !_id_0A77::isusingremote() && _id_0A77::isreallyalive( self ) )
                thread _id_3336();
        }

        wait 0.05;
    }
}

_id_3336()
{
    if ( isdefined( self._id_334E ) )
    {
        foreach ( var_1 in self._id_334E )
        {
            if ( var_1 _id_332F() )
                var_1 thread _id_3335();
        }
    }
}

_id_332E( var_0 )
{
    var_1 = self.owner;

    if ( !isdefined( self._id_334E ) )
        self._id_334E = [];

    self._id_334E[var_0 getentitynumber()] = var_0;
    thread _id_333C( var_0 );
}

_id_333B( var_0 )
{
    if ( !isdefined( self._id_334E ) )
        return;

    self._id_334E[var_0] = undefined;
}

_id_333C( var_0 )
{
    self endon( "disconnect" );
    var_1 = var_0 getentitynumber();
    var_0 waittill( "death" );
    _id_333B( var_1 );
}

_id_3331( var_0 )
{
    self endon( "death" );
    self endon( "missile_stuck" );
    var_0 waittill( "disconnect" );
    self delete();
}
