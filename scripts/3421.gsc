// IW7 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

_id_DEBC()
{
    level._id_9A12["perk_machine_revive"] = &"COOP_PERK_MACHINES_1500";
    level._id_9A12["perk_machine_tough"] = &"COOP_PERK_MACHINES_2500";
    level._id_9A12["perk_machine_flash"] = &"COOP_PERK_MACHINES_3000";
    level._id_9A12["perk_machine_more"] = &"COOP_PERK_MACHINES_4000";
    level._id_9A12["perk_machine_rat_a_tat"] = &"COOP_PERK_MACHINES_2000";
    level._id_9A12["perk_machine_run"] = &"COOP_PERK_MACHINES_RUN";
    level._id_9A12["perk_machine_fwoosh"] = &"COOP_PERK_MACHINES_FWOOSH";
    level._id_9A12["perk_machine_smack"] = &"COOP_PERK_MACHINES_SMACK";
    level._id_9A12["perk_machine_zap"] = &"COOP_PERK_MACHINES_ZAP";
    level._id_9A12["perk_machine_boom"] = &"COOP_PERK_MACHINES_BOOM";
    level._id_9A12["perk_machine_deadeye"] = &"COOP_PERK_MACHINES_1000";
    level._id_9A12["perk_machine_change"] = &"COOP_PERK_MACHINES_DLC3_CHANGE";
    _id_0A59::_id_DEBB( "perk_machine_run", "perk", 1, ::_id_9011, ::_id_15DE, 0, 1, ::_id_9719 );
    _id_0A59::_id_DEBB( "perk_machine_revive", "perk", 1, ::_id_9011, ::_id_15DE, 0, 1, ::_id_970E );
    _id_0A59::_id_DEBB( "perk_machine_rat_a_tat", "perk", 1, ::_id_9011, ::activate_perk_machine_gesture_second, 0, 1, ::_id_9705 );
    _id_0A59::_id_DEBB( "perk_machine_tough", "perk", 1, ::_id_9011, ::_id_15DE, 0, 1, ::_id_9787 );
    _id_0A59::_id_DEBB( "perk_machine_flash", "perk", 1, ::_id_9011, ::_id_15DE, 0, 1, ::_id_95E3 );
    _id_0A59::_id_DEBB( "perk_machine_more", "perk", 1, ::_id_9011, ::_id_15DE, 0, 1, ::_id_968B );
    _id_0A59::_id_DEBB( "perk_machine_fwoosh", "perk", 1, ::_id_9011, ::_id_15DE, 0, 1, ::_id_95F4 );
    _id_0A59::_id_DEBB( "perk_machine_smack", "perk", 1, ::_id_9011, ::_id_15DE, 0, 1, ::_id_974A );
    _id_0A59::_id_DEBB( "perk_machine_zap", "perk", 1, ::_id_9011, ::_id_15DE, 0, 1, ::_id_97AC );
    _id_0A59::_id_DEBB( "perk_machine_boom", "perk", 1, ::_id_9011, ::_id_15DE, 0, 1, ::_id_9553 );
    _id_0A59::_id_DEBB( "perk_machine_deadeye", "perk", 1, ::_id_9011, ::_id_15DE, 0, 1, ::init_deadeye_machines_func );
    _id_0A59::_id_DEBB( "perk_machine_change", "perk", 1, ::_id_9011, ::_id_15DE, 0, 1, ::init_change_machines_func );
}

_id_DEE2()
{
    level._effect["fire_cloud_1st"] = loadfx( "vfx/iw7/core/zombie/vfx_zmb_fire_trail_1st.vfx" );
    level._effect["fire_cloud_3rd"] = loadfx( "vfx/iw7/core/zombie/vfx_zmb_fire_trail_3rd.vfx" );
    level._effect["fire_trail"] = loadfx( "vfx/iw7/core/zombie/vfx_zmb_fire_trail_ground_line.vfx" );
    level._effect["repulsor_wave_red"] = loadfx( "vfx/iw7/_requests/coop/zmb_repulsor_wave_red" );
    level._effect["repulsor_view_red"] = loadfx( "vfx/iw7/_requests/coop/zmb_repulsor_wave_view_red" );
    level._effect["reload_zap_s"] = loadfx( "vfx/iw7/core/zombie/weapon/zap/vfx_zmb_zap_radial_s.vfx" );
    level._effect["reload_zap_m"] = loadfx( "vfx/iw7/core/zombie/weapon/zap/vfx_zmb_zap_radial_m.vfx" );
    level._effect["reload_zap_l"] = loadfx( "vfx/iw7/core/zombie/weapon/zap/vfx_zmb_zap_radial_l.vfx" );
    level._effect["reload_zap_screen"] = loadfx( "vfx/iw7/core/zombie/weapon/zap/vfx_zmb_zap_radial_sreen.vfx" );
    _id_0CFE::_id_DECD( "perk_machine_tough", ::_id_8341, ::_id_11458 );
    _id_0CFE::_id_DECD( "perk_machine_revive", ::_id_8327, ::_id_1144F );
    _id_0CFE::_id_DECD( "perk_machine_flash", ::_id_82CD, ::_id_11437 );
    _id_0CFE::_id_DECD( "perk_machine_more", ::_id_82EE, ::_id_11441 );
    _id_0CFE::_id_DECD( "perk_machine_rat_a_tat", ::_id_8326, ::_id_1144D );
    _id_0CFE::_id_DECD( "perk_machine_run", ::_id_832B, ::_id_11451 );
    _id_0CFE::_id_DECD( "perk_machine_fwoosh", ::_id_82CE, ::_id_11438 );
    _id_0CFE::_id_DECD( "perk_machine_smack", ::_id_8331, ::_id_11453 );
    _id_0CFE::_id_DECD( "perk_machine_zap", ::_id_834D, ::_id_1145B );
    _id_0CFE::_id_DECD( "perk_machine_boom", ::_id_82A7, ::_id_1142B );
    _id_0CFE::_id_DECD( "perk_machine_deadeye", ::give_deadeye_perk, ::take_deadeye_perk );
    _id_0CFE::_id_DECD( "perk_machine_change", ::give_change_perk, ::take_change_perk );

    if ( isdefined( level.perk_registration_func ) )
        [[ level.perk_registration_func ]]();

    level._id_BDFD = ::_id_FF6B;
    level thread _id_12E02();
}

_id_12E02()
{
    for (;;)
    {
        level scripts\engine\utility::waittill_any( "player_count_determined", "multiple_players" );
        _id_12E1D();
    }
}

_id_970E()
{
    _id_96C7( "perk_machine_revive" );
}

_id_9787()
{
    _id_96C7( "perk_machine_tough" );
}

_id_95E3()
{
    _id_96C7( "perk_machine_flash" );
}

_id_968B()
{
    _id_96C7( "perk_machine_more" );
}

_id_9705()
{
    _id_96C7( "perk_machine_rat_a_tat" );
}

_id_9719()
{
    _id_96C7( "perk_machine_run" );
}

_id_95F4()
{
    _id_96C7( "perk_machine_fwoosh" );
}

_id_974A()
{
    _id_96C7( "perk_machine_smack" );
}

_id_97AC()
{
    _id_96C7( "perk_machine_zap" );
}

_id_9553()
{
    _id_96C7( "perk_machine_boom" );
}

init_deadeye_machines_func()
{
    _id_96C7( "perk_machine_deadeye" );
}

init_change_machines_func()
{
    level.change_chew_explosion_func = ::change_chew_explosion;
    var_0 = getdvar( "ui_mapname" );

    if ( var_0 == "cp_town" || var_0 == "cp_final" )
        _id_96C7( "perk_machine_change" );
}

delay_rotate_func( var_0 )
{
    wait( var_0 );
    var_1 = getent( "change_chews_lower", "targetname" );

    if ( isdefined( var_1 ) )
    {
        var_2 = getdvar( "ui_mapname" );

        if ( var_2 == "cp_town" )
        {
            var_1.angles = ( 0, 276, 0 );
            level thread rotate_loop_by_targetname( "change_chews_upper", ( 0, 276, 0 ), ( 348, 276, 0 ) );
        }

        if ( var_2 == "cp_final" )
        {
            var_1.angles = ( 0, 156, 0 );
            level thread rotate_loop_by_targetname( "change_chews_upper", ( 0, 156, 0 ), ( 348, 156, 0 ) );
        }
    }
}

rotate_loop_by_targetname( var_0, var_1, var_2 )
{
    var_3 = getent( var_0, "targetname" );

    for (;;)
    {
        var_3 rotateto( var_2, 1 );
        var_3 waittill( "rotatedone" );
        var_3 rotateto( var_1, 1 );
        var_3 waittill( "rotatedone" );
    }
}

_id_96C7( var_0 )
{
    var_1 = scripts\engine\utility::_id_8180( var_0, "script_noteworthy" );

    foreach ( var_4, var_3 in var_1 )
        var_3 thread _id_E4A2( var_4 );
}

_id_E4A2( var_0 )
{
    var_1 = undefined;

    if ( isdefined( self._id_0334 ) )
    {
        self._id_01B9 = getent( self._id_0334, "targetname" );
        self._id_01B9 setlightintensity( 0 );
    }

    _id_96C6();
    scripts\engine\utility::_id_6E4C( "player_count_determined" );

    if ( self.script_noteworthy == "perk_machine_revive" && ( _id_0A77::_id_9F02() || level._id_C552 ) )
    {
        if ( var_0 > 0 )
            wait( 0.1 * var_0 );

        _id_12987();
    }
    else if ( scripts\engine\utility::_id_9CEE( self._id_E1B9 ) && isdefined( self._id_D71C ) )
    {
        for (;;)
        {
            var_2 = level scripts\engine\utility::_id_13735( "power_on", self._id_D71C + " power_on", "power_off" );

            if ( var_2 == "power_off" )
            {
                _id_1295E();
                continue;
            }

            if ( var_0 > 0 )
                wait( 0.1 * var_0 );

            _id_12987();
        }
    }
    else
    {
        if ( var_0 > 0 )
            wait( 0.1 * var_0 );

        _id_12987();
    }
}

_id_12987()
{
    self._id_D776 = 1;

    if ( _id_0A77::map_check( 0 ) )
        level thread _id_0A6A::_id_1769( "dj_perkstation_use_nag", "zmb_dj_vo", 60, 15, 3, 0 );

    foreach ( var_1 in level.players )
        var_1 thread _id_0A6A::_id_1769( "nag_try_perk", "zmb_comment_vo", 60, 270, 6, 1 );

    var_3 = "mus_zmb_tuffnuff_purchase";

    switch ( self.script_noteworthy )
    {
        case "perk_machine_revive":
            var_3 = "mus_zmb_upnatoms_attract";
            break;
        case "perk_machine_flash":
            var_3 = "mus_zmb_quickies_attract";
            break;
        case "perk_machine_more":
            var_3 = "mus_zmb_mulemunchies_attract";
            break;
        case "perk_machine_rat_a_tat":
            var_3 = "mus_zmb_bangbangs_attract";
            break;
        case "perk_machine_run":
            var_3 = "mus_zmb_racinstripes_attract";
            break;
        case "perk_machine_fwoosh":
            var_3 = "mus_zmb_trailblazer_attract";
            break;
        case "perk_machine_smack":
            var_3 = "mus_zmb_slappytaffy_attract";
            break;
        case "perk_machine_zap":
            var_3 = "mus_zmb_bluebolts_attract";
            break;
        case "perk_machine_boom":
            var_3 = "mus_zmb_bombstoppers_attract";
            break;
        case "perk_machine_deadeye":
            var_3 = "mus_zmb_deadeye_attract";
            break;
        case "perk_machine_change":
            var_3 = "mus_zmb_changechews_attract";
            break;
    }

    level _id_0A61::_id_1752( var_3, self._id_CA48.origin + ( 0, 0, 50 ), 120, 120, 250000, 100, 10 );

    if ( isdefined( self._id_D71C ) && self._id_D71C == "disco_bottom" )
    {
        var_4 = spawn( "script_origin", ( -1647, 3091, 1236 ) );
        playloopsound( ( -1647, 3091, 1236 ), "power_buy_neon_vending_turn_on" );
        wait 0.05;
        var_4 playloopsound( "power_buy_neon_vending_lp" );
    }

    if ( isdefined( self._id_01B9 ) )
    {
        var_5 = 1;

        if ( isdefined( self._id_01B9._id_EDED ) )
            var_5 = self._id_01B9._id_EDED;

        for ( var_6 = 0; var_6 < 4; var_6++ )
        {
            self._id_01B9 setlightintensity( var_5 );

            if ( isdefined( self._id_CA48 ) )
                self._id_CA48 setscriptablepartstate( "perk_sign", "powered_on" );

            wait( randomfloat( 1 ) );

            if ( isdefined( self._id_CA48 ) )
                self._id_CA48 setscriptablepartstate( "perk_sign", "off" );

            self._id_01B9 setlightintensity( 0 );
            wait( randomfloat( 1 ) );
        }

        var_5 = 1;

        if ( isdefined( self._id_01B9._id_EDED ) )
            var_5 = self._id_01B9._id_EDED;

        self._id_01B9 setlightintensity( var_5 );
    }

    if ( isdefined( self._id_CA48 ) )
        self._id_CA48 setscriptablepartstate( "perk_sign", "powered_on" );

    if ( self._id_CA4C == "perk_machine_revive" )
    {
        wait 1;
        self._id_CA48 setscriptablepartstate( "perk_sign", "up" );
    }

    if ( self._id_CA4C == "perk_machine_change" )
        delay_rotate_func( 10 );
}

_id_1295E()
{
    if ( isdefined( self._id_01B9 ) )
        self._id_01B9 setlightintensity( 0 );

    self._id_D776 = 0;
}

_id_96C6()
{
    self._id_CA4C = self.script_noteworthy;
    self._id_A921 = [];
    var_0 = _id_7831( self._id_CA4C );
    self._id_CA48 = scripts\engine\utility::_id_7E2E( self.origin, var_0 );

    if ( isdefined( self._id_CA48 ) )
    {
        self._id_CA48 setscriptablepartstate( "perk_sign", "off" );
        self._id_CA48 _meth_8318( 1 );
    }
}

_id_7831( var_0 )
{
    var_1 = "";

    switch ( var_0 )
    {
        case "perk_machine_revive":
            var_1 = "perk_machine_up_n_atoms_sign";
            break;
        case "perk_machine_tough":
            var_1 = "perk_machine_tuff_nuff_sign";
            break;
        case "perk_machine_run":
            var_1 = "perk_machine_racin_stripes_sign";
            break;
        case "perk_machine_flash":
            var_1 = "perk_machine_quickies_sign";
            break;
        case "perk_machine_more":
            var_1 = "perk_machine_mule_munchies_sign";
            break;
        case "perk_machine_rat_a_tat":
            var_1 = "perk_machine_bang_bangs_sign";
            break;
        case "perk_machine_boom":
            var_1 = "perk_machine_bombstoppers_sign";
            break;
        case "perk_machine_zap":
            var_1 = "perk_machine_blue_bolts_sign";
            break;
        case "perk_machine_fwoosh":
            var_1 = "perk_machine_trail_blazers_sign";
            break;
        case "perk_machine_smack":
            var_1 = "perk_machine_slappy_taffy_sign";
            break;
        case "perk_machine_deadeye":
            var_1 = "perk_machine_deadeye_sign";
            break;
        case "perk_machine_change":
            var_1 = "perk_machine_change_chews_sign";
            break;
        default:
            break;
    }

    return getentitylessscriptablearrayinradius( var_1, "targetname" );
}

_id_15DE( var_0, var_1 )
{
    var_1 endon( "disconnect" );
    var_2 = [];

    if ( isdefined( var_0.script_noteworthy ) )
        var_2 = strtok( var_0.script_noteworthy, "_" );

    if ( isdefined( var_0._id_A921 ) && isdefined( var_0._id_A921[var_1.name] ) )
        return;

    var_3 = scripts\engine\utility::_id_9CEE( var_2[0] == "crafted" );

    if ( !var_3 && var_1 _id_0A77::_id_8BBE( var_0._id_CA4C ) )
    {
        if ( soundexists( "perk_machine_remove_perk" ) )
            var_1 playlocalsound( "perk_machine_remove_perk" );

        if ( var_0._id_CA4C == "perk_machine_revive" )
            var_1._id_F1E7--;

        var_1 _id_1145C( var_0._id_CA4C );
        var_1 _id_0A59::_id_DE6E();
        return;
    }

    if ( isdefined( var_1._id_13FA4 ) && var_1._id_13FA4.size > 4 && !scripts\engine\utility::_id_9CEE( var_1.have_gns_perk ) )
        return;

    if ( var_1 _id_0A77::_id_8BBE( var_0._id_CA4C ) )
        return;

    level thread _id_1295C( var_0, var_1, 2000 );
    level thread _id_CDC2( var_0, var_1 );
    _id_0A6A::_id_E01F( "dj_perkstation_use_nag" );

    if ( var_1 _id_0A77::_id_9BA0( "perk_refund" ) && !var_3 )
    {
        var_1 _id_0A63::_id_82F9( 1000, undefined, undefined, 1, "bonus" );
        var_1 _id_0A77::_id_C151( "perk_refund" );
    }

    var_1 _id_CDC0( var_0._id_CA4C );
    var_1 _id_834E( var_0._id_CA4C, 1 );
}

activate_perk_machine_gesture_second( var_0, var_1 )
{
    var_1 endon( "disconnect" );
    var_2 = [];

    if ( isdefined( var_0.script_noteworthy ) )
        var_2 = strtok( var_0.script_noteworthy, "_" );

    if ( isdefined( var_0._id_A921 ) && isdefined( var_0._id_A921[var_1.name] ) )
        return;

    var_3 = scripts\engine\utility::_id_9CEE( var_2[0] == "crafted" );

    if ( !var_3 && var_1 _id_0A77::_id_8BBE( var_0._id_CA4C ) )
    {
        if ( soundexists( "perk_machine_remove_perk" ) )
            var_1 playlocalsound( "perk_machine_remove_perk" );

        if ( var_0._id_CA4C == "perk_machine_revive" )
            var_1._id_F1E7--;

        var_1 _id_1145C( var_0._id_CA4C );
        var_1 _id_0A59::_id_DE6E();
        return;
    }

    if ( isdefined( var_1._id_13FA4 ) && var_1._id_13FA4.size > 4 )
        return;

    if ( var_1 _id_0A77::_id_8BBE( var_0._id_CA4C ) )
        return;

    level thread _id_1295C( var_0, var_1, 2000 );
    level thread _id_CDC2( var_0, var_1 );
    _id_0A6A::_id_E01F( "dj_perkstation_use_nag" );

    if ( var_1 _id_0A77::_id_9BA0( "perk_refund" ) && !var_3 )
    {
        var_1 _id_0A63::_id_82F9( 1000, undefined, undefined, 1, "bonus" );
        var_1 _id_0A77::_id_C151( "perk_refund" );
    }

    var_1 _id_834E( var_0._id_CA4C, 1 );
    wait 1;
    var_1 _id_CDC0( var_0._id_CA4C );
}

_id_834E( var_0, var_1 )
{
    if ( !isdefined( self._id_13FA4 ) )
        self._id_13FA4 = [];

    self._id_13FA4[var_0] = 1;
    _id_0D45::_id_AF80( level._id_13BD3, var_0 );
    _id_0A63::increment_player_career_perks_used( self );
    self [[ level._id_462C[var_0]._id_F286 ]]();

    if ( isdefined( self.sub_perks ) && isdefined( self.sub_perks[var_0] ) )
        var_0 = self.sub_perks[var_0];

    thread _id_F5DC( var_0 );

    if ( scripts\engine\utility::_id_9CEE( var_1 ) )
        _id_0A5E::_id_D9AD( "mt_purchase_perks" );

    if ( isdefined( level.additional_give_perk ) )
        self [[ level.additional_give_perk ]]( var_0 );

    return 1;
}

give_zombies_perk_immediate( var_0, var_1 )
{
    if ( _id_0A77::_id_8BBE( var_0 ) )
        return;

    if ( !isdefined( self._id_13FA4 ) )
        self._id_13FA4 = [];

    self._id_13FA4[var_0] = 1;
    self [[ level._id_462C[var_0]._id_F286 ]]();

    if ( isdefined( self.sub_perks ) && isdefined( self.sub_perks[var_0] ) )
        var_0 = self.sub_perks[var_0];

    if ( scripts\engine\utility::_id_9CEE( var_1 ) )
        thread _id_F5DC( var_0 );

    return 1;
}

_id_CDC2( var_0, var_1 )
{
    var_2 = [];
    var_3 = "";

    switch ( var_0.name )
    {
        case "perk_machine_revive":
            var_2 = [ "mus_zmb_upnatoms_purchase" ];

            if ( level.players.size < 2 )
                var_3 = "purchase_perk_revive_solo";
            else
                var_3 = "purchase_perk_upnatoms";

            break;
        case "perk_machine_more":
            var_2 = [ "mus_zmb_mulemunchies_purchase" ];
            var_3 = "purchase_perk_nulemunchies";
            break;
        case "perk_machine_run":
            var_2 = [ "mus_zmb_racinstripes_purchase" ];
            var_3 = "purchase_perk_racinstripes";
            break;
        case "perk_machine_flash":
            var_2 = [ "mus_zmb_quickies_purchase" ];
            var_3 = "purchase_perk_quickies";
            break;
        case "perk_machine_tough":
            var_2 = [ "mus_zmb_tuffnuff_purchase" ];
            var_3 = "purchase_perk_tuffnuff";
            break;
        case "perk_machine_rat_a_tat":
            var_2 = [ "mus_zmb_bangbangs_purchase" ];
            var_3 = "purchase_perk_bangbangs";
            break;
        case "perk_machine_fwoosh":
            var_2 = [ "mus_zmb_trailblazer_purchase" ];
            var_3 = "purchase_perk_trailblazers";
            break;
        case "perk_machine_smack":
            var_2 = [ "mus_zmb_slappytaffy_purchase" ];
            var_3 = "purchase_perk_slappytaffy";
            break;
        case "perk_machine_boom":
            var_2 = [ "mus_zmb_bombstoppers_purchase" ];
            var_3 = "purchase_perk_bombstoppers";
            break;
        case "perk_machine_zap":
            var_2 = [ "mus_zmb_bluebolts_purchase" ];
            var_3 = "purchase_perk_bluebolts";
            break;
        case "perk_machine_deadeye":
            var_2 = [ "mus_zmb_deadeye_purchase" ];
            var_3 = "purchase_perk_deadeyedewdrop";
            break;
        case "perk_machine_change":
            var_2 = [ "mus_zmb_changechews_purchase" ];
            var_3 = "purchase_perk_changechews";
            break;
    }

    var_1 thread _id_0A6A::_id_12885( var_3, "zmb_comment_vo", "low", 10, 0, 1, 0, 50 );
    var_1 thread play_perk_vo_additional( var_3 );

    if ( !var_2.size )
        return undefined;

    var_4 = scripts\engine\utility::_id_DC6B( var_2 );

    if ( isdefined( var_4 ) && soundexists( var_4 ) )
    {
        playloopsound( var_0.origin, var_4 );
        var_5 = lookupsoundlength( var_4 );
        wait( var_5 / 1000 );
    }
}

play_perk_vo_additional( var_0 )
{
    wait( _id_0A6A::_id_7C76( self._id_134FD + var_0 ) + 5.0 );
    thread _id_0A6A::_id_12885( "purchase_perk", "zmb_comment_vo" );
}

_id_CDC1( var_0, var_1 )
{
    if ( soundexists( "perk_machine_deny" ) )
        var_1 playlocalsound( "perk_machine_deny" );
}

_id_F5DC( var_0 )
{
    var_1 = tablelookup( "cp/zombies/zombie_perks_bit_mask_table.csv", 1, var_0, 0 );
    var_2 = int( var_1 );
    self _meth_82BE( "zm_active_perks", var_2 - 1, 1 );
}

_id_CDC0( var_0 )
{
    if ( isdefined( self.disableplunger ) || isdefined( self.disablecrank ) )
    {
        self notify( "end_cutie_gesture_loop" );
        wait 0.05;
    }

    self playlocalsound( "perk_purchase_foley_candy_box" );
    self.playingperkgesture = 1;
    var_1 = "iw7_candybang_zm";

    switch ( var_0 )
    {
        case "perk_machine_boom":
            var_1 = "iw7_candybomb_zm";
            break;
        case "perk_machine_zap":
            var_1 = "iw7_candyblue_zm";
            break;
        case "perk_machine_fwoosh":
            var_1 = "iw7_candytrail_zm";
            break;
        case "perk_machine_revive":
            var_1 = "iw7_candyup_zm";
            break;
        case "perk_machine_flash":
            var_1 = "iw7_candyquickies_zm";
            break;
        case "perk_machine_tough":
            var_1 = "iw7_candytuff_zm";
            break;
        case "perk_machine_smack":
            var_1 = "iw7_candyslappy_zm";
            break;
        case "perk_machine_more":
            var_1 = "iw7_candymule_zm";
            break;
        case "perk_machine_run":
            var_1 = "iw7_candyracin_zm";
            break;
        case "perk_machine_rat_a_tat":
            var_1 = "iw7_candybang_zm";
            break;
        case "perk_machine_deadeye":
            var_1 = "iw7_candydeadeye_zm";
            break;
        case "perk_machine_change":
            var_1 = "iw7_candychange_zm";
            break;
    }

    thread _id_0A77::firegesturegrenade( self, var_1 );

    while ( self _meth_8115() == var_1 )
        wait 0.1;

    self.playingperkgesture = undefined;
}

_id_1145C( var_0 )
{
    if ( !_id_0A77::_id_8BBE( var_0 ) )
        return 0;

    var_1 = var_0;

    if ( isdefined( self.sub_perks ) && isdefined( self.sub_perks[var_0] ) )
        var_1 = self.sub_perks[var_0];

    _id_0D45::_id_AF81( level._id_13BD3, var_0 );
    self [[ level._id_462C[var_0]._id_12BF4 ]]();
    var_2 = tablelookup( "cp/zombies/zombie_perks_bit_mask_table.csv", 1, var_1, 0 );
    var_3 = int( var_2 );
    self _meth_82BE( "zm_active_perks", var_3 - 1, 0 );

    if ( isdefined( level.take_perks_func ) )
        self [[ level.take_perks_func ]]( var_0 );

    return 1;
}

sawblade_perk_animation()
{
    self setclientomnvar( "zombie_coaster_ticket_earned", 1 );
    wait 3.0;
    self setclientomnvar( "zombie_coaster_ticket_earned", -1 );
}

take_zombies_perk_immediate( var_0 )
{
    if ( !_id_0A77::_id_8BBE( var_0 ) )
        return 0;

    self [[ level._id_462C[var_0]._id_12BF4 ]]();
    var_1 = var_0;

    if ( isdefined( self.sub_perks ) && isdefined( self.sub_perks[var_0] ) )
        var_1 = self.sub_perks[var_0];

    var_2 = tablelookup( "cp/zombies/zombie_perks_bit_mask_table.csv", 1, var_1, 0 );
    var_3 = int( var_2 );
    self _meth_82BE( "zm_active_perks", var_3 - 1, 0 );
    return 1;
}

_id_9011( var_0, var_1 )
{
    if ( !scripts\engine\utility::_id_9CEE( var_0._id_D776 ) )
    {
        if ( isdefined( level.needspowerstring ) )
            return level.needspowerstring;
        else
            return &"COOP_INTERACTIONS_REQUIRES_POWER";
    }

    if ( isdefined( var_0._id_A921 ) && isdefined( var_0._id_A921[var_1.name] ) )
        return "";

    if ( var_1 _id_0A77::_id_8BBE( var_0._id_CA4C ) )
        return &"COOP_PERK_MACHINES_REMOVE_PERK";

    if ( isdefined( self._id_13FA4 ) && self._id_13FA4.size > 4 && !scripts\engine\utility::_id_9CEE( self.have_gns_perk ) )
        return &"COOP_PERK_MACHINES_PERK_SLOTS_FULL";

    if ( var_0.script_noteworthy == "perk_machine_revive" && ( _id_0A77::_id_9F02() || level._id_C552 ) )
        return &"COOP_PERK_MACHINES_SELF_REVIVE";

    return level._id_9A12[var_0.script_noteworthy];
}

_id_1295C( var_0, var_1, var_2 )
{
    var_3 = gettime();
    var_0._id_A921[var_1.name] = var_3;

    while ( gettime() - var_3 < var_2 )
        wait 0.1;

    var_0._id_A921[var_1.name] = undefined;
}

_id_8341()
{
    level notify( "tough_purchased", self );
    self._id_CA2F["health"]._id_B43C = 200;
    self.maxhealth = self._id_CA2F["health"]._id_B43C;
    self.health = self.maxhealth;
    self notify( "health_perk_upgrade" );
}

_id_11458()
{
    self._id_CA2F["health"]._id_B43C = 100;

    if ( self.health > self._id_CA2F["health"]._id_B43C )
        self.health = self._id_CA2F["health"]._id_B43C;

    self.maxhealth = self._id_CA2F["health"]._id_B43C;
    _id_E0B3( "perk_machine_tough" );
}

_id_8327()
{
    if ( ( _id_0A77::_id_9F02() || level._id_C552 ) && self._id_F1E7 < self.max_self_revive_machine_use )
    {
        _id_0A5B::_id_F44A( self, 1 );
        thread _id_B2E6();
        self._id_F1E7++;
    }
    else
        self._id_CA2F["medic"]._id_E4A5 = 2.0;
}

_id_187B()
{
    self endon( "turn_off_self_revive" );
    self endon( "self_revive_removed" );

    for (;;)
    {
        level scripts\engine\utility::waittill_any( "player_spawned", "disconnected" );
        self notify( "remove_self_revive" );
    }
}

_id_B2E6()
{
    self endon( "turn_off_self_revive" );
    var_0 = scripts\engine\utility::_id_13734( "last_stand", "death", "remove_self_revive" );

    if ( var_0 == "last_stand" )
    {
        self waittill( "revive" );
        _id_1145C( "perk_machine_revive" );
    }
    else
        _id_1145C( "perk_machine_revive" );

    self notify( "self_revive_removed" );
}

_id_1144F()
{
    if ( !_id_0A77::_id_9F02() && !level._id_C552 )
        self._id_CA2F["medic"]._id_E4A5 = 1.0;
    else if ( _id_0A77::_id_9F02() || level._id_C552 )
        _id_0A5B::_id_F44A( self, 0 );

    _id_E0B3( "perk_machine_revive" );
}

_id_12E1D()
{
    foreach ( var_1 in level.players )
    {
        if ( var_1 _id_0A77::_id_8BBE( "perk_machine_revive" ) )
        {
            var_1 notify( "turn_off_self_revive" );
            var_1 _id_0A5B::_id_F44A( var_1, 0 );
            var_1._id_CA2F["medic"]._id_E4A5 = 2.0;
        }
    }
}

give_deadeye_perk()
{
    self.old_view_kick_scale = self _meth_816C();
    self _meth_8368( 0 );
    self _meth_822D( 0 );
    self _meth_829B( 0.1 );
    self._id_C53B = 1;
    _id_0A77::giveperk( "specialty_quickdraw" );
    _id_0A77::giveperk( "specialty_bulletaccuracy" );
    _id_0A77::_id_13D1( "specialty_autoaimhead" );
    thread run_deadeye_charge_watcher();
}

take_deadeye_perk()
{
    self _meth_8368( self.old_view_kick_scale );
    self _meth_822D( 100 );
    self _meth_829B( 1.0 );
    self._id_C53B = undefined;
    _id_0A77::_id_1430( "specialty_quickdraw" );
    _id_0A77::_id_1430( "specialty_autoaimhead" );
    _id_0A77::_id_1430( "specialty_bulletaccuracy" );
    self notify( "end_deadeye_charge_watcher" );
    self.deadeye_charge = undefined;
    _id_E0B3( "perk_machine_deadeye" );
}

run_deadeye_charge_watcher()
{
    self endon( "disconnect" );
    self endon( "end_deadeye_charge_watcher" );
    self.deadeye_charge = undefined;
    var_0 = undefined;
    var_1 = undefined;

    for (;;)
    {
        var_2 = _id_0A77::getweapontoswitchbackto();
        var_3 = _id_9B58( var_2 );

        if ( self adsbuttonpressed() && !scripts\engine\utility::_id_9CEE( self.no_deadeye ) && !var_3 )
        {
            var_4 = gettime();

            if ( !isdefined( var_0 ) )
            {
                var_0 = var_4;
                var_1 = var_4 + 2000;
            }
            else if ( var_4 > var_1 )
            {
                if ( !scripts\engine\utility::_id_9CEE( self.deadeye_charge ) )
                {
                    self setclientomnvar( "damage_feedback", "pink_arcane_cp" );
                    self setclientomnvar( "damage_feedback_notify", gettime() );
                    self playlocalsound( "gauntlet_armory_hack_wrist_second" );
                }

                self.deadeye_charge = 1;
            }
        }
        else
        {
            self.deadeye_charge = undefined;
            var_0 = undefined;
            var_1 = undefined;
        }

        scripts\engine\utility::waitframe();
    }
}

give_change_perk()
{
    var_0 = randomintrange( 1, 5 );
    self.sub_perks["perk_machine_change"] = "perk_machine_change" + var_0;
    thread wait_for_change_chews_update();
}

take_change_perk()
{
    self notify( "stop_change_chews_update" );
    self.sub_perks["perk_machine_change"] = undefined;
    _id_E0B3( "perk_machine_change" );
}

wait_for_change_chews_update()
{
    self endon( "stop_change_chews_update" );
    self endon( "disconnect" );

    for (;;)
    {
        self waittill( "change_chews_damage", var_0, var_1 );

        if ( var_1 > 30 )
            continue;

        if ( scripts\engine\utility::_id_9CEE( self.playing_ghosts_n_skulls ) )
            continue;

        if ( isdefined( self.sub_perks ) && isdefined( self.sub_perks["perk_machine_change"] ) )
        {
            var_2 = self.sub_perks["perk_machine_change"];
            var_3 = tablelookup( "cp/zombies/zombie_perks_bit_mask_table.csv", 1, var_2, 0 );
            var_4 = int( var_3 );
            self _meth_82BE( "zm_active_perks", var_4 - 1, 0 );
        }

        update_change_chews_sub_perk();

        if ( isdefined( self.sub_perks ) && isdefined( self.sub_perks["perk_machine_change"] ) )
        {
            var_2 = self.sub_perks["perk_machine_change"];
            thread _id_F5DC( var_2 );
        }

        while ( self.health < 31 )
            wait 0.1;

        wait 0.1;
    }
}

update_change_chews_sub_perk()
{
    var_0 = self.sub_perks["perk_machine_change"];
    var_1 = 1;

    switch ( var_0 )
    {
        case "perk_machine_change1":
            var_1 = 1;
            break;
        case "perk_machine_change2":
            var_1 = 2;
            break;
        case "perk_machine_change3":
            var_1 = 3;
            break;
        case "perk_machine_change4":
            var_1 = 4;
            break;
        default:
            break;
    }

    var_2 = var_1 + 1;

    if ( var_2 > 4 )
        var_2 = 1;

    self.sub_perks["perk_machine_change"] = "perk_machine_change" + var_2;
}

change_chew_explosion( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_6 = scripts\engine\utility::_id_9D74( var_3 ) || var_3 == "MOD_EXPLOSIVE_BULLET" && var_5 != "none";

    if ( !var_6 )
        return;

    if ( !_id_0A77::isheadshot( var_4, var_5, var_3, var_0 ) )
        return;

    if ( !isdefined( self.agent_type ) || self.agent_type != "generic_zombie" )
        return;

    thread _id_6996( var_0, var_5, var_2, undefined, undefined );
}

_id_6995( var_0, var_1, var_2, var_3 )
{
    var_4 = _id_0A77::_id_13C90( var_3, "pap1" ) || _id_0A77::_id_13C90( var_3, "pap2" );
    var_5 = var_3;
    var_6 = [];
    var_6 = level._id_1084F;
    var_7 = [ var_2 ];
    var_8 = 150;

    if ( var_4 )
        var_8 = 300;

    var_9 = scripts\engine\utility::_id_782F( var_1, var_6, var_7, undefined, var_8, 0 );

    foreach ( var_11 in var_9 )
    {
        if ( isdefined( var_11.agent_type ) && ( var_11.agent_type == "crab_mini" || var_11.agent_type == "crab_brute" ) )
            var_12 = 100;
        else
            var_12 = 100000;

        var_11 _meth_80B0( var_12, var_1, var_0, var_0, "MOD_EXPLOSIVE", var_5 );
    }
}

_id_6996( var_0, var_1, var_2, var_3, var_4 )
{
    self._id_8C5F = 1;
    var_4 = self gettagorigin( "J_Spine4" );

    foreach ( var_6 in level.players )
    {
        if ( distance( var_6.origin, var_4 ) <= 350 )
            var_6 thread _id_0D63::_id_10142();
    }

    if ( isdefined( self._id_8C98 ) )
        self _meth_8096( self._id_8C98 );

    self setscriptablepartstate( "head", "hide" );
}

_id_82CD()
{
    level notify( "quickies_purchased", self );
    _id_0A77::giveperk( "specialty_fastreload" );
    _id_0A77::giveperk( "specialty_quickswap" );
}

_id_11437()
{
    _id_0A77::_id_1430( "specialty_fastreload" );
    _id_0A77::_id_1430( "specialty_quickswap" );
    _id_E0B3( "perk_machine_flash" );
}

_id_82EE()
{
    self._id_CA2F["pistol"]._id_CBDB = 1;
    thread _id_AD5A();
}

_id_AD5A()
{
    self endon( "mule_munchies_sold" );
    self endon( "disconnect" );

    for (;;)
    {
        self waittill( "weapon_change" );
        var_0 = self getcurrentprimaryweapon();
        var_1 = _id_78F5();

        if ( var_1.size > 3 )
        {
            var_0 = self getcurrentprimaryweapon();

            if ( var_0 == var_1[var_1.size - 1] )
            {
                self setclientomnvar( "zm_mule_munchies_weapon_icon", 1 );
                self.mule_weapon = var_0;
            }
            else
                self setclientomnvar( "zm_mule_munchies_weapon_icon", 0 );

            continue;
        }

        self setclientomnvar( "zm_mule_munchies_weapon_icon", 0 );
    }
}

_id_11441()
{
    self._id_CA2F["pistol"]._id_CBDB = 0;
    var_0 = _id_78F5();
    var_1 = 0;
    var_2 = _id_0A77::getvalidtakeweapon();

    if ( var_0.size > 3 )
    {
        var_3 = var_0[var_0.size - 1];

        if ( var_3 == var_2 )
            var_1 = 1;

        self _meth_83B8( var_3 );

        if ( var_1 )
            self _meth_83B6( var_0[var_0.size - 2] );
    }

    self.mule_weapon = undefined;
    _id_0A77::_id_12EBE();
    _id_E0B3( "perk_machine_more" );
    self notify( "mule_munchies_sold" );
    self setclientomnvar( "zm_mule_munchies_weapon_icon", 0 );
}

_id_78F5()
{
    var_0 = [];
    var_1 = self getweaponslistprimaries();

    for ( var_2 = 0; var_2 < var_1.size; var_2++ )
    {
        if ( var_1[var_2] == "iw7_gunless_zm" )
            continue;

        if ( var_1[var_2] == "iw7_entangler_zm" )
            continue;

        if ( var_1[var_2] == "iw7_entangler2_zm" )
            continue;

        var_3 = strtok( var_1[var_2], "_" );

        if ( var_3[0] != "alt" )
            var_0[var_0.size] = var_1[var_2];
    }

    return var_0;
}

_id_8326()
{
    level notify( "bangbangs_purchased", self );
    self._id_CA2F["damagemod"]._id_3237 = 2.0;
    var_0 = self getweaponslistprimaries();
    var_1 = _id_0A77::getweapontoswitchbackto();

    foreach ( var_3 in var_0 )
    {
        if ( issubstr( var_3, "alt" ) || issubstr( var_3, "knife" ) || issubstr( var_3, "entangler" ) )
            continue;

        var_4 = getweaponattachments( var_3 );
        var_5 = _id_0A77::getcurrentcamoname( var_3 );
        var_6 = _id_0A6B::_id_E469( var_3, "doubletap", var_4, 1, var_5 );
        var_7 = _id_9B58( var_6 );

        if ( isdefined( var_6 ) )
        {
            var_8 = undefined;
            var_9 = undefined;
            var_10 = self getweaponammoclip( var_3 );
            var_11 = self getweaponammostock( var_3 );

            if ( var_7 )
            {
                var_8 = self getweaponammoclip( var_3, "left" );
                var_9 = self getweaponammoclip( var_3, "right" );
            }

            self _meth_83B8( var_3 );
            var_6 = _id_0A77::_id_12C6( var_6, undefined, undefined, 1 );

            if ( var_7 )
            {
                if ( issubstr( var_6, "akimbofmg" ) )
                    self setweaponammoclip( var_6, var_8 + var_9 );
                else
                {
                    self setweaponammoclip( var_6, var_8, "left" );
                    self setweaponammoclip( var_6, var_9, "right" );
                }
            }
            else
                self setweaponammoclip( var_6, var_10 );

            self setweaponammostock( var_6, var_11 );

            if ( getweaponbasename( var_6 ) == getweaponbasename( var_1 ) )
                var_1 = var_6;
        }
    }

    if ( !scripts\engine\utility::_id_9CEE( self.kung_fu_mode ) )
        self _meth_83B6( var_1 );
}

_id_9B58( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    var_1 = issubstr( var_0, "akimbo" );

    if ( !var_1 )
        var_1 = issubstr( var_0, "g18pap2" );

    return var_1;
}

_id_1144D()
{
    self._id_CA2F["damagemod"]._id_3237 = 1.0;
    _id_E0B3( "perk_machine_rat_a_tat" );

    if ( isdefined( level._id_1D48 ) && scripts\engine\utility::array_contains( level._id_1D48, getweaponbasename( self getcurrentweapon() ) ) )
        var_0 = self getcurrentweapon();
    else
        var_0 = self getcurrentprimaryweapon();

    var_1 = self getweaponslistprimaries();
    self.bang_bangs = 1;

    foreach ( var_3 in var_1 )
    {
        if ( issubstr( var_3, "alt" ) || issubstr( var_3, "knife" ) )
            continue;

        if ( scripts\engine\utility::array_contains( level._id_17D7, var_3 ) )
            continue;

        var_4 = _id_9B58( var_3 );
        var_5 = self getweaponammostock( var_3 );
        var_6 = self getweaponammoclip( var_3 );
        var_7 = undefined;
        var_8 = undefined;

        if ( var_4 )
        {
            var_7 = self getweaponammoclip( var_3, "left" );
            var_8 = self getweaponammoclip( var_3, "right" );
        }

        self _meth_83B8( var_3 );
        var_9 = getweaponattachments( var_3 );
        var_10 = _id_0A77::getcurrentcamoname( var_3 );

        if ( scripts\engine\utility::array_contains( var_9, "doubletap" ) )
            var_9 = scripts\engine\utility::array_remove( var_9, "doubletap" );

        if ( scripts\engine\utility::array_contains( self._id_E603, getweaponbasename( var_3 ) ) )
            var_9[var_9.size] = "rof";

        var_11 = _id_0A6B::_id_E469( var_3, undefined, var_9, undefined, var_10 );
        var_11 = _id_0A77::_id_12C6( var_11, undefined, undefined, 1 );

        if ( isdefined( var_11 ) )
        {
            if ( var_4 )
            {
                if ( issubstr( var_11, "akimbofmg" ) )
                    self setweaponammoclip( var_11, var_7 + var_8 );
                else
                {
                    self setweaponammoclip( var_11, var_7, "left" );
                    self setweaponammoclip( var_11, var_8, "right" );
                }
            }
            else
                self setweaponammoclip( var_11, var_6 );

            self setweaponammostock( var_11, var_5 );
        }

        if ( getweaponbasename( var_11 ) == getweaponbasename( var_0 ) )
            var_0 = var_11;
    }

    self _meth_83B5( var_0 );
    self.bang_bangs = undefined;
}

_id_E7E8()
{
    self endon( "remove_perk_icon_perk_machine_rat_a_tat" );

    for (;;)
    {
        self waittill( "weapon_fired" );
        var_0 = self getcurrentweapon();
        var_1 = self getcurrentweaponclipammo();
        var_1 = var_1 - 1;
        self setweaponammoclip( var_0, var_1 );
    }
}

_id_832B()
{
    level notify( "racingstripes_purchased", self );
    _id_0A77::giveperk( "specialty_longersprint" );
    _id_0A77::giveperk( "specialty_sprintfire" );

    if ( isdefined( level.player_run_suit ) )
        self _meth_845A( level.player_run_suit );
    else
        self _meth_845A( "zom_suit_sprint" );
}

_id_11451()
{
    _id_0A77::_id_1430( "specialty_longersprint" );
    _id_0A77::_id_1430( "specialty_sprintfire" );

    if ( isdefined( level.player_suit ) )
        self _meth_845A( level.player_suit );
    else
        self _meth_845A( "zom_suit" );

    _id_E0B3( "perk_machine_run" );
}

_id_82CE()
{
    thread _id_E7FA();
}

_id_11438()
{
    _id_E0B3( "perk_machine_fwoosh" );
}

_id_E7FA()
{
    self endon( "disconnect" );
    self endon( "remove_perk_icon_perk_machine_fwoosh" );

    for (;;)
    {
        self waittill( "sprint_slide_begin" );
        _id_48E9( 300 );
        var_0 = scripts\engine\utility::_id_137B9( "energy_replenished", 5 );
    }
}

_id_8331()
{
    level notify( "slappytaffy_purchased", self );
}

_id_11453()
{
    _id_E0B3( "perk_machine_smack" );
}

_id_834D()
{
    thread _id_E82F();
}

_id_1145B()
{
    _id_E0B3( "perk_machine_zap" );
}

_id_82A7()
{

}

_id_1142B()
{
    _id_E0B3( "perk_machine_boom" );
}

_id_E82F()
{
    self endon( "disconnect" );
    self endon( "remove_perk_icon_perk_machine_zap" );
    self.wait_on_reload = [];
    self.consecutive_zap_attacks = 0;

    for (;;)
    {
        self waittill( "reload_start" );
        var_0 = self getcurrentweapon();
        var_1 = weaponclipsize( var_0 );
        var_2 = self getweaponammoclip( var_0 );
        var_3 = ( var_1 - var_2 ) / var_1;
        var_4 = max( 1045 * var_3, 10 );
        var_5 = max( 128 * var_3, 48 );

        if ( scripts\engine\utility::array_contains( self.wait_on_reload, var_0 ) )
            continue;

        self.wait_on_reload[self.wait_on_reload.size] = var_0;
        self.consecutive_zap_attacks++;
        thread check_for_reload_complete( var_0 );

        if ( isdefined( self ) )
        {
            switch ( self.consecutive_zap_attacks )
            {
                case 1:
                case 0:
                    var_6 = undefined;
                    break;
                case 2:
                    var_6 = 8;
                    break;
                case 3:
                    var_6 = 4;
                    break;
                case 4:
                    var_6 = 2;
                    break;
                default:
                    var_6 = 0;
            }

            thread zap_cooldown_timer( var_0 );

            if ( isdefined( var_6 ) && var_6 == 0 )
                continue;

            _id_497F( var_5, var_4 );
        }
    }
}

zap_cooldown_timer( var_0 )
{
    self notify( "zap_cooldown_started" );
    self endon( "zap_cooldown_started" );
    self endon( "death" );
    self endon( "disconnect" );
    var_1 = 0.25;

    if ( _id_0A77::_id_8BBE( "perk_machine_flash" ) )
        var_1 = var_1 * getdvarfloat( "perk_weapReloadMultiplier" );

    var_2 = var_1 + 3;
    wait( var_2 );
    self.consecutive_zap_attacks = 0;
}

check_for_reload_complete( var_0 )
{
    self endon( "death" );
    self endon( "disconnect" );
    self endon( "player_lost_weapon_" + var_0 );
    thread weapon_replaced_monitor( var_0 );

    for (;;)
    {
        self waittill( "reload" );
        var_1 = self getcurrentweapon();

        if ( var_1 == var_0 )
        {
            self.wait_on_reload = scripts\engine\utility::array_remove( self.wait_on_reload, var_0 );
            self notify( "weapon_reload_complete_" + var_0 );
            break;
        }
    }
}

weapon_replaced_monitor( var_0 )
{
    self endon( "death" );
    self endon( "disconnect" );
    self endon( "weapon_reload_complete_" + var_0 );

    for (;;)
    {
        self waittill( "weapon_purchased" );
        var_1 = self getweaponslistprimaries();

        if ( !scripts\engine\utility::_id_693B( var_1, var_0 ) )
        {
            self notify( "player_lost_weapon_" + var_0 );
            self.wait_on_reload = scripts\engine\utility::array_remove( self.wait_on_reload, var_0 );
            break;
        }
    }
}

_id_497F( var_0, var_1 )
{
    var_2 = anglestoforward( self.angles );
    var_2 = vectornormalize( var_2 );
    var_2 = var_2 * 100;
    var_3 = "reload_zap_m";

    if ( var_0 < 72.0 )
        var_3 = "reload_zap_s";
    else if ( var_0 < 96.0 )
        var_3 = "reload_zap_m";

    playloopsound( self.origin, "perk_blue_bolts_sparks" );
    playfx( level._effect[var_3], self.origin + var_2 );
    var_3 = "reload_zap_screen";
    self notify( "blue_bolts_activated" );

    foreach ( var_5 in level.players )
    {
        if ( var_5 == self )
            playfxontagforclients( level._effect[var_3], self, "tag_eye", self );
    }

    wait 0.25;
    self _meth_8253( self.origin, var_0, var_1, var_1, self, "MOD_GRENADE_SPLASH", "iw7_bluebolts_zm" );
    var_7 = _id_0A4A::_id_7DB0( "axis" );
    var_8 = var_0 * var_0;

    foreach ( var_10 in level._id_1084F )
    {
        if ( !_id_0A77::_id_FF18( var_10 ) )
            continue;

        if ( distancesquared( var_10.origin, self.origin ) < var_8 )
            var_10 thread _id_13E63( 2, self );
    }
}

_id_13E63( var_0, var_1 )
{
    self endon( "death" );

    if ( !isdefined( self.agent_type ) )
        return;

    self._id_11196 = 1;

    if ( isdefined( level.special_zap_start_func ) )
        [[ level.special_zap_start_func ]]( var_1 );

    if ( self.agent_type != "alien_phantom" && self.agent_type != "alien_goon" && self.agent_type != "alien_rhino" && self.agent_type != "skeleton" )
        thread _id_0D53::_id_20E6( self );

    while ( var_0 > 0 )
    {
        self._id_11190 = gettime() + 1000;
        wait 0.1;
        self _meth_80B0( 1, self.origin, var_1, var_1, "MOD_GRENADE_SPLASH", "iw7_bluebolts_zm" );
        var_0 = var_0 - 1;
        wait 1;
    }

    self._id_11196 = undefined;

    if ( isdefined( level.special_zap_end_func ) )
        [[ level.special_zap_end_func ]]( var_1 );
}

_id_FF6B( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12, var_13 )
{
    if ( var_6 == "iw7_bluebolts_zm" )
    {
        if ( isdefined( var_2 ) && isplayer( var_2 ) && var_2 _id_0A77::_id_8BBE( "perk_machine_zap" ) )
            return 0;
    }

    return var_0;
}

_id_48E6( var_0 )
{
    var_1 = spawn( "trigger_radius", var_0, 1, 72, 20 );
    var_1._id_127BA = 0;
    var_2 = 1;
    var_3 = self _meth_816B();
    var_1._id_7542 = spawnfxforclient( level._effect["fire_cloud_1st"], var_0, self, var_3 );
    triggerfx( var_1._id_7542 );
    playloopsound( var_1.origin, "perk_fwoosh_fire_trail" );
    var_1 thread _id_3289( self );
    wait( var_2 );
    var_1 notify( "stop_burn_loop" );
    var_1._id_7542 delete();
    var_1 delete();
}

_id_48E7( var_0, var_1 )
{
    var_2 = spawn( "trigger_radius", var_0, 1, 72, 20 );
    var_2._id_127BA = 0;
    var_3 = 1;
    var_4 = var_1 _meth_816B();
    var_2._id_7542 = spawnfxforclient( level._effect["fire_cloud_3rd"], var_0, self, var_4 );
    triggerfx( var_2._id_7542 );
    wait( var_3 );
    var_2._id_7542 delete();
    var_2 delete();
}

_id_48E8( var_0 )
{
    self endon( "death" );
    self endon( "sprint_slide_end" );
    var_1 = var_0 * var_0;
    var_2 = self.origin;
    var_3 = self.origin;
    var_4 = 36;
    var_5 = var_4 * var_4;
    var_6 = self _meth_816B();
    self._id_6E84 = var_6;

    while ( distancesquared( self.origin, var_3 ) < var_1 )
    {
        if ( distancesquared( self.origin, var_2 ) > var_5 )
        {
            thread _id_106F6( self.origin, self._id_6E84 );
            var_2 = self.origin;
        }

        scripts\engine\utility::waitframe();
    }
}

_id_106F6( var_0, var_1 )
{
    var_2 = spawn( "trigger_radius", var_0, 1, 72, 20 );
    var_2._id_127BA = 0;
    var_3 = 2;
    var_4 = self _meth_816B();
    var_5 = length( var_1 );
    var_6 = length( var_4 );

    if ( var_5 != 0 && var_6 != 0 )
    {
        var_7 = anglesdelta( var_1, var_4 );

        if ( var_7 > 10 )
            var_1 = ( var_1 + var_4 ) / 2;
    }

    self._id_6E84 = var_1;
    var_2._id_7542 = spawnfx( level._effect["fire_trail"], var_0, self._id_6E84 );
    triggerfx( var_2._id_7542 );
    var_2 thread _id_3289( self );
    wait( var_3 );
    var_2 notify( "stop_burn_loop" );
    wait 1;
    var_2._id_7542 delete();
    var_2 delete();
}

_id_3289( var_0 )
{
    self endon( "stop_burn_loop" );

    for (;;)
    {
        self waittill( "trigger", var_1 );

        if ( isplayer( var_1 ) )
            continue;

        if ( isdefined( var_1.agent_type ) && ( var_1.agent_type == "zombie_brute" || var_1.agent_type == "zombie_grey" ) )
            continue;

        if ( isalive( var_1 ) && !scripts\engine\utility::_id_9CEE( var_1._id_B36E ) )
        {
            var_1._id_B36E = 1;
            var_1 thread _id_0A77::_id_4D0D( var_1, var_0, 5, 1900, undefined, "iw7_fwoosh_zm", 0, "burning", "fwoosh_kill" );
        }
    }
}

_id_48E9( var_0 )
{
    var_1 = var_0 / 2;
    var_2 = vectornormalize( anglestoforward( self.angles ) );
    var_3 = var_2 * var_1;

    foreach ( var_5 in level.players )
    {
        if ( var_5 == self )
        {
            var_5 thread _id_48E6( var_5.origin + var_3 );
            continue;
        }

        var_5 thread _id_48E7( self.origin + var_3, self );
    }

    thread _id_48E8( var_0 );
}

_id_E0B3( var_0 )
{
    if ( isdefined( self._id_13FA4 ) && isdefined( self._id_13FA4[var_0] ) )
    {
        self notify( "remove_perk_icon_" + var_0 );
        self._id_13FA4[var_0] = undefined;
    }
}

_id_E072()
{
    if ( !isdefined( self._id_13FA4 ) )
        return;

    if ( scripts\engine\utility::_id_9CEE( self.dontremoveperks ) )
        return;

    self._id_110B8 = self._id_13FA4;
    var_0 = _id_0A77::_id_9BA0( "just_a_flesh_wound" );

    if ( var_0 )
        thread _id_5968();

    foreach ( var_3, var_2 in self._id_13FA4 )
    {
        if ( var_0 )
        {
            if ( _id_0A77::_id_9F02() || scripts\engine\utility::_id_9CEE( level._id_C552 ) )
            {
                if ( var_3 != "perk_machine_revive" )
                    continue;
            }
            else
                break;
        }

        _id_1145C( var_3 );
    }
}

_id_5968()
{
    self endon( "disconnect" );
    level endon( "game_ended" );
    var_0 = scripts\engine\utility::_id_13734( "death", "revive" );
    _id_0A77::_id_C151( "just_a_flesh_wound" );

    if ( _id_0A77::_id_9F02() || level._id_C552 )
    {
        self.keep_perks = 1;
        return;
    }

    if ( var_0 == "death" )
    {
        self._id_110B8 = self._id_13FA4;

        foreach ( var_3, var_2 in self._id_13FA4 )
            _id_1145C( var_3 );
    }
}

_id_7924()
{
    return self._id_13FA4;
}

_id_12872( var_0 )
{
    if ( isdefined( var_0._id_110B8 ) && var_0._id_110B8.size > 0 )
        _id_E2D6( var_0, var_0._id_110B8 );
}

_id_E2D6( var_0, var_1 )
{
    if ( !isdefined( var_1 ) )
        return;

    foreach ( var_4, var_3 in var_1 )
        var_0 _id_834E( var_4, 0 );
}
