// IW7 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init_ghost_n_skull_4_quest()
{
    _id_0D52::_id_DED3( "ghostFour", 0, ::blank, ::shoot_skulls_in_map, ::complete_shoot_skulls_in_map, ::debug_shoot_skulls_in_map, 5, "Shoot skulls around the map" );
    _id_0D52::_id_DED3( "ghostFour", 1, ::blank, ::find_radiation_extractor_collect_radiation, ::complete_radiation_extractor_collect_radiation, ::debug_radiation_extractor_collect_radiation, 5, "Collect radiation" );
    _id_0D52::_id_DED3( "ghostFour", 2, ::blank, ::pollute_pool_and_kills, ::complete_pollute_pool_and_kills, ::debug_pollute_pool_and_kills, 5, "Pollute Pool and Kill" );
    _id_0D52::_id_DED3( "ghostFour", 3, ::blank, ::cipher_quest, ::complete_cipher_quest, ::debug_cipher_quest, 5, "Cipher Quest" );
    _id_0D52::_id_DED3( "ghostFour", 4, ::blank, ::weeping_angels_start, ::complete_weeping_angels_start, ::debug_weeping_angels_start, 5, "Weeping angles" );
    _id_0D52::_id_DED3( "ghostFour", 5, ::blank, ::shoot_the_machine, ::complete_shoot_the_machine, ::debug_shoot_the_machine, 5, "Shoot the arcade machine" );
    _id_0D52::_id_DED3( "ghostFour", 6, ::blank, ::_id_135F6, ::_id_447F, ::_id_4F30, 5, "Wait for player activation" );
    init();
    init_cipher_clue_texture();
}

init_cipher_clue_texture()
{
    var_0 = getent( "cipher_word_hint", "script_noteworthy" );
    level.cipher_hint = var_0;
    setomnvar( "zm_ui_skull_top_ent", level.cipher_hint );
}

blank()
{

}

watch_for_skull_death()
{
    level endon( "shoot_skulls_in_map_done" );
    self endon( "end_this_thread_for_" + self.object_num );

    for (;;)
    {
        self._id_01F1 waittill( "damage", var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 );

        if ( !isplayer( var_1 ) )
            continue;

        level.skulls_killed++;
        playfx( scripts\engine\utility::_id_7ECB( "hidden_figure_death" ), var_3 );
        var_1 playlocalsound( "part_pickup" );

        if ( self._id_01F1.health < 0 )
        {
            self._id_01F1 delete();
            self notify( "end_this_thread_for_" + self.object_num );
        }
    }
}

shoot_skulls_in_map()
{
    level waittill( "prematch_done" );

    foreach ( var_1 in level.weeping_angels_note )
        var_1 thread watch_for_damage_on_struct();

    var_3 = 0;

    while ( !scripts\engine\utility::_id_9CEE( var_3 ) )
    {
        if ( isdefined( level.skulls_killed ) )
        {
            if ( level.skulls_killed >= 5 )
                var_3 = 1;
        }

        wait 1;
    }

    level notify( "shoot_skulls_in_map_done" );
}

complete_shoot_skulls_in_map()
{
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_C127( 1 );
}

debug_shoot_skulls_in_map()
{
    level.skulls_killed = 5;
}

find_radiation_extractor_collect_radiation()
{
    level waittill( "radiation_extraction_started" );
    level.radiation_extractor.ticks_of_radiation = 0;
    level thread watch_radiation_extractor_ticks();

    foreach ( var_1 in level.players )
        var_1 thread watch_for_player_position();

    _id_0A59::_id_175C( level.radiation_extraction_interaction );
    level scripts\engine\utility::waittill_any( "completed_extraction", "debug_radiation_extractor_collect_radiation" );
    level notify( "stop_tick_on_loop" );
}

watch_radiation_extractor_ticks()
{
    level endon( "completed_extraction" );
    level endon( "debug_radiation_extractor_collect_radiation" );

    for (;;)
    {
        if ( level.radiation_extractor.ticks_of_radiation > 9 )
        {
            level.radiation_extractor.ticks_of_radiation = 0;
            level.radiation_extractor thread move_model_after_tick( 0 );
        }
        else if ( level.radiation_extractor.ticks_of_radiation == 9 )
        {
            level.radiation_extractor.origin = level.radiation_extraction_interaction.origin;
            level.radiation_extractor.angles = level.radiation_extraction_interaction.angles;
            level.radiation_extractor setmodel( "cp_town_radiation_extractor" );
            level.radiation_extractor thread play_tick_on_loop();
            wait 30;
            level notify( "stop_tick_on_loop" );
            level.radiation_extractor thread move_model_after_tick( 0 );
        }

        if ( scripts\engine\utility::_id_9CEE( level.charge_machine ) )
        {
            level.radiation_extractor.ticks_of_radiation++;
            level.radiation_extractor thread move_model_after_tick( 1 );
            wait 30;
            continue;
        }

        scripts\engine\utility::waitframe();
    }
}

play_tick_on_loop()
{
    level endon( "stop_tick_on_loop" );

    for (;;)
    {
        scripts\engine\utility::_id_CE2B( "town_radiation_extractor_tick_up", self.origin + ( 0, 0, 5 ) );
        wait 0.6;
        scripts\engine\utility::_id_CE2B( "town_radiation_extractor_tick_up_final", self.origin + ( 0, 0, 5 ) );
        wait 2.7;
    }
}

watch_for_player_position()
{
    self endon( "disconnect" );
    level endon( "completed_extraction" );
    level endon( "debug_radiation_extractor_collect_radiation" );
    self notify( "one_thread_instance_for_player" + self.name );
    self endon( "one_thread_instance_for_player" + self.name );

    for (;;)
    {
        if ( !isdefined( level.radiation_extraction_interaction ) )
        {
            scripts\engine\utility::waitframe();
            continue;
        }

        if ( distance2dsquared( level.radiation_extraction_interaction.origin, self.origin ) <= 1000000 && !scripts\engine\utility::_id_9CEE( self._id_9387 ) )
            level.charge_machine = 1;
        else
            level.charge_machine = 0;

        wait 1;
    }
}

complete_radiation_extractor_collect_radiation()
{
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_C127( 2 );
}

debug_radiation_extractor_collect_radiation()
{

}

wait_for_trap_kills( var_0, var_1 )
{
    for (;;)
    {
        level waittill( var_0, var_2 );

        if ( var_2 == var_1 )
            return;
    }
}

pollute_pool_and_kills()
{
    level waittill( "placed_extractor_in_pool" );
    wait_for_trap_kills( "pool_trap_kills", 16 );

    if ( isdefined( level.pool_extraction_fx ) )
        level.pool_extraction_fx delete();

    level.rad_extractor_owner = undefined;
    _id_0A59::_id_175C( level.radiation_extraction_interaction );
    level.completed_pool_part_skulltop_quest = 1;
}

complete_pollute_pool_and_kills()
{
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_C127( 3 );
}

debug_pollute_pool_and_kills()
{

}

calculate_cipher_from_current_interaction( var_0, var_1, var_2, var_3, var_4 )
{
    if ( !isdefined( var_1 ) )
    {
        var_1 = "0";
        level.cipher_choices[0]._id_01F1 setscriptablepartstate( "cipher_glyph", "neutral" );
    }
    else
        level.cipher_choices[0]._id_01F1 setscriptablepartstate( "cipher_glyph", var_1 );

    if ( !isdefined( var_2 ) )
    {
        var_2 = "0";
        level.cipher_choices[1]._id_01F1 setscriptablepartstate( "cipher_glyph", "neutral" );
    }
    else
        level.cipher_choices[1]._id_01F1 setscriptablepartstate( "cipher_glyph", var_2 );

    if ( !isdefined( var_3 ) )
    {
        var_3 = "0";
        level.cipher_choices[2]._id_01F1 setscriptablepartstate( "cipher_glyph", "neutral" );
    }
    else
        level.cipher_choices[2]._id_01F1 setscriptablepartstate( "cipher_glyph", var_3 );

    if ( !isdefined( var_4 ) )
    {
        var_4 = "0";
        level.cipher_choices[3]._id_01F1 setscriptablepartstate( "cipher_glyph", "neutral" );
    }
    else
        level.cipher_choices[3]._id_01F1 setscriptablepartstate( "cipher_glyph", var_4 );

    var_5 = 1;
    var_6 = 2;
    var_7 = 3;
    var_8 = 4;
    var_9 = 3;
    var_10 = 6;
    var_11 = 9;
    var_12 = 0;
    var_13 = 0;
    var_14 = 0;
    var_15 = level.alphabets[var_1];

    if ( var_2 == "0" )
        var_12 = 0;
    else if ( var_2 == level.cipherlettera )
        var_12 = var_5 * var_9 + level.alphabets[var_2];
    else if ( var_2 == level.cipherletterb )
        var_12 = var_6 * var_9 + level.alphabets[var_2];
    else if ( var_2 == level.cipherletterc )
        var_12 = var_7 * var_9 + level.alphabets[var_2];
    else if ( var_2 == level.cipherletterd )
        var_12 = var_8 * var_9 + level.alphabets[var_2];

    if ( var_3 == "0" )
        var_13 = 0;
    else if ( var_3 == level.cipherlettera )
        var_13 = var_5 * var_10 + level.alphabets[var_3];
    else if ( var_3 == level.cipherletterb )
        var_13 = var_6 * var_10 + level.alphabets[var_3];
    else if ( var_3 == level.cipherletterc )
        var_13 = var_7 * var_10 + level.alphabets[var_3];
    else if ( var_3 == level.cipherletterd )
        var_13 = var_8 * var_10 + level.alphabets[var_3];

    if ( var_4 == "0" )
        var_14 = 0;
    else if ( var_4 == level.cipherlettera )
        var_14 = var_5 * var_11 + level.alphabets[var_4];
    else if ( var_4 == level.cipherletterb )
        var_14 = var_6 * var_11 + level.alphabets[var_4];
    else if ( var_4 == level.cipherletterc )
        var_14 = var_7 * var_11 + level.alphabets[var_4];
    else if ( var_4 == level.cipherletterd )
        var_14 = var_8 * var_11 + level.alphabets[var_4];

    var_16 = 0;

    if ( !isdefined( var_15 ) )
        var_16 = var_12 + var_13 + var_14;
    else
        var_16 = var_15 + var_12 + var_13 + var_14;

    var_17 = 0;
    var_18 = var_16;

    if ( var_18 >= 26 )
        var_18 = var_18 - 26 * int( floor( var_18 / 26 ) );
    else
        var_18 = var_16;

    if ( var_18 < 1 )
        var_18 = 26;
    else
        var_18 = var_18 - 26 * int( floor( var_18 / 26 ) );

    var_17 = var_18;
    var_19 = "";

    foreach ( var_22, var_21 in level.alphabets )
    {
        if ( var_17 == var_21 )
        {
            var_19 = var_22;
            break;
        }
    }

    return var_19;
}

calculate_cipher_from_letters_initially( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( level.alphabets ) )
    {
        level.alphabets = [];
        level.alphabets["a"] = level.alphabets.size + 1;
        level.alphabets["b"] = level.alphabets.size + 1;
        level.alphabets["c"] = level.alphabets.size + 1;
        level.alphabets["d"] = level.alphabets.size + 1;
        level.alphabets["e"] = level.alphabets.size + 1;
        level.alphabets["f"] = level.alphabets.size + 1;
        level.alphabets["g"] = level.alphabets.size + 1;
        level.alphabets["h"] = level.alphabets.size + 1;
        level.alphabets["i"] = level.alphabets.size + 1;
        level.alphabets["j"] = level.alphabets.size + 1;
        level.alphabets["k"] = level.alphabets.size + 1;
        level.alphabets["l"] = level.alphabets.size + 1;
        level.alphabets["m"] = level.alphabets.size + 1;
        level.alphabets["n"] = level.alphabets.size + 1;
        level.alphabets["o"] = level.alphabets.size + 1;
        level.alphabets["p"] = level.alphabets.size + 1;
        level.alphabets["q"] = level.alphabets.size + 1;
        level.alphabets["r"] = level.alphabets.size + 1;
        level.alphabets["s"] = level.alphabets.size + 1;
        level.alphabets["t"] = level.alphabets.size + 1;
        level.alphabets["u"] = level.alphabets.size + 1;
        level.alphabets["v"] = level.alphabets.size + 1;
        level.alphabets["w"] = level.alphabets.size + 1;
        level.alphabets["x"] = level.alphabets.size + 1;
        level.alphabets["y"] = level.alphabets.size + 1;
        level.alphabets["z"] = level.alphabets.size + 1;
    }

    var_4 = [ var_0 + "_" + var_3 + "_" + var_1 + "_" + var_2 + "", var_0 + "_" + var_3 + "_" + var_2 + "_" + var_1 + "", var_0 + "_" + var_1 + "_" + var_3 + "_" + var_2 + "", var_0 + "_" + var_1 + "_" + var_2 + "_" + var_3 + "", var_0 + "_" + var_2 + "_" + var_3 + "_" + var_1 + "", var_0 + "_" + var_2 + "_" + var_1 + "_" + var_3 + "", var_3 + "_" + var_0 + "_" + var_2 + "_" + var_1 + "", var_3 + "_" + var_0 + "_" + var_1 + "_" + var_2 + "", var_3 + "_" + var_1 + "_" + var_2 + "_" + var_0 + "", var_3 + "_" + var_1 + "_" + var_0 + "_" + var_2 + "", var_3 + "_" + var_2 + "_" + var_1 + "_" + var_0 + "", var_3 + "_" + var_2 + "_" + var_0 + "_" + var_1 + "", var_1 + "_" + var_0 + "_" + var_3 + "_" + var_2 + "", var_1 + "_" + var_0 + "_" + var_2 + "_" + var_3 + "", var_1 + "_" + var_3 + "_" + var_0 + "_" + var_2 + "", var_1 + "_" + var_3 + "_" + var_2 + "_" + var_0 + "", var_1 + "_" + var_2 + "_" + var_0 + "_" + var_3 + "", var_1 + "_" + var_2 + "_" + var_3 + "_" + var_0 + "", var_2 + "_" + var_0 + "_" + var_1 + "_" + var_3 + "", var_2 + "_" + var_0 + "_" + var_3 + "_" + var_1 + "", var_2 + "_" + var_3 + "_" + var_1 + "_" + var_0 + "", var_2 + "_" + var_3 + "_" + var_0 + "_" + var_1 + "", var_2 + "_" + var_1 + "_" + var_3 + "_" + var_0 + "", var_2 + "_" + var_1 + "_" + var_0 + "_" + var_3 + "", var_0 + "_" + var_3 + "_" + var_1 + "_" + 0 + "", var_0 + "_" + var_1 + "_" + var_3 + "_" + 0 + "", var_3 + "_" + var_0 + "_" + var_1 + "_" + 0 + "", var_3 + "_" + var_1 + "_" + var_0 + "_" + 0 + "", var_1 + "_" + var_0 + "_" + var_3 + "_" + 0 + "", var_1 + "_" + var_3 + "_" + var_0 + "_" + 0 + "", var_0 + "_" + var_3 + "_" + var_2 + "_" + 0 + "", var_0 + "_" + var_2 + "_" + var_3 + "_" + 0 + "", var_3 + "_" + var_0 + "_" + var_2 + "_" + 0 + "", var_3 + "_" + var_2 + "_" + var_0 + "_" + 0 + "", var_2 + "_" + var_0 + "_" + var_3 + "_" + 0 + "", var_2 + "_" + var_3 + "_" + var_0 + "_" + 0 + "", var_0 + "_" + var_1 + "_" + var_2 + "_" + 0 + "", var_0 + "_" + var_2 + "_" + var_1 + "_" + 0 + "", var_1 + "_" + var_0 + "_" + var_2 + "_" + 0 + "", var_1 + "_" + var_2 + "_" + var_0 + "_" + 0 + "", var_2 + "_" + var_0 + "_" + var_1 + "_" + 0 + "", var_2 + "_" + var_1 + "_" + var_0 + "_" + 0 + "", var_3 + "_" + var_1 + "_" + var_2 + "_" + 0 + "", var_3 + "_" + var_2 + "_" + var_1 + "_" + 0 + "", var_1 + "_" + var_3 + "_" + var_2 + "_" + 0 + "", var_1 + "_" + var_2 + "_" + var_3 + "_" + 0 + "", var_2 + "_" + var_3 + "_" + var_1 + "_" + 0 + "", var_2 + "_" + var_1 + "_" + var_3 + "_" + 0 + "", var_0 + "_" + var_1 + "_" + 0 + "_" + 0 + "", var_1 + "_" + var_0 + "_" + 0 + "_" + 0 + "", var_0 + "_" + var_2 + "_" + 0 + "_" + 0 + "", var_2 + "_" + var_0 + "_" + 0 + "_" + 0 + "", var_0 + "_" + var_3 + "_" + 0 + "_" + 0 + "", var_3 + "_" + var_0 + "_" + 0 + "_" + 0 + "", var_1 + "_" + var_2 + "_" + 0 + "_" + 0 + "", var_2 + "_" + var_1 + "_" + 0 + "_" + 0 + "", var_1 + "_" + var_3 + "_" + 0 + "_" + 0 + "", var_3 + "_" + var_1 + "_" + 0 + "_" + 0 + "", var_2 + "_" + var_3 + "_" + 0 + "_" + 0 + "", var_3 + "_" + var_2 + "_" + 0 + "_" + 0 + "", var_0 + "_" + var_0 + "_" + var_0 + "_" + 0 + "", var_1 + "_" + var_1 + "_" + var_1 + "_" + 0 + "", var_2 + "_" + var_2 + "_" + var_2 + "_" + 0 + "", var_3 + "_" + var_3 + "_" + var_3 + "_" + 0 + "", var_0 + "_" + var_0 + "_" + var_0 + "_" + 0 + "", var_1 + "_" + var_1 + "_" + var_1 + "_" + 0 + "", var_2 + "_" + var_2 + "_" + var_2 + "_" + 0 + "", var_3 + "_" + var_3 + "_" + var_3 + "_" + 0 + "", var_0 + "_" + var_0 + "_" + 0 + "_" + 0 + "", var_1 + "_" + var_1 + "_" + 0 + "_" + 0 + "", var_2 + "_" + var_2 + "_" + 0 + "_" + 0 + "", var_3 + "_" + var_3 + "_" + 0 + "_" + 0 + "", var_0 + "_" + 0 + "_" + 0 + "_" + 0 + "", var_1 + "_" + 0 + "_" + 0 + "_" + 0 + "", var_2 + "_" + 0 + "_" + 0 + "_" + 0 + "", var_3 + "_" + 0 + "_" + 0 + "_" + 0 + "", var_0 + "_" + var_0 + "_" + var_0 + "_" + var_0 + "", var_1 + "_" + var_1 + "_" + var_1 + "_" + var_1 + "", var_2 + "_" + var_2 + "_" + var_2 + "_" + var_2 + "", var_3 + "_" + var_3 + "_" + var_3 + "_" + var_3 + "", var_0 + "_" + var_0 + "_" + var_0 + "_" + 0 + "", var_1 + "_" + var_1 + "_" + var_1 + "_" + 0 + "", var_2 + "_" + var_2 + "_" + var_2 + "_" + 0 + "", var_3 + "_" + var_3 + "_" + var_3 + "_" + 0 + "", var_0 + "_" + var_0 + "_" + 0 + "_" + 0 + "", var_1 + "_" + var_1 + "_" + 0 + "_" + 0 + "", var_2 + "_" + var_2 + "_" + 0 + "_" + 0 + "", var_3 + "_" + var_3 + "_" + 0 + "_" + 0 + "" ];
    var_5 = [];
    var_6 = [];
    var_7 = [];
    var_8 = [];

    foreach ( var_10 in var_4 )
    {
        var_11 = strtok( var_10, "_" );
        var_5[var_5.size] = var_11[0];
        var_6[var_6.size] = var_11[1];
        var_7[var_7.size] = var_11[2];
        var_8[var_8.size] = var_11[3];
    }

    var_13 = 1;
    var_14 = 2;
    var_15 = 3;
    var_16 = 4;
    var_17 = 3;
    var_18 = 6;
    var_19 = 9;
    var_20 = [];
    var_21 = [];
    var_22 = [];
    var_23 = [];

    foreach ( var_10 in var_5 )
    {
        foreach ( var_27, var_26 in level.alphabets )
        {
            if ( var_10 == var_27 )
                var_20[var_20.size] = level.alphabets[var_10];
        }
    }

    foreach ( var_10 in var_6 )
    {
        if ( var_10 == "0" )
        {
            var_21[var_21.size] = 0;
            continue;
        }

        foreach ( var_27, var_26 in level.alphabets )
        {
            if ( var_10 == var_27 )
            {
                if ( var_10 == var_0 )
                {
                    var_21[var_21.size] = var_13 * var_17 + level.alphabets[var_27];
                    continue;
                }

                if ( var_10 == var_1 )
                {
                    var_21[var_21.size] = var_14 * var_17 + level.alphabets[var_27];
                    continue;
                }

                if ( var_10 == var_2 )
                {
                    var_21[var_21.size] = var_15 * var_17 + level.alphabets[var_27];
                    continue;
                }

                if ( var_10 == var_3 )
                    var_21[var_21.size] = var_16 * var_17 + level.alphabets[var_27];
            }
        }
    }

    foreach ( var_10 in var_7 )
    {
        if ( var_10 == "0" )
        {
            var_22[var_22.size] = 0;
            continue;
        }

        foreach ( var_27, var_26 in level.alphabets )
        {
            if ( var_10 == var_27 )
            {
                if ( var_10 == var_0 )
                {
                    var_22[var_22.size] = var_13 * var_18 + level.alphabets[var_27];
                    continue;
                }

                if ( var_10 == var_1 )
                {
                    var_22[var_22.size] = var_14 * var_18 + level.alphabets[var_27];
                    continue;
                }

                if ( var_10 == var_2 )
                {
                    var_22[var_22.size] = var_15 * var_18 + level.alphabets[var_27];
                    continue;
                }

                if ( var_10 == var_3 )
                    var_22[var_22.size] = var_16 * var_18 + level.alphabets[var_27];
            }
        }
    }

    foreach ( var_10 in var_8 )
    {
        if ( var_10 == "0" )
        {
            var_23[var_23.size] = 0;
            continue;
        }

        foreach ( var_27, var_26 in level.alphabets )
        {
            if ( var_10 == var_27 )
            {
                if ( var_10 == var_0 )
                {
                    var_23[var_23.size] = var_13 * var_19 + level.alphabets[var_27];
                    continue;
                }

                if ( var_10 == var_1 )
                {
                    var_23[var_23.size] = var_14 * var_19 + level.alphabets[var_27];
                    continue;
                }

                if ( var_10 == var_2 )
                {
                    var_23[var_23.size] = var_15 * var_19 + level.alphabets[var_27];
                    continue;
                }

                if ( var_10 == var_3 )
                    var_23[var_23.size] = var_16 * var_19 + level.alphabets[var_27];
            }
        }
    }

    level.ciphertotalcolumn = [];

    for ( var_38 = 0; var_38 < var_20.size; var_38++ )
        level.ciphertotalcolumn[var_38] = var_20[var_38] + var_21[var_38] + var_22[var_38] + var_23[var_38];

    level.final_cipher_letter_numbers = [];

    foreach ( var_42, var_40 in level.ciphertotalcolumn )
    {
        var_41 = var_40;

        if ( var_41 >= 26 )
            var_41 = var_41 - 26 * int( floor( var_41 / 26 ) );
        else
            var_41 = var_40;

        if ( var_41 < 1 )
            var_41 = 26;
        else
            var_41 = var_41 - 26 * int( floor( var_41 / 26 ) );

        level.final_cipher_letter_numbers[var_42] = var_41;
    }

    level.available_letters_for_cipher = [];

    foreach ( var_42, var_44 in level.final_cipher_letter_numbers )
    {
        foreach ( var_27, var_46 in level.alphabets )
        {
            if ( var_44 == var_46 )
                level.available_letters_for_cipher[level.available_letters_for_cipher.size] = var_27;
        }
    }
}

cipher_quest()
{
    foreach ( var_1 in level.cipher_interactions_structs )
    {
        _id_0A59::_id_175C( var_1 );
        var_1._id_01F1 show();
    }

    foreach ( var_4 in level.cipher_model_structs )
        var_4._id_01F1 show();

    level waittill( "cipher_solved" );
}

complete_cipher_quest()
{
    level.completed_cipher = 1;

    foreach ( var_1 in level.cipher_interactions_structs )
    {
        _id_0A59::_id_E019( var_1 );
        var_1._id_01F1 hide();
    }

    foreach ( var_4 in level.cipher_model_structs )
        var_4._id_01F1 hide();

    foreach ( var_8, var_7 in level.cipher_choices )
        level.cipher_choices[var_8]._id_01F1 setscriptablepartstate( "cipher_glyph", "neutral" );

    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_C127( 4 );
}

debug_cipher_quest()
{

}

slow_mo_sphere( var_0 )
{
    self.sacred_ground = spawn( "trigger_radius", var_0.origin, 0, 400, 256 );
    self.sacred_ground._id_7542 = spawnfx( level._effect["slow_time_bubble"], var_0.origin );
    self.sacred_ground._id_FB2F = scripts\engine\utility::_id_CD86( "town_mute_circle_lp", var_0.origin );
    thread scripts\engine\utility::_id_CE2B( "town_mute_circle_start", var_0.origin );
    self.zombie_list = [];
    playfx( scripts\engine\utility::_id_7ECB( "hidden_figure_death" ), var_0.origin );
    wait 1;
    triggerfx( self.sacred_ground._id_7542 );
    self.sacred_ground thread apply_slow_mo_on_trigger();
    level waittill( "end_painting_" + var_0.name );

    if ( isdefined( self.sacred_ground._id_7542 ) )
        self.sacred_ground._id_7542 delete();

    if ( isdefined( self.sacred_ground._id_FB2F ) )
        self.sacred_ground._id_FB2F delete();

    if ( isdefined( self.sacred_ground ) )
        self.sacred_ground delete();

    var_0._id_01F1 setmodel( "cp_town_willard_painting" );
    var_1 = _id_0A4A::_id_7DB0( "axis" );

    foreach ( var_3 in var_1 )
    {
        var_3 scripts\anim\notetracks_mp::_id_F85E( 0, "DoAttack" );
        var_3.activated_slomo_sphere = 0;
        var_3._id_C189 = 0;
        var_3._id_9E0C = undefined;
    }
}

custom_unslow_func( var_0 )
{
    var_0 endon( "death" );

    if ( !isalive( var_0 ) )
        return;

    var_0._id_0180 = 0;
    var_0._id_C026 = undefined;
    var_0._id_74B5 = undefined;
    var_0._id_C189 = undefined;
}

custom_slow_time_func( var_0 )
{
    var_0 endon( "death" );
    var_0._id_9E0C = 1;
    var_0._id_0180 = 1;
    var_0._id_C026 = 1;
    var_0._id_74B5 = 1;
    var_0._id_C189 = 1;
    var_0 waittill( "unslow_zombie" );
    var_0._id_9E0C = undefined;
}

apply_slow_mo_on_trigger()
{
    self endon( "death" );
    level endon( "game_ended" );

    for (;;)
    {
        foreach ( var_1 in level.players )
        {
            if ( var_1 istouching( self ) )
            {
                if ( !scripts\engine\utility::_id_9CEE( var_1.inside_slow_sphere ) )
                    var_1 thread scripts\cp\maps\cp_town\cp_town::update_special_mode_for_player( var_1 );

                var_1.inside_slow_sphere = 1;
                continue;
            }

            if ( scripts\engine\utility::_id_9CEE( var_1.inside_slow_sphere ) )
                var_1 thread scripts\cp\maps\cp_town\cp_town::update_special_mode_for_player( var_1 );

            var_1.inside_slow_sphere = 0;
        }

        var_3 = _id_0A4A::_id_7DB0( "axis" );
        level.zombie_list = var_3;

        foreach ( var_5 in level.zombie_list )
        {
            if ( !isdefined( var_5 ) )
            {
                scripts\engine\utility::waitframe();
                continue;
            }

            if ( !var_5 _id_0A77::_id_9D20() )
            {
                scripts\engine\utility::waitframe();
                continue;
            }

            if ( var_5 _id_0A77::agentisfnfimmune() )
            {
                scripts\engine\utility::waitframe();
                continue;
            }

            if ( !scripts\engine\utility::_id_9CEE( var_5._id_6622 ) )
            {
                scripts\engine\utility::waitframe();
                continue;
            }

            if ( var_5 istouching( self ) )
            {
                var_5 scripts\anim\notetracks_mp::_id_F85E( 1, "DoAttack" );
                var_5.activated_slomo_sphere = 1;
                var_5._id_C189 = 1;
                var_5._id_9E0C = 1;
                continue;
            }

            var_5 scripts\anim\notetracks_mp::_id_F85E( 0, "DoAttack" );
            var_5.activated_slomo_sphere = 0;
            var_5._id_C189 = 0;
            var_5._id_9E0C = undefined;
            var_5 notify( "unslow_zombie" );
        }

        scripts\engine\utility::waitframe();
    }
}

weeping_angels_start()
{
    foreach ( var_1 in level.weeping_angels_note )
        var_1._id_01F1 show();

    level waittill( "weeping_angels_note_read" );

    foreach ( var_4 in level.players )
        var_4.weeping_angels_puzzle = 1;

    level._id_7456 = ::custom_slow_time_func;
    level._id_11768 = ::custom_unslow_func;
    var_6 = 0;
    var_7 = 0;
    var_8 = 0;
    var_9 = 0;
    level scripts\engine\utility::_id_137AC( "painting_01_done", "painting_02_done", "painting_03_done", "painting_04_done" );
}

wait_for_painting_kills_complete( var_0, var_1, var_2 )
{
    for (;;)
    {
        level waittill( var_0, var_3 );

        if ( var_3 == var_1 )
        {
            var_2 = 1;
            return var_2;
        }
    }
}

complete_weeping_angels_start()
{
    level._id_7456 = _id_0D53::_id_7383;
    level._id_11768 = _id_0D53::_id_12B9A;
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_C127( 5 );
}

debug_weeping_angels_start()
{

}

shoot_the_machine()
{
    level.skulltop_machine = getent( "skullhop_machine", "targetname" );
    level.skulltop_machine setcandamage( 1 );
    level.skulltop_machine.health = 5;
    level.skulltop_machine.maxhealth = 5;
    level.skulltop_machine thread watch_for_damage_on_machine();
    level waittill( "machine_hit_successfully" );
    level thread play_gns_success_vo();
}

play_gns_success_vo()
{
    level endon( "game_ended" );

    foreach ( var_1 in level.players )
        var_1 thread _id_0A6A::_id_12885( "access_ghostnskulls", "town_comment_vo" );
}

watch_for_damage_on_machine()
{
    self endon( "end_func_on" + self._id_01F1 );

    for (;;)
    {
        self waittill( "damage", var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 );

        if ( !var_1 _id_0A77::_id_9D05() )
            continue;

        if ( isdefined( var_4 ) && var_4 == "MOD_MELEE" )
        {
            self.maxhealth = 5;
            self.health = 5;
            continue;
        }

        if ( !issubstr( var_9, "cutie" ) )
        {
            self.maxhealth = 5;
            self.health = 5;
            continue;
        }

        if ( scripts\engine\utility::_id_9CEE( var_1.fired_fov_beam ) )
        {
            var_10 = getomnvar( "zm_num_ghost_n_skull_coin" );

            if ( isdefined( var_10 ) && var_10 >= 5 )
                level notify( "machine_hit_successfully" );
            else
                continue;

            self notify( "end_func_on" + self._id_01F1 );
        }
    }
}

complete_shoot_the_machine()
{
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_C127( 6 );
}

debug_shoot_the_machine()
{

}

_id_135F6()
{
    level endon( "player_debug_activate_cabinet" );
    level.gns_game_console_vfx = spawnfx( level._effect["GnS_activation"], ( 5459, -4767, 29 ) );
    triggerfx( level.gns_game_console_vfx );
    var_0 = ( 5444, -4760, -14 );
    var_1 = 10000;

    for (;;)
    {
        var_2 = 1;

        foreach ( var_4 in level.players )
        {
            if ( scripts\engine\utility::_id_9CEE( var_4._id_98F3 ) )
            {
                var_2 = 0;
                break;
            }

            if ( scripts\engine\utility::_id_9CEE( var_4._id_9D81 ) )
            {
                var_2 = 0;
                break;
            }

            if ( distancesquared( var_4.origin, var_0 ) > var_1 )
            {
                var_2 = 0;
                break;
            }

            if ( !var_4 usebuttonpressed() )
            {
                var_2 = 0;
                break;
            }
        }

        wait 0.25;

        if ( var_2 )
        {
            var_2 = 1;

            foreach ( var_4 in level.players )
            {
                if ( scripts\engine\utility::_id_9CEE( var_4._id_98F3 ) )
                {
                    var_2 = 0;
                    break;
                }

                if ( scripts\engine\utility::_id_9CEE( var_4._id_9D81 ) )
                {
                    var_2 = 0;
                    break;
                }

                if ( distancesquared( var_4.origin, var_0 ) > var_1 )
                {
                    var_2 = 0;
                    break;
                }

                if ( !var_4 usebuttonpressed() )
                {
                    var_2 = 0;
                    break;
                }
            }
        }

        if ( var_2 )
        {
            if ( isdefined( level.gns_game_console_vfx ) )
                level.gns_game_console_vfx delete();

            return;
        }

        scripts\engine\utility::waitframe();
    }
}

_id_447F()
{
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_C127( -1, 0.5 );
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_10C61();
}

_id_4F30()
{

}

_id_13650()
{
    level waittill( "regular_wave_starting" );
}

cp_town_gns_4_setup()
{
    level.skulls_killed = 0;
    level.gns_num_of_wave = 3;
    level.init_formation_movement_func = ::gns3_formation_movement;
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::init();
    level.death_trigger_reset_y_pos = 424;
    level.death_trigger_activate_y_pos = 1353;
    level.original_death_grid_lines_front_y_pos = 3020;
    level.zombie_ghost_model = "zombie_ghost_cube_white";
    level.set_moving_target_color_func = ::cp_town_set_moving_target_color;
    level.should_moving_target_explode = ::cp_town_should_moving_target_explode;
    level.hit_wrong_moving_target_func = ::cp_town_hit_wrong_moving_target_func;
    level.moving_target_pre_fly_time = 0.5;
    level.gns_hotjoin_wait_notify = "finish_intro_gesture";
    level.gns_reward_func = ::town_gns_player_reward_func;
    level.get_fake_ghost_model_func = ::town_get_fake_ghost_model_func;
    level.max_num_of_death_trigger_advance = 9;
    level.gns_end_func = ::town_gns_end_func;
    level.gns_start_func = ::town_gns_start_func;
    level.enter_ghosts_n_skulls_func = ::cp_town_enter_ghosts_n_skulls_func;
    level.end_ghosts_n_skulls_func = ::cp_town_end_ghosts_n_skulls_func;
    level.disable_gns_death_trigger = 1;
    level.post_moving_target_rotate_func = ::color_indicator_manager;
    level.complete_one_gns_wave_func = ::kill_color_indicator_manager;
    level.pre_gns_end_func = ::deactivate_color_indicator;
    level.ghost_n_skull_reactivate_func = ::reactivate_skullbuster_cabinet;
    level.moving_target_attack_interval = 9000;
    level.grab_same_ghost_string = &"CP_TOWN_GNS_TRACK_SAME_CUBE";
    level.all_perk_list = [ "perk_machine_boom", "perk_machine_flash", "perk_machine_fwoosh", "perk_machine_more", "perk_machine_rat_a_tat", "perk_machine_revive", "perk_machine_run", "perk_machine_deadeye", "perk_machine_tough", "perk_machine_change", "perk_machine_zap", "perk_machine_smack" ];
    level._id_CC0C = [];
    level.pool_placement_volume = getent( "pool_extraction_volume", "targetname" );
    level.radiation_collection_volume = getent( "radiation_extraction_volume", "targetname" );
    init_skulls_to_shoot();
    register_ghost_form();
    register_waves_movement();
    load_cp_town_ghost_exp_vfx();
    set_up_platform_and_trigger();
    level thread init_weeping_angels_note();

    if ( !isdefined( level.hidden_figures ) )
        level.hidden_figures = [];

    level.hidden_figures[0] = spawnstruct();
    level.hidden_figures[0].origin = ( 4058, -4359, 76 );
    level.hidden_figures[0]._id_D776 = 0;
    level.hidden_figures[0]._id_E1B9 = 0;
    level.hidden_figures[0].name = "hidden_figure_objects";
    level.hidden_figures[0].script_noteworthy = "figure_1";
    level.hidden_figures[0]._id_EE79 = "default";
    level.hidden_figures[0]._id_0336 = "interaction";
    var_0 = scripts\engine\utility::_id_8180( "figure_1", "script_noteworthy" );
    level.hidden_figures[1] = spawnstruct();
    level.hidden_figures[1].origin = ( 4058, -4359, 76 );
    level.hidden_figures[1]._id_D776 = 0;
    level.hidden_figures[1]._id_E1B9 = 0;
    level.hidden_figures[1].name = "hidden_figure_objects";
    level.hidden_figures[1].script_noteworthy = "figure_2";
    level.hidden_figures[1]._id_EE79 = "default";
    level.hidden_figures[1]._id_0336 = "interaction";
    var_0 = scripts\engine\utility::_id_8180( "figure_2", "script_noteworthy" );
    level.hidden_figures[2] = spawnstruct();
    level.hidden_figures[2].origin = ( 4058, -4359, 76 );
    level.hidden_figures[2]._id_D776 = 0;
    level.hidden_figures[2]._id_E1B9 = 0;
    level.hidden_figures[2].name = "hidden_figure_objects";
    level.hidden_figures[2].script_noteworthy = "figure_3";
    level.hidden_figures[2]._id_EE79 = "default";
    level.hidden_figures[2]._id_0336 = "interaction";
    var_0 = scripts\engine\utility::_id_8180( "figure_3", "script_noteworthy" );
    level.hidden_figures[3] = spawnstruct();
    level.hidden_figures[3].origin = ( 4058, -4359, 76 );
    level.hidden_figures[3]._id_D776 = 0;
    level.hidden_figures[3]._id_E1B9 = 0;
    level.hidden_figures[3].name = "hidden_figure_objects";
    level.hidden_figures[3].script_noteworthy = "figure_4";
    level.hidden_figures[3]._id_EE79 = "default";
    level.hidden_figures[3]._id_0336 = "interaction";
    var_0 = scripts\engine\utility::_id_8180( "figure_4", "script_noteworthy" );

    foreach ( var_3, var_2 in level.hidden_figures )
    {
        var_2._id_86A2 = "locOverride";
        var_2.playeroffset = [];
        setup_hidden_figure_models( var_2, var_2.script_noteworthy );
    }

    init_ghost_n_skull_4_quest();
}

cp_town_enter_ghosts_n_skulls_func( var_0 )
{
    var_0 thread restore_color_in_gns( var_0 );
    var_0 thread entangled_cube_color_manager( var_0 );
}

restore_color_in_gns( var_0 )
{
    var_0 endon( "disconnect" );
    var_1 = 0;

    foreach ( var_3 in level.players )
    {
        if ( scripts\engine\utility::_id_9CEE( var_3.activate_gns_machine ) )
        {
            var_1 = 1;
            break;
        }
    }

    if ( var_1 )
    {
        var_0 visionsetnakedforplayer( "cp_town_color", 1 );
        wait 2;
    }

    var_0 visionsetnakedforplayer( "cp_zmb_ghost_path", 1 );
}

cp_town_end_ghosts_n_skulls_func( var_0 )
{
    var_0 notify( "stop_entangled_cube_color_manager" );
    var_0 visionsetnakedforplayer( level.current_vision_set, 0 );
    scripts\cp\maps\cp_town\cp_town_crab_boss_death_ray::hide_charge_progress( var_0 );
}

entangled_cube_color_manager( var_0 )
{
    var_0 endon( "disconnect" );
    var_0 endon( "stop_entangled_cube_color_manager" );

    for (;;)
    {
        if ( isdefined( var_0.ghost_in_entanglement ) )
        {
            var_1 = var_0.ghost_in_entanglement;
            var_2 = get_platform_trigger_color( var_0 );

            if ( isdefined( var_1._id_00B9 ) && var_2 != var_1._id_00B9 )
                change_cube_color( var_1, var_2 );
        }

        scripts\engine\utility::waitframe();
    }
}

set_up_platform_and_trigger()
{
    var_0 = [ "blue", "green", "yellow", "red" ];

    foreach ( var_2 in var_0 )
    {
        var_3 = getent( var_2 + "_platform", "targetname" );
        var_4 = getent( var_2 + "_platform_trigger", "targetname" );
        var_3._id_C725 = var_3.origin;
        var_4._id_C725 = var_4.origin;
        var_4 _meth_80D2();
        var_4 linkto( var_3 );
    }
}

get_platform_trigger_color( var_0 )
{
    var_1 = [ "blue", "green", "yellow", "red" ];

    foreach ( var_3 in var_1 )
    {
        var_4 = getent( var_3 + "_platform_trigger", "targetname" );

        if ( var_0 istouching( var_4 ) )
            return var_3;
    }

    return "white";
}

color_indicator_manager()
{
    level endon( "kill_color_indicator_manager" );
    var_0 = 15;
    var_1 = 0.5;
    var_2 = "none";
    var_3 = [ "green", "red", "blue", "yellow" ];

    for (;;)
    {
        var_4 = scripts\engine\utility::array_remove( var_3, var_2 );
        var_2 = scripts\engine\utility::_id_DC6B( var_4 );
        update_color_indicator_color( var_2 );
        wait( var_0 - var_1 * 5 );
        turn_off_color_indicator();
        wait( var_1 );
        turn_on_color_indicator();
        wait( var_1 );
        turn_off_color_indicator();
        wait( var_1 );
        turn_on_color_indicator();
        wait( var_1 );
        turn_off_color_indicator();
        wait( var_1 );
    }
}

turn_off_color_indicator()
{
    foreach ( var_1 in level.skull_hop_color_indicators )
        var_1 setscriptablepartstate( "skull_hop_indicator", "off" );
}

turn_on_color_indicator()
{
    foreach ( var_1 in level.skull_hop_color_indicators )
        var_1 setscriptablepartstate( "skull_hop_indicator", level.color_indicator_color );
}

kill_color_indicator_manager()
{
    level notify( "kill_color_indicator_manager" );
    update_color_indicator_color( "off" );
}

init_cipher_interactions()
{
    scripts\cp\maps\cp_town\cp_town_interactions::town_register_interaction( 1, "cipher_interaction", undefined, undefined, ::radiation_collection_hint_func, ::cipher_activation_func, 0, 0, ::init_cipher_interaction_structs, undefined );
    thread init_cipher_choices();
    thread init_cipher_letters();
}

init_cipher_choices()
{
    var_0 = scripts\engine\utility::_id_8180( "cipher_choice_model", "script_noteworthy" );
    level.cipher_choices = [];

    foreach ( var_5, var_2 in var_0 )
    {
        var_3 = undefined;

        switch ( var_2.name )
        {
            case "cipher_choice_1":
                var_3 = spawn( "script_model", var_2.origin );
                var_3 setmodel( "tag_origin_cipher_letter" );
                var_3.angles = var_2.angles + ( 0, 90, 0 );
                break;
            case "cipher_choice_2":
                var_3 = spawn( "script_model", var_2.origin );
                var_3 setmodel( "tag_origin_cipher_letter" );
                var_3.angles = var_2.angles + ( 0, 90, 0 );
                break;
            case "cipher_choice_3":
                var_3 = spawn( "script_model", var_2.origin );
                var_3 setmodel( "tag_origin_cipher_letter" );
                var_3.angles = var_2.angles + ( 0, 90, 0 );
                break;
            case "cipher_choice_4":
                var_3 = spawn( "script_model", var_2.origin );
                var_3 setmodel( "tag_origin_cipher_letter" );
                var_3.angles = var_2.angles + ( 0, 90, 0 );
                break;
            default:
        }

        var_3 setscriptablepartstate( "cipher_glyph", "neutral" );

        if ( isdefined( var_3 ) )
            var_2._id_01F1 = var_3;

        var_4 = strtok( var_2.name, "_" );
        var_2.index = int( var_4[2] );
        level.cipher_choices[var_2.index - 1] = var_2;
    }
}

init_cipher_letters()
{
    level.words_for_cipher = [];
    level.words_for_cipher[0] = [ "chlorination", "bromination", "solvolysis", "azides", "alkenes", "hydrogenation", "oxidation", "reduction", "ethers", "ethyl", "aldehydes", "benzene", "nitriles", "allomer", "neutrino", "sublimation", "zwitterion" ];
    level.chosen_cipher_word = scripts\engine\utility::_id_DC6B( level.words_for_cipher[0] );
    roll_correct_letter_combination( level.chosen_cipher_word );
    level thread set_omnvar_based_on_word( level.chosen_cipher_word );
    var_0 = scripts\engine\utility::_id_8180( "cipher_letter_model", "script_noteworthy" );
    level.cipher_model_structs = [];

    foreach ( var_2 in var_0 )
    {
        switch ( var_2.name )
        {
            case "cipher_letter_13":
            case "cipher_letter_12":
            case "cipher_letter_11":
            case "cipher_letter_10":
            case "cipher_letter_9":
            case "cipher_letter_8":
            case "cipher_letter_7":
            case "cipher_letter_6":
            case "cipher_letter_5":
            case "cipher_letter_4":
            case "cipher_letter_3":
            case "cipher_letter_2":
            case "cipher_letter_1":
                var_3 = spawn( "script_model", var_2.origin );
                var_3 setmodel( "tag_origin_cipher_letter" );
                var_3.angles = var_2.angles + ( 0, 90, 0 );
                var_3 setcandamage( 1 );
                var_3.maxhealth = 99999;
                var_3.health = 99999;
                var_2._id_01F1 = var_3;
                var_2.current_letter = "";
                var_2.completed_cipher_letter = 0;
                var_4 = strtok( var_2.name, "_" );
                var_5 = var_4[2];
                var_2._id_01F1 setscriptablepartstate( "cipher_glyph", "neutral" );
                var_2._id_01F1 hide();
                var_2 thread watch_for_damage_on_cipher_letter( var_5 );
                level.cipher_model_structs[int( var_5 ) - 1] = [];
                level.cipher_model_structs[int( var_5 ) - 1] = var_2;
                break;
        }

        if ( !isdefined( level.cipher_pointer ) )
            level.cipher_pointer = 0;
    }

    level thread watch_for_correct_combination_of_letters_entered();
}

set_omnvar_based_on_word( var_0 )
{
    var_1 = 0;

    switch ( var_0 )
    {
        case "chlorination":
            var_1 = 1;
            break;
        case "bromination":
            var_1 = 2;
            break;
        case "solvolysis":
            var_1 = 3;
            break;
        case "azides":
            var_1 = 4;
            break;
        case "alkenes":
            var_1 = 5;
            break;
        case "hydrogenation":
            var_1 = 6;
            break;
        case "oxidation":
            var_1 = 7;
            break;
        case "reduction":
            var_1 = 8;
            break;
        case "ethers":
            var_1 = 9;
            break;
        case "ethyl":
            var_1 = 10;
            break;
        case "aldehydes":
            var_1 = 11;
            break;
        case "benzene":
            var_1 = 12;
            break;
        case "nitriles":
            var_1 = 13;
            break;
        case "bro":
            var_1 = 14;
            break;
        case "allomer":
            var_1 = 15;
            break;
        case "neutrino":
            var_1 = 16;
            break;
        case "sublimation":
            var_1 = 17;
            break;
        case "zwitterion":
            var_1 = 18;
            break;
    }

    setomnvar( "skulltop_cipher_hint", var_1 );
}

watch_for_correct_combination_of_letters_entered()
{
    level endon( "cipher_solved" );

    for (;;)
    {
        if ( !isdefined( level.chosen_cipher_word ) )
            continue;

        var_0 = "";

        for ( var_1 = 0; var_1 < level.cipher_pointer; var_1++ )
        {
            var_0 = var_0 + level.cipher_model_structs[var_1].current_letter;

            if ( level.chosen_cipher_word == var_0 )
                level notify( "cipher_solved" );
        }

        wait 1;
    }
}

roll_correct_letter_combination( var_0 )
{
    var_1 = getrandomletter();
    var_2 = getrandomletter();
    var_3 = getrandomletter();
    var_4 = getrandomletter();

    for (;;)
    {
        if ( does_cipher_have_all_letters( var_1, var_2, var_3, var_4, var_0 ) )
        {
            level.cipherlettera = var_1;
            level.cipherletterb = var_2;
            level.cipherletterc = var_3;
            level.cipherletterd = var_4;
            return;
        }
        else
        {
            var_1 = getrandomletter();
            var_2 = getrandomletter();
            var_3 = getrandomletter();
            var_4 = getrandomletter();
        }

        scripts\engine\utility::waitframe();
    }
}

does_cipher_have_all_letters( var_0, var_1, var_2, var_3, var_4 )
{
    calculate_cipher_from_letters_initially( var_0, var_1, var_2, var_3 );
    var_5 = scripts\engine\utility::_id_22AF( level.available_letters_for_cipher );
    var_6 = [];
    var_6 = get_chars_of_word_as_array( var_4 );
    var_7 = [ "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" ];

    foreach ( var_9 in var_6 )
    {
        if ( !scripts\engine\utility::array_contains( var_5, var_9 ) )
            return 0;
    }

    return 1;
}

get_chars_of_word_as_array( var_0 )
{
    var_1 = [];

    for ( var_2 = 0; var_2 < var_0.size; var_2++ )
        var_1[var_2] = var_0[var_2];

    return var_1;
}

cipher_activation_func( var_0, var_1 )
{
    var_1 endon( "disconnect" );

    if ( scripts\engine\utility::_id_9CEE( level.completed_cipher ) )
        return;

    if ( !isdefined( level.letter_roll ) )
        level.letter_roll = [];

    if ( !isdefined( level.letter_roll["a"] ) )
        level.letter_roll["a"] = "0";

    if ( !isdefined( level.letter_roll["b"] ) )
        level.letter_roll["b"] = "0";

    if ( !isdefined( level.letter_roll["c"] ) )
        level.letter_roll["c"] = "0";

    if ( !isdefined( level.letter_roll["d"] ) )
        level.letter_roll["d"] = "0";

    if ( !isdefined( level.letter_inputs ) )
        level.letter_inputs = [];

    switch ( var_0.name )
    {
        case "cipher_interaction_01":
            level.letter_roll["a"] = var_0.letter;
            break;
        case "cipher_interaction_02":
            level.letter_roll["b"] = var_0.letter;
            break;
        case "cipher_interaction_03":
            level.letter_roll["c"] = var_0.letter;
            break;
        case "cipher_interaction_04":
            level.letter_roll["d"] = var_0.letter;
            break;
        default:
    }

    if ( !isdefined( level.cipherlettera ) || !isdefined( level.cipherletterb ) || !isdefined( level.cipherletterc ) || !isdefined( level.cipherletterd ) )
    {
        wait 0.8;
        return;
    }

    level.letter_inputs[level.letter_inputs.size] = var_0.letter;
    var_2 = calculate_cipher_from_current_interaction( var_1, level.letter_inputs[0], level.letter_inputs[1], level.letter_inputs[2], level.letter_inputs[3] );
    spawn_fx_on_theatre_screen( var_1, var_2 );

    if ( level.letter_inputs.size >= 4 )
    {
        level thread clear_up_input_display_after_time( 20 );
        level.letter_inputs = [];
    }
}

clear_up_input_display_after_time( var_0 )
{
    level endon( "end_clear_input_func" );
    level thread watch_for_inputs_reentered();
    wait( var_0 );

    foreach ( var_3, var_2 in level.cipher_choices )
        level.cipher_choices[var_3]._id_01F1 setscriptablepartstate( "cipher_glyph", "neutral" );
}

watch_for_inputs_reentered()
{
    level endon( "end_clear_input_func" );
    level notify( "one_instance_of_func" );
    level endon( "one_instance_of_func" );

    for (;;)
    {
        if ( level.letter_inputs.size > 0 )
        {
            level notify( "end_clear_input_func" );
            continue;
        }

        scripts\engine\utility::waitframe();
    }
}

delay_enable_linked_interaction( var_0, var_1, var_2 )
{
    var_2 endon( "disconnect" );
    level waittill( "spawn_wave_done" );
    _id_0A59::_id_175D( var_0, var_2 );
}

spawn_fx_on_theatre_screen( var_0, var_1 )
{
    var_2 = ( 5076, -2547, 473 );
    var_3 = ( 0, 300, 0 );
    level.cipher_model_structs[level.cipher_pointer]._id_01F1 setscriptablepartstate( "cipher_glyph", var_1 );
    level.cipher_model_structs[level.cipher_pointer].current_letter = var_1;
}

getrandomletter()
{
    var_0 = [ "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" ];
    return scripts\engine\utility::_id_DC6B( var_0 );
}

init_painting_interactions()
{
    scripts\cp\maps\cp_town\cp_town_interactions::town_register_interaction( 1, "painting_interaction", undefined, undefined, ::radiation_collection_hint_func, ::paintings_activation_function, 0, 0, ::init_paintings_interaction, undefined );
}

paintings_activation_function( var_0, var_1 )
{
    level._id_7456 = ::custom_slow_time_func;
    level._id_11768 = ::custom_unslow_func;

    if ( !scripts\engine\utility::_id_9CEE( var_1.weeping_angels_puzzle ) )
        return;

    if ( isdefined( var_0.painting_owner ) )
    {
        if ( var_0.painting_owner == var_1 )
            return;
        else
            return;
    }

    if ( scripts\engine\utility::_id_9CEE( level.painting_active ) )
        return;

    level.painting_active = 1;
    var_0.painting_owner = var_1;
    var_1.hidden_figures_hit = 0;
    _id_0A59::_id_E019( var_0 );
    level thread watch_for_player_disconnect_after_painting_trigger( var_0, var_1 );
    level thread look_at_painting( var_0, var_1 );
    level thread slow_mo_sphere( var_0 );
    wait 40;
    level notify( "end_painting_" + var_0.name );
    var_1.triggered_rad_extractor_device = 0;
    level.painting_active = 0;
    var_0.painting_owner = undefined;
    var_1.inside_slow_sphere = 0;
    level._id_7456 = _id_0D53::_id_7383;
    level._id_11768 = _id_0D53::_id_12B9A;

    if ( var_1.hidden_figures_hit >= 7 )
    {
        level notify( var_0.name + "_done" );
        level thread scripts\engine\utility::_id_CE2B( "part_pickup", var_0.origin );

        if ( isdefined( var_1.array_of_weeping_angels ) )
        {
            foreach ( var_3 in var_1.array_of_weeping_angels )
                var_3 delete();
        }

        var_1.hidden_figures_hit = 0;
        _id_0A59::_id_E019( var_0 );
    }
    else
    {
        var_1.hidden_figures_hit = 0;

        if ( isdefined( var_1.array_of_weeping_angels ) )
        {
            foreach ( var_3 in var_1.array_of_weeping_angels )
                var_3 delete();
        }

        var_1 playlocalsound( "perk_machine_deny" );
        _id_0A59::_id_175C( var_0 );
    }
}

watch_for_player_disconnect_after_painting_trigger( var_0, var_1 )
{
    level endon( "game_ended" );
    level endon( "end_disconnect_thread_for_" + var_0.name );

    for (;;)
    {
        var_1 waittill( "disconnect" );

        if ( isdefined( var_1.array_of_weeping_angels ) )
        {
            foreach ( var_3 in var_1.array_of_weeping_angels )
                var_3 delete();
        }

        var_0._id_01F1 setmodel( "cp_town_willard_painting" );
        level.painting_active = 0;
        var_0.painting_owner = undefined;
        _id_0A59::_id_175C( var_0 );
        level notify( "end_disconnect_thread_for_" + var_0.name );
    }
}

look_at_painting( var_0, var_1 )
{
    var_1 endon( "disconnect" );
    level endon( "end_painting_" + var_0.name );

    for (;;)
    {
        if ( scripts\engine\utility::_id_56F4( var_0.origin, var_1.origin ) > 5184 )
        {
            scripts\engine\utility::waitframe();
            var_0._id_01F1 setmodel( "cp_town_willard_painting" );
            continue;
        }

        if ( scripts\engine\utility::within_fov( var_1.origin, var_1.angles, var_0.origin, cos( 70 ) ) )
        {
            var_0._id_01F1 setmodel( "cp_town_willard_painting" );
            scripts\engine\utility::waitframe();
            continue;
        }
        else if ( randomint( 100 ) > 98 )
        {
            var_0._id_01F1 setmodel( "cp_town_willard_painting_skull" );
            var_1 _meth_80B0( var_1.health / 15, var_1.origin );
        }

        scripts\engine\utility::waitframe();
    }
}

init_skullbusters_interactions()
{
    scripts\cp\maps\cp_town\cp_town_interactions::town_register_interaction( 1, "radiation_collector_interaction", undefined, undefined, ::radiation_collection_hint_func, ::collector_activation_func, 0, 0, ::init_collector_func, undefined );
    scripts\cp\maps\cp_town\cp_town_interactions::town_register_interaction( 1, "radiation_extraction_interaction", undefined, undefined, ::radiation_collection_hint_func, ::extraction_activation_func, 0, 0, ::init_extraction_point_func, undefined );
    scripts\cp\maps\cp_town\cp_town_chemistry::init_setup_radio_prefabs();
    scripts\cp\maps\cp_town\cp_town_chemistry::init_chem_reaction_interactions();
    init_painting_interactions();
    init_cipher_interactions();
}

collector_activation_func( var_0, var_1 )
{
    var_1 endon( "disconnect" );
    level endon( "game_ended" );

    if ( scripts\engine\utility::_id_9CEE( level.picked_up_radiation_collector ) )
        var_1 playlocalsound( "perk_machine_deny" );
    else if ( !isdefined( level.skulls_killed ) )
    {
        var_1 playlocalsound( "perk_machine_deny" );
        return;
    }
    else
    {
        if ( isdefined( level.skulls_killed ) && level.skulls_killed < 5 )
        {
            var_1 playlocalsound( "perk_machine_deny" );
            return;
            return;
        }

        level.picked_up_radiation_collector = 1;
        playfx( scripts\engine\utility::_id_7ECB( "hidden_figure_death" ), var_0.origin );
        var_1 playlocalsound( "part_pickup" );
        var_0._id_01F1 hide();
        level notify( "radiation_collector_found" );
        _id_0A59::_id_E019( var_0 );
    }
}

last_stand_watcher( var_0 )
{
    for (;;)
    {
        scripts\engine\utility::waittill_any( "last_stand", "death", "disconnect" );

        if ( !scripts\engine\utility::_id_9CEE( level.picked_up_radiation_collector ) )
        {
            _id_0A59::_id_175C( var_0 );
            level.picked_up_radiation_collector = undefined;
            var_0._id_01F1 show();
        }
    }
}

pickup_extractor_after_collecting_radiation( var_0 )
{
    playfx( scripts\engine\utility::_id_7ECB( "hidden_figure_death" ), level.radiation_extraction_interaction.origin );
    var_0 playlocalsound( "part_pickup" );
    level.rad_extractor_owner = var_0;
    give_crafted_rad_extractor( level.radiation_extraction_interaction, var_0 );
    var_0 thread last_stand_watcher_extractor_craft( level.radiation_extraction_interaction );
    level notify( "completed_extraction" );
}

last_stand_watcher_extractor_craft( var_0 )
{
    for (;;)
    {
        scripts\engine\utility::waittill_any( "last_stand", "death", "disconnect" );
        level.rad_extractor_owner = undefined;
    }
}

extraction_activation_func( var_0, var_1 )
{
    if ( !scripts\engine\utility::_id_9CEE( level.picked_up_radiation_collector ) )
        return;

    if ( isdefined( level.radiation_extractor ) && isdefined( level.radiation_extractor.ticks_of_radiation ) )
    {
        if ( level.radiation_extractor.ticks_of_radiation == 9 )
        {
            if ( !isdefined( level.rad_extractor_owner ) )
            {
                thread pickup_extractor_after_collecting_radiation( var_1 );
                return;
            }

            return;
        }
        else if ( level.radiation_extractor.ticks_of_radiation < 9 || level.radiation_extractor.ticks_of_radiation > 9 )
            return;
    }

    _id_0A59::_id_E019( level.radiation_collector[0] );
    level.radiation_extraction_interaction = var_0;
    var_2 = spawn( "script_model", var_0.origin );
    var_2 setmodel( "cp_town_radiation_extractor_top" );
    var_2.angles = var_0.angles;
    level.radiation_extractor = var_2;
    var_1 thread last_stand_watcher_extractor_craft( var_0 );
    var_1 playlocalsound( "part_pickup" );
    level notify( "radiation_extraction_started" );
    _id_0A59::_id_E019( level.radiation_extraction_interaction );
}

move_model_after_tick( var_0 )
{
    if ( var_0 == 0 )
    {
        var_1 = level.radiation_extraction_interaction.origin;
        self.angles = level.radiation_extraction_interaction.angles;
        self setmodel( "cp_town_radiation_extractor_top" );
        self moveto( var_1, 1 );
    }
    else
    {
        var_1 = self.origin + ( 0, 0, var_0 * 0.666 );
        self moveto( var_1, 0.5 );
    }

    scripts\engine\utility::_id_CE2B( "town_radiation_extractor_tick_up", self.origin + ( 0, 0, 5 ) );
}

init_cipher_interaction_structs()
{
    var_0 = scripts\engine\utility::_id_8180( "cipher_interaction", "script_noteworthy" );

    if ( isdefined( level.cipher_interactions_structs ) )
        return;

    foreach ( var_4, var_2 in var_0 )
    {
        var_3 = undefined;

        switch ( var_2.name )
        {
            case "cipher_interaction_01":
                var_3 = spawn( "script_model", var_2.origin + ( 0, 0, 10 ) );
                var_3 setmodel( "tag_origin_cipher_letter" );
                var_3.angles = var_2.angles + ( 0, 90, 0 );
                var_3 setscriptablepartstate( "cipher_glyph", level.cipherlettera );
                var_2.letter = level.cipherlettera;
                break;
            case "cipher_interaction_02":
                var_3 = spawn( "script_model", var_2.origin + ( 0, 0, 10 ) );
                var_3 setmodel( "tag_origin_cipher_letter" );
                var_3.angles = var_2.angles + ( 0, 90, 0 );
                var_3 setscriptablepartstate( "cipher_glyph", level.cipherletterb );
                var_2.letter = level.cipherletterb;
                break;
            case "cipher_interaction_03":
                var_3 = spawn( "script_model", var_2.origin + ( 0, 0, 10 ) );
                var_3 setmodel( "tag_origin_cipher_letter" );
                var_3.angles = var_2.angles + ( 0, 90, 0 );
                var_3 setscriptablepartstate( "cipher_glyph", level.cipherletterc );
                var_2.letter = level.cipherletterc;
                break;
            case "cipher_interaction_04":
                var_3 = spawn( "script_model", var_2.origin + ( 0, 0, 10 ) );
                var_3 setmodel( "tag_origin_cipher_letter" );
                var_3.angles = var_2.angles + ( 0, 90, 0 );
                var_3 setscriptablepartstate( "cipher_glyph", level.cipherletterd );
                var_2.letter = level.cipherletterd;
                break;
            default:
        }

        if ( isdefined( var_3 ) )
            var_2._id_01F1 = var_3;

        _id_0A59::_id_E019( var_2 );
        var_2._id_01F1 hide();
        level.cipher_interactions_structs[var_4] = var_2;
        level.cipher_failures = 0;
    }
}

watch_for_damage_on_cipher_letter( var_0 )
{
    self endon( "death" );
    level endon( "game_ended" );
    self endon( "end_this_thread_for_" + self.name );

    for (;;)
    {
        self._id_01F1 waittill( "damage", var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10 );

        if ( !var_2 _id_0A77::_id_9D05() )
            continue;

        if ( isdefined( var_5 ) && var_5 == "MOD_MELEE" )
        {
            self._id_01F1.maxhealth = 99999;
            self._id_01F1.health = 99999;
            continue;
        }

        if ( scripts\engine\utility::_id_9CEE( self.completed_cipher_letter ) )
        {
            self._id_01F1.maxhealth = 99999;
            self._id_01F1.health = 99999;
            continue;
        }

        if ( int( var_0 ) - 1 >= level.chosen_cipher_word.size )
        {
            self._id_01F1.maxhealth = 99999;
            self._id_01F1.health = 99999;
            continue;
        }

        if ( self.current_letter == level.chosen_cipher_word[int( var_0 ) - 1] )
        {
            playfx( scripts\engine\utility::_id_7ECB( "hidden_figure_death" ), var_4 );
            level thread scripts\engine\utility::_id_CE2B( "part_pickup", var_4 );
            self.completed_cipher_letter = 1;
            level.cipher_pointer++;
            continue;
        }

        level.cipher_failures++;
        level thread scripts\engine\utility::_id_CE2B( "purchase_deny", var_4 );

        if ( level.cipher_failures >= 6 )
        {
            foreach ( var_12 in level.cipher_interactions_structs )
            {
                foreach ( var_14 in level.players )
                {
                    _id_0A59::_id_E01A( var_12, var_14 );
                    level thread delay_enable_linked_interaction( var_12, 30, var_14 );
                    level.cipher_failures = 0;
                }
            }
        }
    }
}

init_paintings_interaction()
{
    var_0 = scripts\engine\utility::_id_8180( "painting_interaction", "script_noteworthy" );

    if ( isdefined( level.paintings_struct ) )
        return;

    foreach ( var_4, var_2 in var_0 )
    {
        var_3 = getent( var_2._id_0334, "targetname" );
        var_2._id_01F1 = var_3;
        level.paintings_struct[var_4] = var_2;
    }
}

init_collector_func()
{
    var_0 = scripts\engine\utility::_id_8180( "radiation_collector_interaction", "script_noteworthy" );

    foreach ( var_4, var_2 in var_0 )
    {
        var_3 = undefined;

        switch ( var_2.name )
        {
            case "radiation_collector":
                var_3 = spawn( "script_model", var_2.origin );
                var_3 setmodel( "cp_town_radiation_extractor" );
                var_3.angles = var_2.angles;
                break;
            default:
        }

        if ( isdefined( var_3 ) )
            var_2._id_01F1 = var_3;

        level.radiation_collector[var_4] = var_2;
    }
}

init_extraction_point_func()
{
    var_0 = scripts\engine\utility::_id_8180( "radiation_extraction_interaction", "script_noteworthy" );

    foreach ( var_4, var_2 in var_0 )
    {
        var_3 = undefined;

        switch ( var_2.name )
        {
            case "radiation_extraction_point":
                var_3 = spawn( "script_model", var_2.origin );
                var_3 setmodel( "cp_town_radiation_extractor_base" );
                var_3.angles = var_2.angles;
                break;
            default:
        }

        if ( isdefined( var_3 ) )
            var_2._id_01F1 = var_3;

        level.radiation_collector[var_4] = var_2;
    }
}

radiation_collection_hint_func( var_0, var_1 )
{
    return "";
}

init_skulls_to_shoot()
{
    var_0 = scripts\engine\utility::_id_8180( "gns_skull", "script_noteworthy" );
    var_1 = [ "skull1", "skull2", "skull3", "skull4", "skull5", "skull6", "skull7", "skull8", "skull9", "skull10" ];
    var_2 = 0;

    foreach ( var_8, var_4 in var_0 )
    {
        if ( var_2 >= 5 )
            break;

        var_5 = scripts\engine\utility::_id_DC6B( var_1 );
        var_1 = scripts\engine\utility::array_remove( var_1, var_5 );
        var_6 = scripts\engine\utility::_id_817E( var_5, "targetname" );
        var_2++;
        var_7 = undefined;

        switch ( var_5 )
        {
            case "skull1":
                var_7 = spawn( "script_model", var_6.origin );
                var_7 setmodel( "zmb_8_bit_price_town" );
                var_7.angles = var_6.angles;
                var_6.object_num = 1;
                break;
            case "skull2":
                var_7 = spawn( "script_model", var_6.origin );
                var_7 setmodel( "zmb_8_bit_price_town" );
                var_7.angles = var_6.angles;
                var_6.object_num = 2;
                break;
            case "skull3":
                var_7 = spawn( "script_model", ( 7147, 2187, 328 ) );
                var_7 setmodel( "zmb_8_bit_price_town" );
                var_7.angles = ( 0, 168.9, 0 );
                var_6.object_num = 3;
                break;
            case "skull4":
                var_7 = spawn( "script_model", var_6.origin );
                var_7 setmodel( "zmb_8_bit_price_town" );
                var_7.angles = var_6.angles;
                var_6.object_num = 4;
                break;
            case "skull5":
                var_7 = spawn( "script_model", var_6.origin );
                var_7 setmodel( "zmb_8_bit_price_town" );
                var_7.angles = var_6.angles;
                var_6.object_num = 5;
                break;
            case "skull6":
                var_7 = spawn( "script_model", var_6.origin );
                var_7 setmodel( "zmb_8_bit_price_town" );
                var_7.angles = var_6.angles;
                var_6.object_num = 6;
                break;
            case "skull7":
                var_7 = spawn( "script_model", var_6.origin );
                var_7 setmodel( "zmb_8_bit_price_town" );
                var_7.angles = var_4.angles;
                var_6.object_num = 7;
                break;
            case "skull8":
                var_7 = spawn( "script_model", var_6.origin );
                var_7 setmodel( "zmb_8_bit_price_town" );
                var_7.angles = var_6.angles;
                var_6.object_num = 8;
                break;
            case "skull9":
                var_7 = spawn( "script_model", ( 6785, -2650.5, 105 ) );
                var_7 setmodel( "zmb_8_bit_price_town" );
                var_7.angles = ( 0, 243.3, 0 );
                var_6.object_num = 9;
                break;
            case "skull10":
                var_7 = spawn( "script_model", var_6.origin );
                var_7 setmodel( "zmb_8_bit_price_town" );
                var_7.angles = var_6.angles;
                var_6.object_num = 10;
                break;
            default:
        }

        var_7 setcandamage( 1 );
        var_7.maxhealth = 5;
        var_7.health = 5;
        var_7._id_4CE9 = 0;

        if ( isdefined( var_7 ) )
            var_6._id_01F1 = var_7;

        level.skullbusters_map_skulls[var_8] = var_6;
        level.skullbusters_map_skulls[var_8] thread watch_for_skull_death();
    }
}

load_gns_3_vfx()
{
    level._effect["combo_arc_green"] = loadfx( "vfx/iw7/core/zombie/ghosts_n_skulls/vfx_ghost_combo_arc_green.vfx" );
    level._effect["combo_arc_red"] = loadfx( "vfx/iw7/core/zombie/ghosts_n_skulls/vfx_ghost_combo_arc_red.vfx" );
    level._effect["combo_arc_blue"] = loadfx( "vfx/iw7/core/zombie/ghosts_n_skulls/vfx_ghost_combo_arc_blue.vfx" );
    level._effect["combo_arc_yellow"] = loadfx( "vfx/iw7/core/zombie/ghosts_n_skulls/vfx_ghost_combo_arc_yellow.vfx" );
}

cp_town_set_moving_target_color( var_0, var_1 )
{

}

determine_color( var_0 )
{
    var_1 = scripts\engine\utility::_id_22A7( var_0 );
    level.moving_target_color_based_on_priority = [];
    level.moving_target_color_based_on_priority["low"] = var_1[0];
    level.moving_target_color_based_on_priority["medium"] = var_1[1];
    level.moving_target_color_based_on_priority["high"] = var_1[2];
}

cp_town_should_moving_target_explode( var_0, var_1 )
{
    if ( !isdefined( level.color_indicator_color ) )
        return 0;

    if ( level.color_indicator_color == "off" )
        return 0;

    return var_0._id_00B9 == level.color_indicator_color;
}

cp_town_hit_wrong_moving_target_func( var_0, var_1, var_2 )
{
    level thread scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::activate_red_moving_target( var_1 );
}

delay_determine_game_fail()
{
    level endon( "game_ended" );
    var_0 = 2;
    wait( var_0 );
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_53BB();
}

town_gns_player_reward_func()
{
    level.unlimited_fnf = 1;

    foreach ( var_1 in level.players )
    {
        if ( !scripts\engine\utility::_id_9CEE( level.entered_thru_card ) )
            var_1 _id_0D2A::_id_12D7C( "QUARTER_MUNCHER", 1 );

        var_1 thread scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::give_gns_base_reward( var_1 );
    }

    level notify( "end_this_thread_of_gns_fnf_card" );
}

upgrade_magic_wheel()
{
    level.magic_wheel_upgraded_pap1 = 1;

    if ( isdefined( level.current_active_wheel ) )
        level.current_active_wheel setscriptablepartstate( "fx", "upgrade" );
}

gns3_formation_movement()
{
    level._id_732A = [];
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_DEB7( 1, scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_731A );
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_DEB7( 2, scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_731B );
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_DEB7( 3, scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_731C );
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_DEB7( 4, scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_731D );
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_DEB7( 5, scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_731E );
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_DEB7( 6, scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_731F );
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_DEB7( 7, scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_7320 );
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_DEB7( 8, scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_7321 );
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_DEB7( 9, scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_7322 );
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_DEB7( 10, scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_7323 );
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_DEB7( 11, scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_7324 );
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_DEB7( 12, scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_7325 );
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_DEB7( 13, scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_7326 );
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_DEB7( 14, scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_7327 );
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_DEB7( 15, scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_7328 );
}

register_ghost_form()
{
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_DE99( 1, 1 );
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_DE99( 2, 2 );
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_DE99( 2, 3 );
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_DE99( 2, 4 );
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_DE99( 1, 5 );
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_DE99( 2, 6 );
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_DE99( 2, 7 );
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_DE99( 2, 8 );
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_DE99( 2, 9 );
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_DE99( 2, 10 );
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_DE99( 2, 11 );
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_DE99( 2, 12 );
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_DE99( 3, 13 );
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_DE99( 3, 14 );
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_DE99( 3, 15 );
}

register_waves_movement()
{
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_DEC3( 1, 1.0, 2.0, 0.7 );
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_DEC3( 2, 1.0, 2.0, 0.7 );
    scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_DEC3( 3, 2.0, 4.0, 0.7 );
    level._id_269B = undefined;
    level._id_732A = undefined;
}

load_cp_town_ghost_exp_vfx()
{
    level._effect["ghost_explosion_death_red"] = loadfx( "vfx/iw7/core/zombie/ghosts_n_skulls/vfx_zmb_ghost_imp_red.vfx" );
    level._effect["ghost_explosion_death_yellow"] = loadfx( "vfx/iw7/core/zombie/ghosts_n_skulls/vfx_zmb_ghost_imp_yellow.vfx" );
    level._effect["ghost_explosion_death_blue"] = loadfx( "vfx/iw7/core/zombie/ghosts_n_skulls/vfx_zmb_ghost_imp_blue.vfx" );
    level._effect["ghost_explosion_death_white"] = loadfx( "vfx/iw7/core/zombie/ghosts_n_skulls/vfx_zmb_ghost_imp_white.vfx" );
    level._effect["sb_quest_item_pickup"] = loadfx( "vfx/iw7/core/zombie/vfx_zom_souvenir_pickup.vfx" );
}

activate_gns_platforms()
{
    var_0 = scripts\engine\utility::_id_22A7( [ "up_down", "up_down", "forward_backward", "forward_backward" ] );
    var_1 = scripts\engine\utility::_id_22A7( [ "green", "yellow", "blue", "red" ] );

    foreach ( var_4, var_3 in var_1 )
        level thread activate_platform_color( var_3, var_0[var_4] );
}

town_gns_start_func()
{
    record_vision_set();
    activate_gns_platforms();
    activate_death_floor();
    activate_color_indicator();
}

town_gns_end_func()
{
    restore_vision_set();
    deactivate_platforms();
    deactivate_death_floor();
}

record_vision_set()
{
    level.pre_gns_vision_set_override = level._id_13445;
    level._id_13445 = "cp_zmb_ghost_path";
}

restore_vision_set()
{
    level._id_13445 = level.pre_gns_vision_set_override;
}

activate_death_floor()
{
    var_0 = getent( "skull_hop_death_floor", "targetname" );
    var_0 thread death_floor_player_monitor( var_0 );
}

deactivate_death_floor()
{
    var_0 = getent( "skull_hop_death_floor", "targetname" );
    var_0 notify( "stop_death_floor" );
}

activate_color_indicator()
{
    var_0 = [ ( -8222, 2421, -2090 ), ( -6356, 2402, -2090 ) ];
    level.skull_hop_color_indicators = [];

    foreach ( var_2 in var_0 )
    {
        var_3 = spawn( "script_model", var_2 );
        var_3 setmodel( "crab_boss_origin" );
        level.skull_hop_color_indicators[level.skull_hop_color_indicators.size] = var_3;
    }
}

deactivate_color_indicator()
{
    kill_color_indicator_manager();

    foreach ( var_1 in level.skull_hop_color_indicators )
        var_1 delete();
}

update_color_indicator_color( var_0 )
{
    level.color_indicator_color = var_0;

    foreach ( var_2 in level.skull_hop_color_indicators )
        var_2 setscriptablepartstate( "skull_hop_indicator", var_0 );
}

death_floor_player_monitor( var_0 )
{
    var_0 endon( "stop_death_floor" );

    for (;;)
    {
        var_0 waittill( "trigger", var_1 );

        if ( isplayer( var_1 ) )
        {
            scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_1162C( var_1 );
            var_2 = scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::_id_77CF();

            if ( isdefined( var_2 ) )
                level thread scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::activate_red_moving_target( var_2 );
        }
    }
}

deactivate_platforms()
{
    level notify( "stop_GnS_platforms" );
    var_0 = [ "blue", "red", "green", "yellow" ];

    foreach ( var_2 in var_0 )
    {
        var_3 = getent( var_2 + "_platform", "targetname" );
        var_4 = getent( var_2 + "_platform_trigger", "targetname" );
        var_3.origin = var_3._id_C725;
        var_4.origin = var_4._id_C725;
    }
}

activate_platform_color( var_0, var_1 )
{
    level endon( "game_ended" );
    level endon( "stop_GnS_platforms" );
    var_2 = 48;
    var_3 = 32;
    var_4 = 64;
    var_5 = getent( var_0 + "_platform", "targetname" );
    var_6 = getent( var_0 + "_platform_trigger", "targetname" );
    var_5.origin = var_5._id_C725;
    var_6.origin = var_6._id_C725;
    var_7 = var_4 * scripts\engine\utility::ter_op( randomintrange( 0, 100 ) > 5, 1, -1 );
    var_8 = randomfloatrange( var_3, var_2 );
    var_9 = var_4 / var_8;

    if ( var_1 == "up_down" )
    {
        var_5 moveto( var_5.origin + ( 0, 0, var_7 ), var_9 );
        var_5 waittill( "movedone" );

        for (;;)
        {
            var_5 moveto( var_5.origin + ( 0, 0, var_7 * -2 ), var_9 );
            var_5 waittill( "movedone" );
            var_5 moveto( var_5.origin + ( 0, 0, var_7 * 2 ), var_9 );
            var_5 waittill( "movedone" );
        }
    }
    else
    {
        var_5 moveto( var_5.origin + ( 0, var_7, 0 ), var_9 );
        var_5 waittill( "movedone" );

        for (;;)
        {
            var_5 moveto( var_5.origin + ( 0, var_7 * -2, 0 ), var_9 );
            var_5 waittill( "movedone" );
            var_5 moveto( var_5.origin + ( 0, var_7 * 2, 0 ), var_9 );
            var_5 waittill( "movedone" );
        }
    }
}

change_cube_color( var_0, var_1 )
{
    var_0._id_00B9 = var_1;
    var_0 setscriptablepartstate( "cube", var_1 );
}

town_get_fake_ghost_model_func( var_0 )
{
    return "fake_zombie_ghost_cube_" + var_0;
}

reveal_moving_target_color( var_0 )
{
    var_0 setmodel( "zmb_pixel_skull" );
    var_0.revealed = 1;
    var_0 setscriptablepartstate( "skull_vfx", var_0._id_00B9 );
}

set_allow_skulls_to_explode( var_0 )
{
    level.allow_skulls_to_explode = var_0;
}

get_moving_targets_in_same_subgroup( var_0 )
{
    var_1 = [];

    foreach ( var_3 in level._id_BD43 )
    {
        foreach ( var_5 in var_3 )
        {
            if ( isdefined( var_5 ) && var_5.subgroup == var_0 )
                var_1[var_1.size] = var_5;
        }
    }

    return var_1;
}

all_moving_targets_are_revealed( var_0 )
{
    foreach ( var_2 in var_0 )
    {
        if ( var_2.revealed == 0 )
            return 0;
    }

    return 1;
}

explode_moving_targets( var_0, var_1 )
{
    var_2 = 1;
    var_3 = get_vfx_start_moving_target( var_0 );

    foreach ( var_5 in var_0 )
    {
        if ( var_5 == var_3 )
        {
            var_5 thread delay_moving_target_explode( var_5, var_1, var_2 );
            continue;
        }

        var_5 thread delay_moving_target_explode( var_5, var_1, var_2, var_3 );
    }
}

get_vfx_start_moving_target( var_0 )
{
    foreach ( var_2 in var_0 )
    {
        if ( scripts\engine\utility::_id_9CEE( var_2.vfx_start ) )
            return var_2;
    }
}

delay_moving_target_explode( var_0, var_1, var_2, var_3 )
{
    play_combo_arc_vfx( var_0, var_2, var_3 );
    playfx( level._effect["ghost_explosion_death_" + var_0._id_00B9], var_0.origin, anglestoforward( var_0.angles ), anglestoup( var_0.angles ) );
    _id_0C2D::remove_moving_target_default( var_0, var_1 );
}

play_combo_arc_vfx( var_0, var_1, var_2 )
{
    if ( isdefined( var_2 ) )
    {
        var_3 = int( var_1 * 20 );

        for ( var_4 = 0; var_4 < var_3; var_4++ )
        {
            var_5 = var_2.origin;
            var_6 = var_0.origin;
            var_7 = var_6 - var_5;
            var_8 = vectortoangles( var_7 );
            playfxbetweenpoints( level._effect["combo_arc_" + var_0._id_00B9], var_5, var_8, var_6 );
            scripts\engine\utility::waitframe();
        }
    }
    else
        wait( var_1 );
}

adjust_player_exit_gns_pos()
{
    level endon( "game_ended" );
    wait 5;
    var_0 = scripts\engine\utility::_id_8180( "ghost_wave_player_end", "targetname" );

    foreach ( var_2 in var_0 )
    {
        if ( var_2.origin == ( -743, 2620, 906 ) )
        {
            var_2.origin = ( -745, 2620, 906 );
            var_2.angles = ( 0, 345, 0 );
            continue;
        }

        if ( var_2.origin == ( -743, 2572, 906 ) )
        {
            var_2.origin = ( -771, 2598, 906 );
            var_2.angles = ( 0, 15, 0 );
            continue;
        }

        if ( var_2.origin == ( -743, 2596, 906 ) )
        {
            var_2.origin = ( -784, 2621, 906 );
            var_2.angles = ( 0, 355, 0 );
        }
    }
}

adjust_mahjong_pick_up_pos()
{
    level endon( "game_ended" );
    wait 5;
    var_0 = scripts\engine\utility::_id_8180( "sb_mahjong_tile", "targetname" );

    foreach ( var_2 in var_0 )
    {
        if ( var_2.origin == ( 1393, 816, 801 ) )
        {
            var_2.origin = ( 1040, 568, 790.6 );
            var_2.angles = ( 7, 135, -1 );
        }
    }
}

reactivate_skullbuster_cabinet()
{
    if ( !_id_0D52::quest_line_exist( "reactivateghost" ) )
    {
        var_0 = getomnvar( "zm_num_ghost_n_skull_coin" );

        if ( isdefined( var_0 ) && var_0 < 5 )
            return;

        _id_0D52::_id_DED3( "reactivateghost", 0, scripts\cp\maps\cp_zmb\cp_zmb_ghost_wave::reactivate_cabinet, ::shoot_the_machine, ::complete_shoot_the_machine, ::debug_shoot_the_machine );
        _id_0D52::_id_DED3( "reactivateghost", 1, ::blank, ::_id_135F6, ::_id_447F, ::_id_4F30 );
    }

    level thread _id_0D52::_id_10CEE( "reactivateghost" );
}

init_weeping_angels_note()
{
    var_0 = scripts\engine\utility::_id_8180( "weeping_angels_struct", "script_noteworthy" );
    level.weeping_angels_note = [];

    foreach ( var_4, var_2 in var_0 )
    {
        var_3 = spawn( "script_model", var_2.origin + ( 0, 0, 0.05 ) );
        var_3.angles = var_2.angles;
        var_3 setmodel( "cp_town_paper_note_02" );
        var_3 setcandamage( 1 );
        var_3.maxhealth = 5;
        var_3.health = 5;

        if ( isdefined( var_3 ) )
            var_2._id_01F1 = var_3;

        var_2._id_01F1 hide();
        level.weeping_angels_note[var_4] = var_2;
    }
}

watch_for_damage_on_struct()
{
    self endon( "death" );
    level endon( "game_ended" );

    for (;;)
    {
        self._id_01F1 waittill( "damage", var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 );

        if ( !isplayer( var_1 ) )
            continue;

        if ( !var_1 _id_0A77::_id_9D05() )
            continue;

        if ( !scripts\engine\utility::_id_9CEE( level.completed_cipher ) )
            continue;

        if ( isdefined( var_4 ) && var_4 != "MOD_MELEE" )
            continue;

        playfx( scripts\engine\utility::_id_7ECB( "hidden_figure_death" ), var_3 );
        var_1 playlocalsound( "part_pickup" );
        self._id_01F1 delete();
        level notify( "weeping_angels_note_read" );
    }
}

init()
{
    var_0 = spawnstruct();
    var_0._id_11901 = 40.0;
    var_0._id_AC71 = 40.0;
    var_0._id_017B = &"COOP_CRAFTABLES_PICKUP";
    var_0._id_CC28 = &"COOP_CRAFTABLES_PLACE";
    var_0._id_38E3 = &"COOP_CRAFTABLES_CANNOT_PLACE";
    var_0._id_CC0A = &"COOP_CRAFTABLES_PLACE_CANCELABLE";
    var_0._id_74BF = &"ZOMBIE_CRAFTING_SOUVENIRS_DETONATE";
    var_0._id_9F43 = 0;
    var_0._id_CC22 = 30.0;
    var_0._id_CC25 = 16.0;
    var_0._id_3AA7 = ( 0, 0, 35 );
    var_0._id_3AA6 = ( 0, -90, 0 );
    var_0._id_B91A = "cp_town_radiation_extractor";
    var_0._id_B924 = "cp_town_radiation_extractor";
    var_0._id_B925 = "cp_town_radiation_extractor";
    level.rad_extractor_settings = [];
    level.rad_extractor_settings["crafted_rad_extractor"] = var_0;
}

_id_82B8( var_0, var_1 )
{
    var_1._id_A039 = "crafted_rad_extractor";
    var_1 thread _id_13932();
    var_1 notify( "new_power", "crafted_rad_extractor" );
    var_1 setclientomnvar( "zom_crafted_weapon", 3 );
    var_1 thread _id_0A77::_id_1308C( var_1, "iw7_pickup_zm" );
    _id_0A77::_id_F313( "crafted_rad_extractor", ::_id_82B8, var_1 );
}

_id_13932()
{
    self endon( "disconnect" );
    self endon( "death" );
    self notify( "craft_dpad_watcher" );
    self endon( "craft_dpad_watcher" );
    self notifyonplayercommand( "pullout_medusa", "+actionslot 3" );

    for (;;)
    {
        self waittill( "pullout_medusa" );

        if ( scripts\engine\utility::_id_9CEE( self._id_9D81 ) )
            continue;

        if ( _id_0A77::_id_9D05() )
            break;
    }

    thread _id_837E( 1, 40 );
}

_id_837E( var_0, var_1 )
{
    self endon( "disconnect" );
    _id_0A77::_id_41C4( "msg_power_hint" );
    var_2 = _id_49E8( self );
    _id_0A77::_id_E077();
    self._id_3AA5 = var_2;
    var_3 = _id_F685( var_2, var_0, var_1 );
    self._id_3AA5 = undefined;
    thread _id_0A77::_id_1365D();
    self._id_9D81 = 0;

    if ( isdefined( var_2 ) )
        return 1;
    else
        return 0;
}

_id_F685( var_0, var_1, var_2, var_3 )
{
    self endon( "disconnect" );
    var_0 _id_B543( self, var_1 );
    scripts\engine\utility::_id_1C71( 0 );
    self notifyonplayercommand( "place_medusa", "+attack" );
    self notifyonplayercommand( "place_medusa", "+attack_akimbo_accessible" );
    self notifyonplayercommand( "cancel_medusa", "+actionslot 3" );

    if ( !level._id_4542 )
    {
        self notifyonplayercommand( "cancel_medusa", "+actionslot 5" );
        self notifyonplayercommand( "cancel_medusa", "+actionslot 6" );
        self notifyonplayercommand( "cancel_medusa", "+actionslot 7" );
    }

    for (;;)
    {
        var_4 = scripts\engine\utility::_id_13734( "place_medusa", "cancel_medusa", "force_cancel_placement" );

        if ( !isdefined( var_0 ) )
        {
            scripts\engine\utility::_id_1C71( 1 );
            return 1;
        }

        if ( !isdefined( var_4 ) )
            var_4 = "force_cancel_placement";

        if ( var_4 == "cancel_medusa" || var_4 == "force_cancel_placement" )
        {
            if ( !var_1 && var_4 == "cancel_medusa" )
                continue;

            scripts\engine\utility::_id_1C71( 1 );
            var_0 _id_B542();

            if ( var_4 != "force_cancel_placement" )
                thread _id_13932();
            else if ( var_1 )
                _id_0A77::_id_DFE0( self );

            return 0;
        }

        if ( !var_0._id_3872 )
            continue;

        if ( var_1 )
            _id_0A77::_id_DFE0( self );

        var_0 _id_B545( var_2, undefined, self );
        scripts\engine\utility::_id_1C71( 1 );
        return 1;
    }
}

_id_49E8( var_0 )
{
    var_1 = spawnturret( "misc_turret", var_0.origin + ( 0, 0, 25 ), "sentry_minigun_mp" );
    var_1.angles = var_0.angles;
    var_1.owner = var_0;
    var_1.name = "crafted_rad_extractor";
    var_1 hide();
    var_1._id_3AA1 = spawn( "script_model", var_1.origin + ( 0, 0, 25 ) );
    var_1._id_3AA1 setmodel( level.rad_extractor_settings["crafted_rad_extractor"]._id_B91A );
    var_1 maketurretinoperable();
    var_1 _meth_835B( 1 );
    var_1 _meth_830F( "sentry_offline" );
    var_1 makeunusable();
    var_1 _meth_8336( var_0 );
    var_1 _id_B53F( var_0 );
    return var_1;
}

_id_B53F( var_0 )
{
    self._id_3872 = 1;
    _id_B544();
}

_id_B53C( var_0 )
{
    self waittill( "death" );
    level.rad_extractor_owner = undefined;

    if ( !isdefined( self ) )
        return;

    _id_B544();
    self playsound( "sentry_explode" );

    if ( isdefined( self._id_3CBF ) )
        self._id_3CBF delete();

    _id_0A77::_id_E11E();

    if ( isdefined( self ) )
    {
        playfxontag( scripts\engine\utility::_id_7ECB( "hidden_figure_death" ), self, "tag_origin" );
        self playsound( "sentry_explode_smoke" );
        wait 0.1;

        if ( isdefined( self ) )
            self delete();
    }
}

_id_B53D()
{
    self endon( "death" );
    level endon( "game_ended" );

    for (;;)
    {
        self waittill( "trigger", var_0 );

        if ( !var_0 _id_0A77::_id_9D05() )
            continue;

        if ( scripts\engine\utility::_id_9CEE( var_0._id_9D81 ) )
            continue;

        var_0 thread _id_837E( 0, self._id_AC71 );
        self playsound( "trap_medusa_pickup" );
        _id_0A77::_id_E11E();
        self delete();
    }
}

_id_B545( var_0, var_1, var_2 )
{
    var_3 = spawn( "script_model", self.origin + ( 0, 0, 0 ) );
    var_3.angles = self.angles;
    var_3.name = "crafted_rad_extractor";
    self._id_3AA1 delete();
    var_3 solid();

    if ( !isdefined( var_2._id_B546 ) )
        var_2._id_B546 = 1;

    var_4 = "cp_town_radiation_extractor";
    var_3 setmodel( var_4 );
    var_3 setcandamage( 1 );
    var_3.health = 5;
    var_3.maxhealth = 5;
    var_3._id_AC71 = 40.0;
    self._id_3A9D _meth_80F3();
    self._id_3A9D = undefined;
    var_2._id_9D81 = 0;
    var_3.owner = var_2;

    if ( ispointinvolume( var_3.origin, level.pool_placement_volume ) )
    {
        level thread radiation_extractor_after_pool_part( var_3.origin );
        level.pool_extraction_fx = spawnfx( level._effect["pool_radiation"], var_3.origin + ( 0, 0, 3 ) );
        triggerfx( level.pool_extraction_fx );
        level notify( "placed_extractor_in_pool" );
        _id_0A59::_id_E019( level.radiation_extraction_interaction );
        level.medusa_after_placed = var_3;
        _id_B544();
    }
    else
        var_3 thread _id_B541( var_0 );

    self notify( "placed" );
    self delete();
}

_id_B542()
{
    self._id_3A9D _meth_80F3();

    if ( isdefined( self.owner ) )
        self.owner._id_9D81 = 0;

    self._id_3AA1 delete();
    self delete();
}

_id_B543( var_0, var_1 )
{
    self setmodel( level.rad_extractor_settings["crafted_rad_extractor"]._id_B924 );
    self _meth_8335( var_0 );
    self setcandamage( 0 );
    self._id_3A9D = var_0;
    var_0._id_9D81 = 1;

    if ( var_1 )
        self._id_6DEC = 1;

    var_0 thread _id_0A77::_id_12E3F( self, self._id_3AA1, level.rad_extractor_settings["crafted_rad_extractor"] );
    thread _id_0A77::_id_A025( var_0 );
    thread _id_0A77::_id_A026( var_0 );
    thread _id_0A77::_id_A027( var_0 );
    _id_B544();
    self notify( "carried" );
}

_id_B541( var_0, var_1 )
{
    self setcursorhint( "HINT_NOICON" );
    self sethintstring( level.rad_extractor_settings["crafted_rad_extractor"]._id_017B );
    self makeusable();
    self _meth_84A7( "tag_fx" );
    self _meth_84A5( 120 );
    self _meth_84A2( 96 );
    thread medusa_watch_for_player_melee( self.owner );
    thread _id_B53C( self.owner );
    thread _id_0A77::_id_A021( "medusa_handleOwner" );
    thread _id_0A77::_id_A030( var_0, level.rad_extractor_settings["crafted_rad_extractor"]._id_11901 );
    thread _id_B53D();
    _id_0A77::_id_1861();
}

medusa_watch_for_player_melee( var_0 )
{
    self.health = 5;
    self.maxhealth = 5;
    self setcandamage( 1 );

    for (;;)
    {
        self waittill( "damage", var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10 );

        if ( !isplayer( var_2 ) )
            continue;

        if ( var_2 != var_0 )
            continue;

        if ( !var_2 _id_0A77::_id_9D05() )
            continue;

        if ( isdefined( var_5 ) && var_5 != "MOD_MELEE" )
        {
            self.health = 5;
            self.maxhealth = 5;
            var_2 playlocalsound( "perk_machine_deny" );
            continue;
        }

        if ( !scripts\engine\utility::_id_9CEE( var_2.triggered_rad_extractor_device ) )
        {
            var_2.triggered_rad_extractor_device = 1;
            self.health = 5;
            self.maxhealth = 5;
            var_2 thread scripts\cp\maps\cp_town\cp_town::update_special_mode_for_player( var_2 );
        }
    }
}

_id_B544()
{
    self makeunusable();
    _id_0A77::_id_E11E();
}

give_crafted_rad_extractor( var_0, var_1 )
{
    var_1 thread _id_13932();
    var_1 notify( "new_power", "crafted_rad_extractor" );
    var_1 setclientomnvar( "zom_crafted_weapon", 16 );
    var_1 thread _id_0A77::_id_1308C( var_1, "iw7_pickup_zm" );
    _id_0A77::_id_F313( "crafted_rad_extractor", ::give_crafted_rad_extractor, var_1 );
}

radiation_extractor_after_pool_part( var_0 )
{
    level.radiation_extraction_interaction.origin = var_0;
    level.radiation_extractor.origin = var_0;
    playfx( scripts\engine\utility::_id_7ECB( "hidden_figure_death" ), var_0 );
    scripts\engine\utility::_id_CE2B( "part_pickup", var_0 );
    _id_0A59::_id_175C( level.radiation_extraction_interaction );
}

removememorystructonconnect( var_0 )
{
    level endon( "game_ended" );

    for (;;)
    {
        level waittill( "connected", var_1 );
        var_1 thread removememorystructswhenvalid( var_0, var_1 );
    }
}

removememorystructswhenvalid( var_0, var_1 )
{
    while ( !isdefined( var_1._id_55BB ) )
        scripts\engine\utility::waitframe();

    _id_0A59::_id_E01A( var_0, var_1 );
    var_1 thread scripts\cp\maps\cp_town\cp_town::update_special_mode_for_player( var_1 );
}

setup_hidden_figure_models( var_0, var_1 )
{
    scripts\cp\maps\cp_town\cp_town::addtopersonalinteractionlist( var_0 );

    switch ( var_1 )
    {
        case "figure_4":
        case "figure_3":
        case "figure_2":
        case "figure_1":
            var_0._id_FEF1 = 0;
            var_0.player_who_shot_figure = undefined;
            break;
    }
}

mem_object_hint( var_0, var_1 )
{
    return "";
}

mem_object_func( var_0, var_1 )
{

}

activatefiguredamage( var_0, var_1, var_2 )
{
    level notify( var_0.script_noteworthy + "_" + var_1.name );
    level endon( var_0.script_noteworthy + "_" + var_1.name );
    level endon( "game_ended" );
    var_1 endon( "disconnect" );
    var_1 endon( "last_stand" );
    level endon( "end_hidden_figures_sequence_for_" + var_1.name );
    var_2 endon( "p_ent_reset" );

    if ( !isdefined( var_2 ) )
        return;

    var_2.health = 5;
    var_2.maxhealth = 5;
    var_2 setcandamage( 1 );
    var_2 endon( "end_thread_for_" + var_2._id_01F1 );

    for (;;)
    {
        var_2 waittill( "damage", var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12 );

        if ( !isplayer( var_4 ) )
            continue;

        if ( var_4 != var_1 )
            continue;

        if ( !var_4 _id_0A77::_id_9D05() )
            continue;

        if ( scripts\engine\utility::_id_9CEE( var_2.got_hit_by_player ) )
            continue;

        if ( var_2.health < 0 )
        {
            var_2.health = 5;
            var_2.maxhealth = 5;
            var_2 setscriptablepartstate( "figure_effect", "death" );
            level thread scripts\engine\utility::_id_CE2B( "town_kill_black_ghost_success", var_6 );
            var_2.got_hit_by_player = 1;

            if ( isdefined( var_4.hidden_figures_hit ) )
            {
                var_4.hidden_figures_hit++;

                if ( var_4.hidden_figures_hit >= 4 )
                    var_4 thread scripts\cp\maps\cp_town\cp_town::update_special_mode_for_player( var_4 );
            }

            var_2 _meth_8429( var_4 );
            var_2 notify( "end_thread_for_" + var_2._id_01F1 );
        }
    }
}

showhiddenfigurestoplayer( var_0, var_1, var_2, var_3 )
{
    var_3 notify( "one_instance_of_" + var_1.script_noteworthy + "_for_" + var_3.name );
    var_3 endon( "one_instance_of_" + var_1.script_noteworthy + "_for_" + var_3.name );
    var_3 endon( "death" );
    var_3 endon( "disconnect" );
    level endon( "game_ended" );
    level endon( "end_hidden_figures_sequence_for_" + var_3.name );

    if ( !isdefined( var_3._id_134FD ) )
        return;

    if ( !isdefined( var_1.script_noteworthy ) )
        return;

    if ( !scripts\engine\utility::_id_9CEE( var_3.triggered_rad_extractor_device ) )
        return;

    var_4 = 0.5;
    var_5 = 10000;

    if ( scripts\engine\utility::_id_9CEE( var_3.inside_slow_sphere ) )
    {
        var_4 = 1.5;
        var_5 = 40000;
    }

    var_6 = [];
    var_7 = gettime();
    var_0.got_hit_by_player = 0;
    thread activatefiguredamage( var_1, var_3, var_0 );
    var_0 _meth_8388( var_3 );

    while ( gettime() <= var_7 + var_5 )
    {
        var_8 = randomintrange( -200, 200 );
        var_9 = randomintrange( -200, 200 );
        var_10 = randomintrange( 90, 200 );
        var_3.figure_one_offset = ( var_8, var_9, var_10 );
        var_11 = randomintrange( -200, 200 );
        var_12 = randomintrange( -200, 200 );
        var_13 = randomintrange( 90, 200 );
        var_3.figure_two_offset = ( var_11, var_12, var_13 );
        var_14 = randomintrange( -200, 200 );
        var_15 = randomintrange( -200, 200 );
        var_16 = randomintrange( 90, 200 );
        var_3.figure_three_offset = ( var_14, var_15, var_16 );
        var_17 = randomintrange( -200, 200 );
        var_18 = randomintrange( -200, 200 );
        var_19 = randomintrange( 90, 200 );
        var_3.figure_four_offset = ( var_17, var_18, var_19 );

        switch ( var_1.script_noteworthy )
        {
            case "figure_1":
                var_1.playeroffset[var_3.name] = var_3.origin + var_3.figure_one_offset;
                var_0 setmodel( "tag_origin_hidden_figure" );
                var_0 setscriptablepartstate( "figure_effect", "active" );
                var_0.origin = var_3.origin + var_3.figure_one_offset;
                break;
            case "figure_2":
                var_1.playeroffset[var_3.name] = var_3.origin + var_3.figure_two_offset;
                var_0 setmodel( "tag_origin_hidden_figure" );
                var_0 setscriptablepartstate( "figure_effect", "active" );
                var_0.origin = var_3.origin + var_3.figure_two_offset;
                break;
            case "figure_3":
                var_1.playeroffset[var_3.name] = var_3.origin + var_3.figure_three_offset;
                var_0 setmodel( "tag_origin_hidden_figure" );
                var_0 setscriptablepartstate( "figure_effect", "active" );
                var_0.origin = var_3.origin + var_3.figure_three_offset;
                break;
            case "figure_4":
                var_1.playeroffset[var_3.name] = var_3.origin + var_3.figure_four_offset;
                var_0 setmodel( "tag_origin_hidden_figure" );
                var_0 setscriptablepartstate( "figure_effect", "active" );
                var_0.origin = var_3.origin + var_3.figure_four_offset;
                break;
        }

        if ( int( distance( var_0.origin, var_3.origin ) ) <= 120 )
            var_3 _meth_80B0( int( var_3.health / 4 ), var_3.origin );

        var_0.angles = vectortoangles( var_3.origin - var_0.origin );
        var_1._id_01F1 = var_0;
        wait( var_4 );
    }

    var_0 setscriptablepartstate( "figure_effect", "neutral" );
    scripts\engine\utility::waitframe();
    var_0 setscriptablepartstate( "figure_effect", "death" );
    var_3.triggered_rad_extractor_device = 0;
    level notify( "end_hidden_figures_sequence_for_" + var_3.name );
}

init_fig1()
{
    level.special_mode_activation_funcs["figure_1"] = ::showhiddenfigurestoplayer;
    level.normal_mode_activation_funcs["figure_1"] = ::showhiddenfigurestoplayer;
    level.hidden_figures[0] = spawnstruct();
    level.hidden_figures[0].origin = ( 4058, -4359, 76 );
    level.hidden_figures[0]._id_D776 = 0;
    level.hidden_figures[0]._id_E1B9 = 0;
    level.hidden_figures[0].name = "hidden_figure_objects";
    level.hidden_figures[0].script_noteworthy = "figure_1";
    level.hidden_figures[0]._id_EE79 = "default";
    level.hidden_figures[0]._id_0336 = "interaction";
    var_0 = scripts\engine\utility::_id_8180( "figure_1", "script_noteworthy" );

    foreach ( var_3, var_2 in var_0 )
    {
        var_2._id_86A2 = "locOverride";
        var_2.playeroffset = [];
        setup_hidden_figure_models( var_2, "figure_1" );
    }
}

init_fig2()
{
    level.special_mode_activation_funcs["figure_2"] = ::showhiddenfigurestoplayer;
    level.normal_mode_activation_funcs["figure_2"] = ::showhiddenfigurestoplayer;
    level.hidden_figures[1] = spawnstruct();
    level.hidden_figures[1].origin = ( 4058, -4359, 76 );
    level.hidden_figures[1]._id_D776 = 0;
    level.hidden_figures[1]._id_E1B9 = 0;
    level.hidden_figures[1].name = "hidden_figure_objects";
    level.hidden_figures[1].script_noteworthy = "figure_2";
    level.hidden_figures[1]._id_EE79 = "default";
    level.hidden_figures[1]._id_0336 = "interaction";
    var_0 = scripts\engine\utility::_id_8180( "figure_2", "script_noteworthy" );

    foreach ( var_3, var_2 in var_0 )
    {
        var_2._id_86A2 = "locOverride";
        var_2.playeroffset = [];
        setup_hidden_figure_models( var_2, "figure_2" );
    }
}

init_fig3()
{
    level.special_mode_activation_funcs["figure_3"] = ::showhiddenfigurestoplayer;
    level.normal_mode_activation_funcs["figure_3"] = ::showhiddenfigurestoplayer;
    level.hidden_figures[2] = spawnstruct();
    level.hidden_figures[2].origin = ( 4058, -4359, 76 );
    level.hidden_figures[2]._id_D776 = 0;
    level.hidden_figures[2]._id_E1B9 = 0;
    level.hidden_figures[2].name = "hidden_figure_objects";
    level.hidden_figures[2].script_noteworthy = "figure_3";
    level.hidden_figures[2]._id_EE79 = "default";
    level.hidden_figures[2]._id_0336 = "interaction";
    var_0 = scripts\engine\utility::_id_8180( "figure_3", "script_noteworthy" );

    foreach ( var_3, var_2 in var_0 )
    {
        var_2._id_86A2 = "locOverride";
        var_2.playeroffset = [];
        setup_hidden_figure_models( var_2, "figure_3" );
    }
}

init_fig4()
{
    level.special_mode_activation_funcs["figure_4"] = ::showhiddenfigurestoplayer;
    level.normal_mode_activation_funcs["figure_4"] = ::showhiddenfigurestoplayer;
    level.hidden_figures[3] = spawnstruct();
    level.hidden_figures[3].origin = ( 4058, -4359, 76 );
    level.hidden_figures[3]._id_D776 = 0;
    level.hidden_figures[3]._id_E1B9 = 0;
    level.hidden_figures[3].name = "hidden_figure_objects";
    level.hidden_figures[3].script_noteworthy = "figure_4";
    level.hidden_figures[3]._id_EE79 = "default";
    level.hidden_figures[3]._id_0336 = "interaction";
    var_0 = scripts\engine\utility::_id_8180( "figure_4", "script_noteworthy" );

    foreach ( var_3, var_2 in var_0 )
    {
        var_2._id_86A2 = "locOverride";
        var_2.playeroffset = [];
        setup_hidden_figure_models( var_2, "figure_4" );
    }
}
